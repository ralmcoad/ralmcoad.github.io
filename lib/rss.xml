<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Notes]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://www.jayitha.github.io/Notes/</link><image><url>https://www.jayitha.github.io/Notes/lib/media/favicon.png</url><title>Notes</title><link>https://www.jayitha.github.io/Notes/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 14 Apr 2025 09:23:00 GMT</lastBuildDate><atom:link href="https://www.jayitha.github.io/Notes/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 14 Apr 2025 09:22:09 GMT</pubDate><copyright><![CDATA[Jayitha Cherapanamjeri]]></copyright><ttl>60</ttl><dc:creator>Jayitha Cherapanamjeri</dc:creator><item><title><![CDATA[Acceptance]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
An important computation over <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">words</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">words</a> is acceptance where the task is to accept words that belong to a <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/acceptance.html</link><guid isPermaLink="false">Glossary/Acceptance.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Acyclic Graph]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  is acyclic if it has no <a data-tooltip-position="top" aria-label="Cycle" data-href="Cycle" href="https://www.jayitha.github.io/Notes/Cycle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">cycles</a><a data-tooltip-position="top" aria-label="Cycle" data-href="Cycle" href="https://www.jayitha.github.io/Notes/glossary/cycle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">cycles</a> or, equivalently, if the <a data-tooltip-position="top" aria-label="P-Closure" data-href="P-Closure" href="https://www.jayitha.github.io/Notes/P-Closure" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">transitive closure</a><a data-tooltip-position="top" aria-label="P-Closure" data-href="P-Closure" href="https://www.jayitha.github.io/Notes/glossary/p-closure.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">transitive closure</a> of  is <a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">irreflexive</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">irreflexive</a><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/acyclic-graph.html</link><guid isPermaLink="false">Glossary/Acyclic Graph.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Apache Arrow]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://arrow.apache.org/docs/index.html" rel="noopener nofollow" class="external-link" href="https://arrow.apache.org/docs/index.html" target="_blank">Apache Arrow</a> an in-memory columnar data format that allows for fast processing and movement of data. Some features include<br>
<br>Zero-copy shared memory 
<br>RPC-based data movement
<br>Reading and writing file formats (CSV, Apache Parquet)
<br>In-memory analytics and query processing<br>
The columnar format consists of
<br>an in-memory data structure specification
<br>metadata serialization
<br>protocol for serialization and data transport
<br>Uses Google's <a data-href="Flatbuffers" href="https://www.jayitha.github.io/Notes/Flatbuffers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Flatbuffers</a><a data-href="Flatbuffers" href="https://www.jayitha.github.io/Notes/glossary/flatbuffers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Flatbuffers</a> for metadata serialization<br>The columnar format has some key features<br>
From <a data-tooltip-position="top" aria-label="https://arrow.apache.org/docs/format/Columnar.html" rel="noopener nofollow" class="external-link" href="https://arrow.apache.org/docs/format/Columnar.html" target="_blank">website</a>

<br>Data adjacency for sequential access (scans)
<br> (constant-time) random access
<br>SIMD and vectorization-friendly
<br>Relocatable without "pointer swizzling", allowing for true zero-copy access in shared memory

<br>
Analytical and data locality in exchange for comparatively more expensive mutation operations
]]></description><link>https://www.jayitha.github.io/Notes/glossary/apache-arrow.html</link><guid isPermaLink="false">Glossary/Apache Arrow.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Automorphism]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
An automorphism on <a data-href="graph" href="https://www.jayitha.github.io/Notes/graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-href="graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  is an <a data-tooltip-position="top" aria-label="Isomorphism" data-href="Isomorphism" href="https://www.jayitha.github.io/Notes/Isomorphism" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">isomorphism</a><a data-tooltip-position="top" aria-label="Isomorphism" data-href="Isomorphism" href="https://www.jayitha.github.io/Notes/glossary/isomorphism.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">isomorphism</a> from  to <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/automorphism.html</link><guid isPermaLink="false">Glossary/Automorphism.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Axiom of Choice (AC)]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
Let  be a set of non-empty sets, the axiom of choice (AC) asserts that there exists a choice <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  such that for every set , <br>Informally,  assigns to each set in  a member of that set. <br>Each choice function  corresponds to one element in the cartesian product of the elements of the collection . Therefore, another way to state the AC is<br>
Given any family/collection of non-empty sets , their cartesian product  is a nonempty set
<br>Another way <br>Properties<br>Equivalent to: <a data-href="Zorn's Lemma" href="https://www.jayitha.github.io/Notes/Zorn's Lemma" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Zorn's Lemma</a><a data-href="Zorn's Lemma" href="https://www.jayitha.github.io/Notes/glossary/zorn's-lemma.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Zorn's Lemma</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/axiom-of-choice-(ac).html</link><guid isPermaLink="false">Glossary/Axiom of Choice (AC).md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bag Semantics]]></title><description><![CDATA[ 
 <br>(<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a>) PostgreSQL and possibly most other DMBS follow {{bag}} semantics]]></description><link>https://www.jayitha.github.io/Notes/glossary/bag-semantics.html</link><guid isPermaLink="false">Glossary/Bag Semantics.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bayes' Rule]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Let  be disjoint events that form a partition of the sample space, and assume that , for all . Then, for any event  such that , we have<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/bayes&apos;-rule.html</link><guid isPermaLink="false">Glossary/Bayes&apos; Rule.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bernoulli Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bertsekas2008introduction</a><a data-href="bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bertsekas2008introduction</a><br>
The Bernoulli random variable takes two values -  with probability  and  with probability <br><br>Its <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> is<br><br>The <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Mean</a>, 2nd <a data-tooltip-position="top" aria-label="Moments" data-href="Moments" href="https://www.jayitha.github.io/Notes/Moments" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Moment</a><a data-tooltip-position="top" aria-label="Moments" data-href="Moments" href="https://www.jayitha.github.io/Notes/glossary/moments.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Moment</a> and <a data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Variance</a><a data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Variance</a> are<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/bernoulli-random-variable.html</link><guid isPermaLink="false">Glossary/Bernoulli Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bernoulli Trials]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
In the special case where there are only two possible results of each trial in a sequence of <a data-href="Independent Trials" href="https://www.jayitha.github.io/Notes/Independent Trials" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Independent Trials</a><a data-href="Independent Trials" href="https://www.jayitha.github.io/Notes/glossary/independent-trials.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Independent Trials</a>, we say that we have a sequence of independent Bernoulli Trials]]></description><link>https://www.jayitha.github.io/Notes/glossary/bernoulli-trials.html</link><guid isPermaLink="false">Glossary/Bernoulli Trials.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bertrand's Paradox]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Probability theory is full of paradoxes, different calculation methods reflecting poorly specified or ambiguous probability models can yield different answers to the same question. A popular example is the Bertrand’s Paradox<br><img alt="Pasted image 20240418155835.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240418155835.png"><br>
What is the probability that the length of a randomly chosen chord of the circle is greater than the size of a side of an equilateral triangle inscribed in the circle?]]></description><link>https://www.jayitha.github.io/Notes/glossary/bertrand&apos;s-paradox.html</link><guid isPermaLink="false">Glossary/Bertrand&apos;s Paradox.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240418155835.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240418155835.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Binary Relation]]></title><description><![CDATA[ 
 <br>To be specific, a binary relation  is defined over two sets  and  as a subset of the cross product  ().<br>A general <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a> is different, by notation its definition is not tied down to sets  and . In other words, a binary relation is the scoped version of a relation. When the scope is clear i.e. when the relation is defined over sets, in most cases, you can default to binary relations.<br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A binary relation (<a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$2$-ary relation</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary relation</a>) is a set of <a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/n-Tuple" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">2-tuple</a><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">2-tuple</a> (otherwise, called an <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pair</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pair</a>) <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequences</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequences</a> of set . We then say that relation  is defined on set .<br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A binary relation over a (finite or infinite) set  is a subset  of .  or  denote that <br>Properties<br>Every binary relation is a <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a> but not every relation is a binary relation<br>See Also<br>
<br><a data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Equivalence Relation</a><a data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Equivalence Relation</a>
<br><a data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relation</a><a data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relation</a>
<br><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Reflexive Relation</a><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Reflexive Relation</a>
<br><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Symmetric Relation</a><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Symmetric Relation</a>
<br><a data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Transitive Relation</a><a data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Transitive Relation</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/binary-relation.html</link><guid isPermaLink="false">Glossary/Binary Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Binomial Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
In  independent <a data-href="Bernoulli Trials" href="https://www.jayitha.github.io/Notes/Bernoulli Trials" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bernoulli Trials</a><a data-href="Bernoulli Trials" href="https://www.jayitha.github.io/Notes/glossary/bernoulli-trials.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bernoulli Trials</a> with probability of success of each trial  (and failure ), we model the number of successes observed as a Binomial random variable with parameters  and .<br><br>and its <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> is given by<br>
The <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mean</a> and <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">variance</a><a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">variance</a> are given by<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/binomial-random-variable.html</link><guid isPermaLink="false">Glossary/Binomial Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bonferroni's Inequality]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
For any two events  and ,<br>
Generalizing to the case of  events ,<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/bonferroni&apos;s-inequality.html</link><guid isPermaLink="false">Glossary/Bonferroni&apos;s Inequality.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Cardinality]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
Each set  is assigned a certain object, called the cardinal number (or cardinality) of  (), in such a way that two sets are assigned the same cardinality iff they are <a data-tooltip-position="top" aria-label="Equinumerosity" data-href="Equinumerosity" href="https://www.jayitha.github.io/Notes/Equinumerosity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">equinumerous</a><a data-tooltip-position="top" aria-label="Equinumerosity" data-href="Equinumerosity" href="https://www.jayitha.github.io/Notes/glossary/equinumerosity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">equinumerous</a><br>
All infinite sets are big, however some are bigger than other. Cardinal numbers generalize “set size” to infinite sets.<br>For finite sets, the standard definition of cardinality is the number of members of the set.<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/cardinality.html</link><guid isPermaLink="false">Glossary/Cardinality.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Carrier Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Given two <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graphs</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graphs</a>  and , a carrier map  takes each simples  to a subgraph  of  such that  satisfies the monotonicity property: For all  , if , then <br>The image of a graph  under carrier map  is the union of subgraphs  taken over all simplices of <br>Properties<br><br>
You can prove this given the following statements<br>
&gt; Similarly<br>
Together,<br>

<br>See Also<br><a data-href="Strict Carrier Map" href="https://www.jayitha.github.io/Notes/Strict Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Strict Carrier Map</a><a data-href="Strict Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/strict-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Strict Carrier Map</a><br>
<a data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/Rigid Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rigid Simplical Map</a><a data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rigid Simplical Map</a><br>
<a data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/Connected Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Connected Carrier Map</a><a data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Connected Carrier Map</a><br>
<a data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/Chromatic Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chromatic Carrier Map</a><a data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chromatic Carrier Map</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/carrier-map.html</link><guid isPermaLink="false">Glossary/Carrier Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chain]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
Let  be a set with an <a data-tooltip-position="top" aria-label="Ordering Relation" data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/Ordering Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordering relation</a><a data-tooltip-position="top" aria-label="Ordering Relation" data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/glossary/ordering-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordering relation</a> . A subset  is a chain iff for any two elements , either  or <br>A chain is a <a data-tooltip-position="top" aria-label="Total Order" data-href="Total Order" href="https://www.jayitha.github.io/Notes/Total Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">totally ordered</a><a data-tooltip-position="top" aria-label="Total Order" data-href="Total Order" href="https://www.jayitha.github.io/Notes/glossary/total-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">totally ordered</a> subset of a <a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">poset</a><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">poset</a><br>The chain  has an upper bound  iff for every element , <br>EXAMPLE<br>
If  is a set of sets and the ordering relation is : A collection of sets  is a chain iff for any elements (sets)  and  in , either  or <br>
The upper bound of  is 
<br>Properties<br>By definition, a finite chain always has an upper bound. However, not every chain needs to have an upper bound.<br>EXAMPLES<br>
Consider set <a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/Natural Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$\N$</a><a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/glossary/natural-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> with ordering relation . Let chain .  has no upper bound because for any element  there is always a bigger number
<br>
Another example is the set , the set of rational numbers less than . Which  is a chain,  does not have an upper bound
<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/chain.html</link><guid isPermaLink="false">Glossary/Chain.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Chebyshev Metric</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: L-inf Norm, Maximum Metric, Infinity Norm<br>
Papers: [-]<br>
Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:metric" class="tag" target="_blank" rel="noopener nofollow">#metric</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/chebyshev-metric.html</link><guid isPermaLink="false">Glossary/Chebyshev Metric.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chromatic Carrier Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Given <a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic</a><a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic</a> <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graphs</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graphs</a>  and  and a <a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carrier map</a><a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carrier map</a> ,  is chromatic if<br>
<br>It is <a data-tooltip-position="top" aria-label="Rigid Carrier Map" data-href="Rigid Carrier Map" href="https://www.jayitha.github.io/Notes/Rigid Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rigid</a><a data-tooltip-position="top" aria-label="Rigid Carrier Map" data-href="Rigid Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rigid</a>
<br>For all , 
<br>Where the coloring operator for a simplex  is just the set of all colors used for the simplex<br><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html</link><guid isPermaLink="false">Glossary/Chromatic Carrier Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chromatic Simplical Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
If  and  are <a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic</a><a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic</a>, then we usually assume that the simplical map  preserves names ().<br>Properties<br>Chromatic simplical maps are <a data-tooltip-position="top" aria-label="Rigid Simplical Map" data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/Rigid Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rigid</a><a data-tooltip-position="top" aria-label="Rigid Simplical Map" data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rigid</a>.<br>
If it were not rigid, this implies that there exists an edge  in  such that its image is . If it’s not rigid, then,<br>
implying that  is not chromatic
]]></description><link>https://www.jayitha.github.io/Notes/glossary/chromatic-simplical-map.html</link><guid isPermaLink="false">Glossary/Chromatic Simplical Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Coalesce]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
Takes first non-NULL value<br>SELECT COALESCE(1, NULL) ------ 1
SELECT COALESCE(NULL, 3) ------ 3
SELECT COALESCE(1, 2) --------- 1
SELECT COALESCE(NULL, NULL) --- NULL
<br>Natural full joins model COALESCE<br>M = {(a: [1, 2])}
N = {(a: [2, 3])}

SELECT *
FROM M
NATURAL FULL JOIN N

--- {(a: 1, 2, 3)}
]]></description><link>https://www.jayitha.github.io/Notes/glossary/coalesce.html</link><guid isPermaLink="false">Glossary/Coalesce.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Coloring]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A coloring of a graph  with set  is a function<br>
such that for each edge  of , <br>If graph  is equipped with such a coloring, we say that  is chromatic or that it is colored by ]]></description><link>https://www.jayitha.github.io/Notes/glossary/coloring.html</link><guid isPermaLink="false">Glossary/Coloring.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Common Table Expressions]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
WITH clause defines a temporary table only available to the to the query it occurs in.<br>
Useful when same intermediate table needs to be accessed multiple times<br>WITH X AS
	(SELECT product, SUM(quantity) AS TQ
	 FROM purchase
	 GROUP BY product)
SELECT MAX(TQ) AS MTQ
FROM X
]]></description><link>https://www.jayitha.github.io/Notes/glossary/common-table-expressions.html</link><guid isPermaLink="false">Glossary/Common Table Expressions.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Commutativity & Associativity]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
Commutativity: <br>
Associativity: <br>
where  is a binary operator. Scalar multiplication is both commutative and associative whereas matrix multiplication is associative but not commutative<br>
Outerjoins are commutative but not associative]]></description><link>https://www.jayitha.github.io/Notes/glossary/commutativity-&amp;-associativity.html</link><guid isPermaLink="false">Glossary/Commutativity &amp; Associativity.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Completeness]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
An element  in a <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a>  is complete in  if solving  allows solving all other problems in  also within  formalized using <a data-tooltip-position="top" aria-label="Reduction" data-href="Reduction" href="https://www.jayitha.github.io/Notes/Reduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reduction</a><a data-tooltip-position="top" aria-label="Reduction" data-href="Reduction" href="https://www.jayitha.github.io/Notes/glossary/reduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reduction</a>. The complexity of the mapping function must be bounded and lower than  (maybe in class )<br>For some classes ,  is understood:<br><br>The notion of completeness is important because class bounds are upper bounds, a complexity class can contain easy and hard problems.<br>To show that a problem  is complete in  by  reductions, it is sufficient to show that another problem  that is -complete by  reductions is  reducible to <br>Properties<br>See Also<br>
<br><a data-tooltip-position="top" aria-label="The 3-Satisfiability Problem" data-href="The 3-Satisfiability Problem" href="https://www.jayitha.github.io/Notes/The 3-Satisfiability Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">3-SAT</a><a data-tooltip-position="top" aria-label="The 3-Satisfiability Problem" data-href="The 3-Satisfiability Problem" href="https://www.jayitha.github.io/Notes/glossary/the-3-satisfiability-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">3-SAT</a>
<br><a data-tooltip-position="top" aria-label="The Quantified Satisfiability Problem" data-href="The Quantified Satisfiability Problem" href="https://www.jayitha.github.io/Notes/The Quantified Satisfiability Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">QSAT</a><a data-tooltip-position="top" aria-label="The Quantified Satisfiability Problem" data-href="The Quantified Satisfiability Problem" href="https://www.jayitha.github.io/Notes/glossary/the-quantified-satisfiability-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">QSAT</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/completeness.html</link><guid isPermaLink="false">Glossary/Completeness.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Complexity]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Complexity theory studies the difficulty of problems.<br>Suppose  is a <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">recursive language</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">recursive language</a> accepted by a <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a>  that always halts, let  be a function on positive integers.  is said to use time bounded by  if on every input ,  halts in at most  steps.<br> uses space bounded by  if the amount of tape used by  on every input  is at most <br>The set of <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">recursive languages</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">recursive languages</a> <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">accepted</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">accepted</a> by <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TMs</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TMs</a> using time (space) bounded by  is denoted by  (). If  is a set of functions, then<br><br>Complexity classes can also be defined using nondeterminism: An <a data-tooltip-position="top" aria-label="Nondeterministic Turing Machine" data-href="Nondeterministic Turing Machine" href="https://www.jayitha.github.io/Notes/Nondeterministic Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">NTM</a><a data-tooltip-position="top" aria-label="Nondeterministic Turing Machine" data-href="Nondeterministic Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">NTM</a> uses time (space) bounded by  if all computations on input  halt after (use) at most  steps (space). In the case of space bounds, termination isn’t required.<br>Complexity classes of languages can be extended to complexity classes of <a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">computable functions</a><a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">computable functions</a><br>Properties<br>If <a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PTIME$</a><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> = <a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NP$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> is the biggest open problem in complexity theory.<br><a data-tooltip-position="top" aria-label="Log Space Complexity Class" data-href="Log Space Complexity Class" href="https://www.jayitha.github.io/Notes/Log Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$LOGSPACE$</a><a data-tooltip-position="top" aria-label="Log Space Complexity Class" data-href="Log Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/log-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>  <a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PTIME$</a><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>  <a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NP$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>  <a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PSPACE$</a><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>  <a data-tooltip-position="top" aria-label="Elementary Languages" data-href="Elementary Languages" href="https://www.jayitha.github.io/Notes/Elementary Languages" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$TIME(Hyp)$</a><a data-tooltip-position="top" aria-label="Elementary Languages" data-href="Elementary Languages" href="https://www.jayitha.github.io/Notes/glossary/elementary-languages.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>  (<a data-tooltip-position="top" aria-label="Elementary Functions" data-href="Elementary Functions" href="https://www.jayitha.github.io/Notes/Elementary Functions" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$Hyp$</a><a data-tooltip-position="top" aria-label="Elementary Functions" data-href="Elementary Functions" href="https://www.jayitha.github.io/Notes/glossary/elementary-functions.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>)<br>
All nonstrict inclusions are conjectured to be strict<br><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PSPACE$</a><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> = <a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NPSPACE$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> (<a data-href="Savitch's Theorem" href="https://www.jayitha.github.io/Notes/Savitch's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Savitch's Theorem</a><a data-href="Savitch's Theorem" href="https://www.jayitha.github.io/Notes/glossary/savitch's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Savitch's Theorem</a>)<br>See Also<br>
<br><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PTIME$</a><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PSPACE$</a><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Log Space Complexity Class" data-href="Log Space Complexity Class" href="https://www.jayitha.github.io/Notes/Log Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$LOGSPACE$</a><a data-tooltip-position="top" aria-label="Log Space Complexity Class" data-href="Log Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/log-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Elementary Languages" data-href="Elementary Languages" href="https://www.jayitha.github.io/Notes/Elementary Languages" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$TIME(Hyp)$</a><a data-tooltip-position="top" aria-label="Elementary Languages" data-href="Elementary Languages" href="https://www.jayitha.github.io/Notes/glossary/elementary-languages.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NP$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NPSPACE$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-href="Savitch's Theorem" href="https://www.jayitha.github.io/Notes/Savitch's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Savitch's Theorem</a><a data-href="Savitch's Theorem" href="https://www.jayitha.github.io/Notes/glossary/savitch's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Savitch's Theorem</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/complexity.html</link><guid isPermaLink="false">Glossary/Complexity.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Composition of Maps]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
<a data-tooltip-position="top" aria-label="Simplical Map" data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Simplical maps</a><a data-tooltip-position="top" aria-label="Simplical Map" data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Simplical maps</a> and <a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carrier maps</a><a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carrier maps</a> can compose.<br>Properties<br>Let  be a <a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carrier map</a><a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carrier map</a> from  to , and let  be a <a data-tooltip-position="top" aria-label="Simplical Map" data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">simplical map</a><a data-tooltip-position="top" aria-label="Simplical Map" data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">simplical map</a> from  to .  is an induced carrier map from  to .<br>
<br>If  is <a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/Chromatic Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic</a><a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic</a> and  is <a data-tooltip-position="top" aria-label="Chromatic Simplical Map" data-href="Chromatic Simplical Map" href="https://www.jayitha.github.io/Notes/Chromatic Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic</a><a data-tooltip-position="top" aria-label="Chromatic Simplical Map" data-href="Chromatic Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic</a>, then so is .
<br>If  is <a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/Connected Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected</a><a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected</a>, then so is .
<br>Let  be a <a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/Chromatic Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic carrier map</a><a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic carrier map</a> from  to  and  be a <a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/Chromatic Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic carrier map</a><a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic carrier map</a> from  to . The induced chromatic carrier map  from  to  is <a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/Connected Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected</a><a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected</a> is both  and  are <a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/Connected Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected</a><a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected</a><br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/composition-of-maps.html</link><guid isPermaLink="false">Glossary/Composition of Maps.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Computable]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Partial Function" data-href="Partial Function" href="https://www.jayitha.github.io/Notes/Partial Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partial function</a><a data-tooltip-position="top" aria-label="Partial Function" data-href="Partial Function" href="https://www.jayitha.github.io/Notes/glossary/partial-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partial function</a>  is defined to be computable iff there exists some <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a> that computes it i.e. if there exists a TM that will always halt with the correct output on any input in the domain of the function<br>A TM  computes a <a data-tooltip-position="top" aria-label="Partial Function" data-href="Partial Function" href="https://www.jayitha.github.io/Notes/Partial Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partial function</a><a data-tooltip-position="top" aria-label="Partial Function" data-href="Partial Function" href="https://www.jayitha.github.io/Notes/glossary/partial-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partial function</a>  if for each word <br>
1. If  in domain of ,  halts on  with tape containing word <br>
2. Otherwise,  need not halt or will halt on a random state<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/computable.html</link><guid isPermaLink="false">Glossary/Computable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Concatenation]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Given an alphabet set , the concatenation of two <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">words</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">words</a>  and  is denoted by <br>The <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> obtained by concatenating words from two languages  and  (denoted by ) is<br>
<br>Language  concatenated with itself  times is denoted by <br><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/concatenation.html</link><guid isPermaLink="false">Glossary/Concatenation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Concurrency</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: <br>
Papers: [<a data-href="arpacidusseau2018operating" href="https://www.jayitha.github.io/Notes/arpacidusseau2018operating" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">arpacidusseau2018operating</a><a data-href="arpacidusseau2018operating" href="https://www.jayitha.github.io/Notes/literature-notes/arpacidusseau2018operating.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">arpacidusseau2018operating</a>]<br>
Tags: ]]></description><link>https://www.jayitha.github.io/Notes/glossary/concurrency.html</link><guid isPermaLink="false">Glossary/Concurrency.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Conditional Independence]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Given an event , the events  and  are called conditionally independent if<br>
Equivalently, assuming  is nonzero<br>
Conditional independence does not imply unconditional independence and vice versa.<br>You can define the notion of conditional independence between two random variables  and  conditioned on event , given  if<br>
Or equivalently<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/conditional-independence.html</link><guid isPermaLink="false">Glossary/Conditional Independence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Conditional Probability]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The conditional probability of an event , given an event  with , is defined by<br>
The conditional probability if not defined if <br>It specifies a new (conditional) probability law on the same sample space . In particular, all <a data-href="Properties of Probability Laws" href="https://www.jayitha.github.io/Notes/Properties of Probability Laws" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Properties of Probability Laws</a><a data-href="Properties of Probability Laws" href="https://www.jayitha.github.io/Notes/glossary/properties-of-probability-laws.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Properties of Probability Laws</a> remain valid for conditional probability laws.<br>Conditional probabilities can also be viewed as a probability law on a new universe , because all of the conditional probability in concentrated on .<br>If the possible outcomes are finitely many and equally likely, then<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/conditional-probability.html</link><guid isPermaLink="false">Glossary/Conditional Probability.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Conjunctive Normal Form]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/conjunctive-normal-form.html</link><guid isPermaLink="false">Glossary/Conjunctive Normal Form.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Connected Carrier Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A <a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carrier map</a><a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carrier map</a> is connected if it sends each vertex to a non-empty set of vertices (a set of <a data-tooltip-position="top" aria-label="Isolated Vertex" data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/Isolated Vertex" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">isolated vertices</a><a data-tooltip-position="top" aria-label="Isolated Vertex" data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/glossary/isolated-vertex.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">isolated vertices</a>) and each edge to a <a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/Connected Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected</a><a data-tooltip-position="top" aria-label="Connected Carrier Map" data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected</a> subgraph<br>Properties<br>Connected carrier maps are <a data-tooltip-position="top" aria-label="Rigid Carrier Map" data-href="Rigid Carrier Map" href="https://www.jayitha.github.io/Notes/Rigid Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rigid</a><a data-tooltip-position="top" aria-label="Rigid Carrier Map" data-href="Rigid Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rigid</a><br>If  is a connected carrier map from a connected graph  to a graph , then the image of  under ,  is a connected graph]]></description><link>https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html</link><guid isPermaLink="false">Glossary/Connected Carrier Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Connected Component]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A (strongly) connected component of a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  is an <a data-tooltip-position="top" aria-label="Equivalence Class" data-href="Equivalence Class" href="https://www.jayitha.github.io/Notes/Equivalence Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">equivalence class</a><a data-tooltip-position="top" aria-label="Equivalence Class" data-href="Equivalence Class" href="https://www.jayitha.github.io/Notes/glossary/equivalence-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">equivalence class</a> of  under <a data-tooltip-position="top" aria-label="Connectedness" data-href="Connectedness" href="https://www.jayitha.github.io/Notes/Connectedness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">(strong) connectedness</a><a data-tooltip-position="top" aria-label="Connectedness" data-href="Connectedness" href="https://www.jayitha.github.io/Notes/glossary/connectedness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">(strong) connectedness</a><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/connected-component.html</link><guid isPermaLink="false">Glossary/Connected Component.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Connected Graph]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a> is connected if there is a path from every pair of vertices: For all , there exists a <a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/Path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">path</a><a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">path</a> from  to  of edges  linking those vertices:  and <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
 is (strongly) connected if it has exactly one <a data-tooltip-position="top" aria-label="Connected Component" data-href="Connected Component" href="https://www.jayitha.github.io/Notes/Connected Component" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">(strongly) connected component</a><a data-tooltip-position="top" aria-label="Connected Component" data-href="Connected Component" href="https://www.jayitha.github.io/Notes/glossary/connected-component.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">(strongly) connected component</a><br>Properties]]></description><link>https://www.jayitha.github.io/Notes/glossary/connected-graph.html</link><guid isPermaLink="false">Glossary/Connected Graph.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Connectedness]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
If  is a graph, then two vertices  are connected if there exists an <a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/Path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">undirected path</a><a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">undirected path</a> in  from  to <br> and  are strongly connected if there are directed paths from  to  and from  to <br>Properties<br>Connectedness and strong connectedness are <a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">equivalence relations</a><a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">equivalence relations</a><br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/connectedness.html</link><guid isPermaLink="false">Glossary/Connectedness.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Consensus]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Alice and Bob must decide on one of their input values. There are two versions of the consensus tasks - (1) fixed - where the input for each process is fixed apriori and (2) binary - where the input for each could be one of two values  or <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/consensus.html</link><guid isPermaLink="false">Glossary/Consensus.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Context-Free Grammar]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Context-free Grammars (CFGs) provide another approach to specifying a <a data-href="language" href="https://www.jayitha.github.io/Notes/language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-href="language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> but through generation rather than <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptance</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptance</a><br>A CFG is a 4-tuple  where<br>
<br> - finite set of nonterminal symbols
<br> - finite <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">alphabet</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">alphabet</a> of terminal symbols disjoin from 
<br> - a symbol of  called start symbol
<br> - finite set of production rules of form  where  and 
<br>The language generated by CFG  (denoted by ) consists of words in  that can be derived from  by repeated application of the productions<br>If  is obtained from  by a production =&gt;  and  denotes transitive closure. Then,<br>
<br>A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> is context-free if it is  for some CFG <br>Properties<br>Generation can be turned into <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptance</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptance</a> through parsing<br>The specification power of CFGs is between <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a> and <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TMs</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TMs</a>.<br>
<a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Regular Languages</a><a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Regular Languages</a>  Context-Free Languages  <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Recursive Languages</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Recursive Languages</a><br>
<br> is a popular language that is context-free but not <a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">regular</a><a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">regular</a>
<br> is a popular language that is <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">recursive</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">recursive</a>  but not context-free]]
<br>Some CFG problems are<br>
<br><a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/Decidable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">decidable</a><a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/glossary/decidable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">decidable</a> - <a data-tooltip-position="top" aria-label="The Emptiness Problem" data-href="The Emptiness Problem" href="https://www.jayitha.github.io/Notes/The Emptiness Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">the emptiness problem</a><a data-tooltip-position="top" aria-label="The Emptiness Problem" data-href="The Emptiness Problem" href="https://www.jayitha.github.io/Notes/glossary/the-emptiness-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">the emptiness problem</a> and finiteness (is  finite?) whereas others are
<br>undecidable - containment () and equality ()
<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/context-free-grammar.html</link><guid isPermaLink="false">Glossary/Context-Free Grammar.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Continuity Property of Probabilities]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>Let  be an infinite sequence of events which is monotonically increasing (). Let . Then<br>
<br>If the events are monotonically decreasing (). Let . Then<br>
<br>For instance, if the sample space is the real line:<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/continuity-property-of-probabilities.html</link><guid isPermaLink="false">Glossary/Continuity Property of Probabilities.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Continuous Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
A <a data-href="Random Variable" href="https://www.jayitha.github.io/Notes/Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Random Variable</a><a data-href="Random Variable" href="https://www.jayitha.github.io/Notes/glossary/random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Random Variable</a>  is called continuous if there is a nonnegative function  called the <a data-tooltip-position="top" aria-label="Probability Density Function (PDF)" data-href="Probability Density Function (PDF)" href="https://www.jayitha.github.io/Notes/Probability Density Function (PDF)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">probability density function</a><a data-tooltip-position="top" aria-label="Probability Density Function (PDF)" data-href="Probability Density Function (PDF)" href="https://www.jayitha.github.io/Notes/glossary/probability-density-function-(pdf).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">probability density function</a> of  such that<br>
for every subset  of the real line. <br>Unlike the <a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Random Variable</a><a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Random Variable</a>, the range of values that  can take is uncountably infinite.<br>Note that we cannot define the probability of a single point: for any single value <br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/continuous-random-variable.html</link><guid isPermaLink="false">Glossary/Continuous Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Continuous Uniform Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
A random variable  that takes values in interval  if uniform if any two subintervals of the same length have the same probability.  is said to be uniform or uniformly distributed<br><br>Its <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mean</a>, 2nd <a data-tooltip-position="top" aria-label="Moments" data-href="Moments" href="https://www.jayitha.github.io/Notes/Moments" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">moment</a><a data-tooltip-position="top" aria-label="Moments" data-href="Moments" href="https://www.jayitha.github.io/Notes/glossary/moments.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">moment</a> and <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">variance</a><a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">variance</a> are given by<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/continuous-uniform-random-variable.html</link><guid isPermaLink="false">Glossary/Continuous Uniform Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Converges in Probability]]></title><description><![CDATA[ 
 <br><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beyer1999nearest</a><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beyer1999nearest</a><br>
A sequence of random vectors (where all vectors have the same arity)   converges in probability  to a constant vector  if for all  the probability of  being at most  away from  converges to  as .<br> Related Lemmas:<br>If  is a sequence of random variables with finite variance and  and , then ]]></description><link>https://www.jayitha.github.io/Notes/glossary/converges-in-probability.html</link><guid isPermaLink="false">Glossary/Converges in Probability.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Coordinated Attack]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Alice and Bob each command an army camped on a hilltop overlooking a valley where the enemy army is camped. If they attack together, they prevail but if they attack separately, they may not.<br>Assume it takes a messenger 1 hour to get across the valley and the Alice can initiate communication either picking noon or dawn. Bob awaits Alice’s message.<br>The formal <a data-tooltip-position="top" aria-label="Task" data-href="Task" href="https://www.jayitha.github.io/Notes/Task" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">task</a><a data-tooltip-position="top" aria-label="Task" data-href="Task" href="https://www.jayitha.github.io/Notes/glossary/task.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">task</a> specification:<br>
<br> contains 3 vertices 
<br> has three disjoint edges representing the three acceptable final scenarios
<br><img alt="Pasted image 20240706163547.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240706163547.png"><br>This problem in its native form is not solvable. The protocol always subdivides the edges of the input graph. It is not possible to convert the connected input graph into the disconnected output graph using subdivisions<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/coordinated-attack.html</link><guid isPermaLink="false">Glossary/Coordinated Attack.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240706163547.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240706163547.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Correlated Nested Queries]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
When the WHERE clause of a nested query references some table in the outer query, the two queries are said to be correlated<br>
Where in uncorrelated queries, you could evaluate the inner query and then evaluate the outer query, in a correlated query, the inner query has to be evaluated for each tuple of the outer query (semantic evaluation)]]></description><link>https://www.jayitha.github.io/Notes/glossary/correlated-nested-queries.html</link><guid isPermaLink="false">Glossary/Correlated Nested Queries.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Countable]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A set  is countable iff there is some <a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">one-to-one</a><a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">one-to-one</a> <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  mapping set  to the set of <a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/Natural Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">natural numbers</a><a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/glossary/natural-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">natural numbers</a> ()<br>
<br>Properties<br>L1. Let  be a countably infinite set with <a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">one-one</a><a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">one-one</a> counting function . Then, we can extract a <a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">one-one</a><a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">one-one</a> <a data-tooltip-position="top" aria-label="Onto Function" data-href="Onto Function" href="https://www.jayitha.github.io/Notes/Onto Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">onto</a><a data-tooltip-position="top" aria-label="Onto Function" data-href="Onto Function" href="https://www.jayitha.github.io/Notes/glossary/onto-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">onto</a> counting function <a data-footref="[inline0" href="https://www.jayitha.github.io/Notes/about:blank#fn-1-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a><br>T1. Let  be a countable set, then the set of all <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequences</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequences</a> of members of  is also countable<a data-footref="[inline1" href="https://www.jayitha.github.io/Notes/about:blank#fn-2-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a><br>See Also<br>
<br>
<br>For some ,  is the least member of <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$ran$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>(), let <br>In general, there is some unique  such that  is the th least member of <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$ran$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>(), let <a href="https://www.jayitha.github.io/Notes/about:blank#fnref-1-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>For each finite sequence , assign number  where  is the th prime number and  is the counting function of set <a href="https://www.jayitha.github.io/Notes/about:blank#fnref-2-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/countable.html</link><guid isPermaLink="false">Glossary/Countable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Counting Results]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>Permutations of  objects is <br>Permutations of  objects of  (k-Permutations)<br>
Combinations of  out of  objects<br>
Partitions of  objects into  groups, with the th group having  objects:<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/counting-results.html</link><guid isPermaLink="false">Glossary/Counting Results.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Curse of Dimensionality</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: <br>
Papers: [-]<br>
Tags: ]]></description><link>https://www.jayitha.github.io/Notes/glossary/curse-of-dimensionality.html</link><guid isPermaLink="false">Glossary/Curse of Dimensionality.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Cycle]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A cycle is a <a data-href="path" href="https://www.jayitha.github.io/Notes/path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">path</a><a data-href="path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">path</a>  such that  and <br>A directed cycle is proper if  is a <a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/Path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">proper path</a><a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">proper path</a><br>An undirected cycle is proper if  is a <a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/Path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">proper path</a><a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">proper path</a> and <a data-footref="[inline0" href="https://www.jayitha.github.io/Notes/about:blank#fn-1-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a><br>Properties<br>If  has a cycle from , then  has a proper cycle from <br>See Also<br>
<br>
<br>Why ? In theory it can be a cycle, but it doesn’t look like a cycle because the same edge between two vertices qualifies for a cycle<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-1-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/cycle.html</link><guid isPermaLink="false">Glossary/Cycle.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Data Independence Principle]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The separation between the <a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/Logical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">logical</a><a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/glossary/logical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">logical</a> and physical representations of data is called the data independence principle. The data independence principle is central to database systems and distinguishes them from file systems. AKA Physical Data Independence<br>The logical organization in <a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/Network Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">network</a><a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/glossary/network-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">network</a> and <a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/Hierarchical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hierarchical</a><a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/glossary/hierarchical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hierarchical</a> models (in the form of graphs and trees resp.) closely mirrored physical storage and the <a data-href="Abbreviations#DML" href="https://www.jayitha.github.io/Notes/Abbreviations#DML" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DML</a><a data-href="Abbreviations#DML" href="https://www.jayitha.github.io/Notes/abbreviations.html#DML" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DML</a> was primitive to focus on navigating through physically stored data.<br>This separation has seen an increase in database usability and programmer productivity. This separation also allows for changing physical implementation without having to change existing application programs.<br>An issue with the separation of the two layers is the trade-off between human convenience and performance. Now, the system must compile queries and updates using the logical representation into programs that operate efficiently on the physical representation.<br>The separation between the <a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/Logical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">logical</a><a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/glossary/logical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">logical</a> and external levels (<a data-href="Three-Level Architecture" href="https://www.jayitha.github.io/Notes/Three-Level Architecture" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Three-Level Architecture</a><a data-href="Three-Level Architecture" href="https://www.jayitha.github.io/Notes/glossary/three-level-architecture.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Three-Level Architecture</a>) is also important permitting different views of the database. AKA Logical Data Independence<br><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/chamberlin1981history" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chamberlin1981history</a><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1981history.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chamberlin1981history</a><br>
C.J. Date defines data independence as "immunity of applications to change in storage structure and access strategy"
<br>See Also<br>
<br><a data-href="Why are the Relational Modal and the Data Independence Principle Taught Together?" href="https://www.jayitha.github.io/Notes/Why are the Relational Modal and the Data Independence Principle Taught Together" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Why are the Relational Modal and the Data Independence Principle Taught Together?</a><a data-href="Why are the Relational Modal and the Data Independence Principle Taught Together?" href="https://www.jayitha.github.io/Notes/glossary/why-are-the-relational-modal-and-the-data-independence-principle-taught-together" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Why are the Relational Modal and the Data Independence Principle Taught Together?</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/data-independence-principle.html</link><guid isPermaLink="false">Glossary/Data Independence Principle.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Data Systems History]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>Prior to Codd, early <a data-tooltip-position="top" aria-label="Database System" data-href="Database System" href="https://www.jayitha.github.io/Notes/Database System" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DBMS</a><a data-tooltip-position="top" aria-label="Database System" data-href="Database System" href="https://www.jayitha.github.io/Notes/glossary/database-system.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DBMS</a> were based on the <a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/Network Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">network</a><a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/glossary/network-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">network</a> and <a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/Hierarchical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hierarchical</a><a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/glossary/hierarchical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hierarchical</a> models which provide some logical organization (graphs and trees) that also closely mirror physical storage of data. The corresponding <a data-tooltip-position="top" aria-label="Abbreviations > ^DML" data-href="Abbreviations#^DML" href="https://www.jayitha.github.io/Notes/Abbreviations#^DML" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DML</a><a data-tooltip-position="top" aria-label="Abbreviations > ^DML" data-href="Abbreviations#^DML" href="https://www.jayitha.github.io/Notes/abbreviations.html#^DML" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DML</a> were primitive and navigated the physically stored data<br>Late 1960<br>
First step towards insulating users from physical implementation - <a data-href="Three-Level Architecture" href="https://www.jayitha.github.io/Notes/Three-Level Architecture" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Three-Level Architecture</a><a data-href="Three-Level Architecture" href="https://www.jayitha.github.io/Notes/glossary/three-level-architecture.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Three-Level Architecture</a><br>1970<br>
Codd’s <a data-tooltip-position="top" aria-label="Relational Model" data-href="Relational Model" href="https://www.jayitha.github.io/Notes/Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relational model</a><a data-tooltip-position="top" aria-label="Relational Model" data-href="Relational Model" href="https://www.jayitha.github.io/Notes/glossary/relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relational model</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/data-systems-history.html</link><guid isPermaLink="false">Glossary/Data Systems History.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database System]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A database system is a mediator between human beings who want to use data and physical devices that hold it<br><a data-tooltip-position="top" aria-label="abiteboul1995foundations.pdf > page=7&amp;selection=44,0,45,38&amp;color=note" data-href="abiteboul1995foundations.pdf#page=7&amp;selection=44,0,45,38&amp;color=note" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations.pdf#page=7&amp;selection=44,0,45,38&amp;color=note" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations, p.7</a><a data-tooltip-position="top" aria-label="abiteboul1995foundations.pdf > page=7&amp;selection=44,0,45,38&amp;color=note" data-href="abiteboul1995foundations.pdf#page=7&amp;selection=44,0,45,38&amp;color=note" href="https://www.jayitha.github.io/Notes/annotations/abiteboul1995foundations.pdf#page=7&amp;selection=44,0,45,38&amp;color=note" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations, p.7</a>

Database systems can be viewed as mediators between human beings who want to use data and physical devices that hold it

]]></description><link>https://www.jayitha.github.io/Notes/glossary/database-system.html</link><guid isPermaLink="false">Glossary/Database System.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database Theory]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Database Theory has largely two directions -<br>
(1) principal focusing on logical and external layers and<br>
(2) concurrency control<br>Database theory has focuses narrowly on specific areas that are amenable to theoretical investigation. Little has been done on theory in connection with physical query optimization, behavioral aspects of databases (<a data-tooltip-position="top" aria-label="abiteboul1995foundations.pdf > page=13&amp;selection=4,12,6,49" data-href="abiteboul1995foundations.pdf#page=13&amp;selection=4,12,6,49" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations.pdf#page=13&amp;selection=4,12,6,49" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations, p.13</a><a data-tooltip-position="top" aria-label="abiteboul1995foundations.pdf > page=13&amp;selection=4,12,6,49" data-href="abiteboul1995foundations.pdf#page=13&amp;selection=4,12,6,49" href="https://www.jayitha.github.io/Notes/annotations/abiteboul1995foundations.pdf#page=13&amp;selection=4,12,6,49" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations, p.13</a>)<br>Supported:<br>
<br>Description of data (models)
<br>Querying
<br>Overlooked:<br>
<br>Designing application software - Applications can be written in a language like C and extended with embedded SQL however there is a big gap between the two paradigms

<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> Research Object-oriented databases - merging database tech with OO languages and AI
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> Look at Deductive and Active Databases that are supposedly bridging the gap between C-like and SQL paradigms to improve application programmer productivity. Fuse database tech with logic programming and production-rule systems


]]></description><link>https://www.jayitha.github.io/Notes/glossary/database-theory.html</link><guid isPermaLink="false">Glossary/Database Theory.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[de Morgan's Laws]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Where   is a set and  denotes the set complement]]></description><link>https://www.jayitha.github.io/Notes/glossary/de-morgan&apos;s-laws.html</link><guid isPermaLink="false">Glossary/de Morgan&apos;s Laws.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Decidable]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The problem of checking if a given object satisfies a certain property is decidable  if there is an algorithm (a <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a>) that can perform this check in finite time. Otherwise, the property is said to be undecidable.<br>Decidability is related to <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">recursive languages</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">recursive languages</a> in that, a <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a> that decides a property should do so in finite time i.e. should halt.<br>Decidability and <a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">computability</a><a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">computability</a> differ in that the output of a decidability problem is yes/no<br>Properties<br>A property is decidable iff the <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> of words encoding the objects satisfying the property is <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">recursive</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">recursive</a><br>All nontrivial questions about <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TMs</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TMs</a> are undecidable (<a data-href="Rice's Theorem" href="https://www.jayitha.github.io/Notes/Rice's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rice's Theorem</a><a data-href="Rice's Theorem" href="https://www.jayitha.github.io/Notes/glossary/rice's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rice's Theorem</a>)<br>See Also<br>
<br><a data-href="The Halting Problem" href="https://www.jayitha.github.io/Notes/The Halting Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Halting Problem</a><a data-href="The Halting Problem" href="https://www.jayitha.github.io/Notes/glossary/the-halting-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Halting Problem</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/decidable.html</link><guid isPermaLink="false">Glossary/Decidable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Derived Permutation]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Permutation" data-href="Permutation" href="https://www.jayitha.github.io/Notes/Permutation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">permutation</a><a data-tooltip-position="top" aria-label="Permutation" data-href="Permutation" href="https://www.jayitha.github.io/Notes/glossary/permutation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">permutation</a>  is derived from permutation  by an exchange if the listings corresponding to  and  agree everywhere except at some two adjacent positions  and <br>Properties<br>Given two permutations  and ,  can be <a data-tooltip-position="top" aria-label="Derived Permutation" data-href="Derived Permutation" href="https://www.jayitha.github.io/Notes/Derived Permutation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">derived</a><a data-tooltip-position="top" aria-label="Derived Permutation" data-href="Derived Permutation" href="https://www.jayitha.github.io/Notes/glossary/derived-permutation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">derived</a> from  using a finite sequence of exchanges<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/derived-permutation.html</link><guid isPermaLink="false">Glossary/Derived Permutation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Diameter]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The diameter of a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  is the maximum finite <a data-tooltip-position="top" aria-label="Distance" data-href="Distance" href="https://www.jayitha.github.io/Notes/Distance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">distance</a><a data-tooltip-position="top" aria-label="Distance" data-href="Distance" href="https://www.jayitha.github.io/Notes/glossary/distance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">distance</a> between two nodes in <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/diameter.html</link><guid isPermaLink="false">Glossary/Diameter.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Discrete Probability Law]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
If the sample space consists of a finite number of possible outcomes, then the probability law is specified by the probabilities of the events that consists of a single element. In particular, the probability of any event  is the sum of the probabilities of its elements:<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/discrete-probability-law.html</link><guid isPermaLink="false">Glossary/Discrete Probability Law.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Discrete Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>A discrete random variable is a real-valued function of the outcome of the experiment that can take a finite or countably infinite number of values<br>A discrete random variable as an associated <a data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Mass Function</a><a data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a><br>A function of discrete random variables defines another discrete random variable, whose <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> can be obtained from the PMF of the original random variable]]></description><link>https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html</link><guid isPermaLink="false">Glossary/Discrete Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Discrete Uniform Probability Law]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
If the sample space consists of  possible outcomes which are equally likely (i.e., all single-element events have the same probability), then the probability of any event  is given by<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/discrete-uniform-probability-law.html</link><guid isPermaLink="false">Glossary/Discrete Uniform Probability Law.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Discrete Uniform Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The discrete uniform random variable takes one out of a range of contiguous integer values with equal probability. This random variable is parameterized by the limits of the interval <br><br>The <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Mean</a> and <a data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Variance</a><a data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Variance</a> are<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/discrete-uniform-random-variable.html</link><guid isPermaLink="false">Glossary/Discrete Uniform Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Distance]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The distance between two nodes  in a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a> is the length of the shorted path connecting  to .<br> if  is not <a data-tooltip-position="top" aria-label="Connectedness" data-href="Connectedness" href="https://www.jayitha.github.io/Notes/Connectedness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected</a><a data-tooltip-position="top" aria-label="Connectedness" data-href="Connectedness" href="https://www.jayitha.github.io/Notes/glossary/connectedness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected</a> to <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/distance.html</link><guid isPermaLink="false">Glossary/Distance.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Distinct]]></title><description><![CDATA[ 
 <br>Eliminate duplicates using the {{DISTINCT}} clause]]></description><link>https://www.jayitha.github.io/Notes/glossary/distinct.html</link><guid isPermaLink="false">Glossary/Distinct.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Elementary Functions]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
called elementary functions<br><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/elementary-functions.html</link><guid isPermaLink="false">Glossary/Elementary Functions.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Elementary Languages]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Elementary languages are the set of languages in the <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a> time-bounded by <a data-tooltip-position="top" aria-label="Elementary Functions" data-href="Elementary Functions" href="https://www.jayitha.github.io/Notes/Elementary Functions" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$Hyp$</a><a data-tooltip-position="top" aria-label="Elementary Functions" data-href="Elementary Functions" href="https://www.jayitha.github.io/Notes/glossary/elementary-functions.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> class i.e. <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/elementary-languages.html</link><guid isPermaLink="false">Glossary/Elementary Languages.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Elements of a Probabilistic Model]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The two main ingredients are<br>
<br>Sample Space  - Set of all possible outcomes. Elements of a sample space should be mutually exclusive and collectively exhaustive.
<br><a data-href="Probability Law" href="https://www.jayitha.github.io/Notes/Probability Law" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Law</a><a data-href="Probability Law" href="https://www.jayitha.github.io/Notes/glossary/probability-law.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Law</a>
<br><img alt="Pasted image 20240411154026.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240411154026.png">]]></description><link>https://www.jayitha.github.io/Notes/glossary/elements-of-a-probabilistic-model.html</link><guid isPermaLink="false">Glossary/Elements of a Probabilistic Model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240411154026.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240411154026.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Empirical Risk Minimization]]></title><description><![CDATA[ 
 <br><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
The learner is blind to  and  therefore, one approach is for the learner to minimize training error (also called empirical error or empirical risk)<br>
Generating a predictor that minimizes empirical risk is called Empirical Risk Minimization (ERM)<br><a data-href="Overfitting" href="https://www.jayitha.github.io/Notes/Overfitting" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Overfitting</a><a data-href="Overfitting" href="https://www.jayitha.github.io/Notes/glossary/overfitting.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Overfitting</a> is a risk which can possibly be countered using an <a data-href="Inductive Bias" href="https://www.jayitha.github.io/Notes/Inductive Bias" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Inductive Bias</a><a data-href="Inductive Bias" href="https://www.jayitha.github.io/Notes/glossary/inductive-bias.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Inductive Bias</a><br>
<br>Over which hypothesis classes does ERM not overfit?
<br>The tradeoff is that choosing a more restrictive hypothesis class will protect us from overfitting but it’ll also induce a heavier inductive bias
]]></description><link>https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html</link><guid isPermaLink="false">Glossary/Empirical Risk Minimization.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Equi-Join</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: Theta Equi-Join<br>
Papers: [-]<br>
Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:join-type" class="tag" target="_blank" rel="noopener nofollow">#join-type</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/equi-join.html</link><guid isPermaLink="false">Glossary/Equi-Join.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Equinumerosity]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
Two sets  and  are equinumerous () iff there is a <a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">one-to-one</a><a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">one-to-one</a> <a data-tooltip-position="top" aria-label="Onto Function" data-href="Onto Function" href="https://www.jayitha.github.io/Notes/Onto Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">onto</a><a data-tooltip-position="top" aria-label="Onto Function" data-href="Onto Function" href="https://www.jayitha.github.io/Notes/glossary/onto-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">onto</a> <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a> mapping  onto <br>EXAMPLE<br>
<a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/Natural Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$\N$</a><a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/glossary/natural-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> and <a data-tooltip-position="top" aria-label="Integer Numbers" data-href="Integer Numbers" href="https://www.jayitha.github.io/Notes/Integer Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$\Z$</a><a data-tooltip-position="top" aria-label="Integer Numbers" data-href="Integer Numbers" href="https://www.jayitha.github.io/Notes/glossary/integer-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> are equinumerous<br>Properties<br>Equinumerosity is <a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reflexive</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reflexive</a>, <a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">symmetric</a><a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">symmetric</a> and <a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">transitive</a><a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">transitive</a><br>Two finite sets have the same “size” iff they are equinumerous<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/equinumerosity.html</link><guid isPermaLink="false">Glossary/Equinumerosity.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Equivalence Class]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
Given an <a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">equivalence relation</a><a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">equivalence relation</a>  defined over set , for each element , the equivalence class  of  is <br>Furthermore, for each <br>
<br>Equivalence classes <a data-href="partition" href="https://www.jayitha.github.io/Notes/partition" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partition</a><a data-href="partition" href="https://www.jayitha.github.io/Notes/glossary/partition.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partition</a> set <br>Properties<br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
If  and  are two <a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">equivalence relations</a><a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">equivalence relations</a> over  and  is a <a data-tooltip-position="top" aria-label="Refinement" data-href="Refinement" href="https://www.jayitha.github.io/Notes/Refinement" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">refinement</a><a data-tooltip-position="top" aria-label="Refinement" data-href="Refinement" href="https://www.jayitha.github.io/Notes/glossary/refinement.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">refinement</a> of , then . Furthermore, each equivalence class of  is a disjoint union of one or more equivalence classes of <br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/equivalence-class.html</link><guid isPermaLink="false">Glossary/Equivalence Class.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Equivalence Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a>  is an equivalence relation iff<br>
<br> is a <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a> on set  and
<br> is <a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reflexive</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reflexive</a>, <a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">symmetric</a><a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">symmetric</a> and <a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">transitive</a><a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">transitive</a>
<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html</link><guid isPermaLink="false">Glossary/Equivalence Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Error of a Prediction Rule]]></title><description><![CDATA[ 
 <br> <a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
Error of prediction rule  is the probability of drawing a random instance  according to , such that <br>
If  denotes the probability of generating subset  from distribution <br>
Where  is called the generalization error, the risk or the true error of ]]></description><link>https://www.jayitha.github.io/Notes/glossary/error-of-a-prediction-rule.html</link><guid isPermaLink="false">Glossary/Error of a Prediction Rule.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Excel]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
What is the most popular PL?<br>
?<br>
Microsoft Excel. As of 2023, Excel is Turing-complete.<br>
<br>Find proof for Turing-complete.
]]></description><link>https://www.jayitha.github.io/Notes/glossary/excel.html</link><guid isPermaLink="false">Glossary/Excel.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Expectation]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The expected value (or Expectation or Mean) of a <a data-tooltip-position="top" aria-label="Discrete Random Variable" data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">discrete random variable</a><a data-tooltip-position="top" aria-label="Discrete Random Variable" data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">discrete random variable</a> , with <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a>  is<br>
The Mean can also be viewed as the center of gravity of the <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> associated with the random variable <br>Let  be a random variable constructed as a linear function of random variable . For instance<br>
Where  and  are scalars. Then,<br>
<br>In general, for any random variables  and scalars <br>
You can also define the conditional expectation of  given event  with  or another instantiated random variable <br>
The expectation of a <a data-tooltip-position="top" aria-label="Continuous Random Variable" data-href="Continuous Random Variable" href="https://www.jayitha.github.io/Notes/Continuous Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">continuous random variable</a><a data-tooltip-position="top" aria-label="Continuous Random Variable" data-href="Continuous Random Variable" href="https://www.jayitha.github.io/Notes/glossary/continuous-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">continuous random variable</a>  is defined by<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/expectation.html</link><guid isPermaLink="false">Glossary/Expectation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Expected Value Rule]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Let  be a random variable with <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> . Let  be a function of . Then, the expected value of the random variable  is<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/expected-value-rule.html</link><guid isPermaLink="false">Glossary/Expected Value Rule.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Exponential Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/exponential-random-variable.html</link><guid isPermaLink="false">Glossary/Exponential Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Finite]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A set  is finite iff there is some <a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">one-to-one</a><a data-tooltip-position="top" aria-label="One-to-One Function" data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">one-to-one</a> <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  mapping set  to set  for some <br>
Function  is counting the members of <br>Properties<br>Every finite set is <a data-tooltip-position="top" aria-label="Countable" data-href="Countable" href="https://www.jayitha.github.io/Notes/Countable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">countable</a><a data-tooltip-position="top" aria-label="Countable" data-href="Countable" href="https://www.jayitha.github.io/Notes/glossary/countable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">countable</a><br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/finite.html</link><guid isPermaLink="false">Glossary/Finite.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Finite Hypothesis Classes]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
Let  be a finite hypothesis class. Let  and  and let  be an integer that satisfies<br>
Then, for any labelling function, , and for any distribution, , for which the realizability assumption holds (i.e. for some  ), with probability at least  over the choice of an <a data-tooltip-position="top" aria-label="Independent and Identically Distributed (IID)" data-href="Independent and Identically Distributed (IID)" href="https://www.jayitha.github.io/Notes/Independent and Identically Distributed (IID)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">IID</a><a data-tooltip-position="top" aria-label="Independent and Identically Distributed (IID)" data-href="Independent and Identically Distributed (IID)" href="https://www.jayitha.github.io/Notes/glossary/independent-and-identically-distributed-(iid).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">IID</a> sample  of size , we have that for every <a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ERM</a><a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ERM</a> hypothesis, , it holds that<br>
Where  is usually the probability of getting a non-representative sample making  the confidence parameter and  is the accuracy parameter.<br>
If  is a finite class then <a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ERM</a><a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ERM</a> will not overfit, provided it is based on a sufficiently large training sample (size depends on size of )]]></description><link>https://www.jayitha.github.io/Notes/glossary/finite-hypothesis-classes.html</link><guid isPermaLink="false">Glossary/Finite Hypothesis Classes.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Finite Sequence]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
An <a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/n-Tuple" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-tuple</a><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-tuple</a>  is a finite sequence (or string) of members of a set  iff for some positive integer , we have<br>
where each .<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/finite-sequence.html</link><guid isPermaLink="false">Glossary/Finite Sequence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Finite-State Automata]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A finite-state automata (FSA)  process words by scanning the word and remembering only a bounded amount of information about what has been scanned<br>Formally, an FSA  over <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">alphabet</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">alphabet</a>  is a 5-tuple , where<br>
<br> is a finite set of states
<br> is the transition function
<br> called start state
<br> is accepting states
<br>The <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">accepted</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">accepted</a> by an FSA  is denoted by <br>Properties<br>See Also<br>
<br><a data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Regular Language</a><a data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Regular Language</a>
<br><a data-href="Two-Way Automata" href="https://www.jayitha.github.io/Notes/Two-Way Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Two-Way Automata</a><a data-href="Two-Way Automata" href="https://www.jayitha.github.io/Notes/glossary/two-way-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Two-Way Automata</a>
<br><a data-href="Nondeterministic Finite-State Automata" href="https://www.jayitha.github.io/Notes/Nondeterministic Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Nondeterministic Finite-State Automata</a><a data-href="Nondeterministic Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Nondeterministic Finite-State Automata</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html</link><guid isPermaLink="false">Glossary/Finite-State Automata.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Flatbuffers]]></title><description><![CDATA[ 
 <br><a rel="noopener nofollow" class="external-link" href="https://flatbuffers.dev/flatbuffers_guide_use_rust.html" target="_blank">https://flatbuffers.dev/flatbuffers_guide_use_rust.html</a><br>Flatbuffer protocol definition files - <a rel="noopener nofollow" class="external-link" href="https://github.com/apache/arrow/tree/main/format" target="_blank">https://github.com/apache/arrow/tree/main/format</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/flatbuffers.html</link><guid isPermaLink="false">Glossary/Flatbuffers.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Forest]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A forest is a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a> that consists of a set of <a data-tooltip-position="top" aria-label="Tree" data-href="Tree" href="https://www.jayitha.github.io/Notes/Tree" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">trees</a><a data-tooltip-position="top" aria-label="Tree" data-href="Tree" href="https://www.jayitha.github.io/Notes/glossary/tree.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">trees</a><br>Properties<br>Given a forest, the removal of one edge increases the number of <a data-tooltip-position="top" aria-label="Connected Component" data-href="Connected Component" href="https://www.jayitha.github.io/Notes/Connected Component" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected components</a><a data-tooltip-position="top" aria-label="Connected Component" data-href="Connected Component" href="https://www.jayitha.github.io/Notes/glossary/connected-component.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected components</a> by exactly one<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/forest.html</link><guid isPermaLink="false">Glossary/Forest.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Fridge Installation Instructions]]></title><description><![CDATA[ 
 <br>
<br>Allow the appliance to stand for 2 hours before loading food after installation and turning on
<br>Apparently you shouldn’t fill the ice tray with tea or other drinks except water it might damage the refrigerator
<br>Shouldn’t use any fuse like copper, steel wire etc apart from standard fuse
<br>Do not refreeze frozen foods that have thawed completely?
<br>Do not put fizzy drinks in the freezer
<br>Do not put bottles or glass in the freezer
<br>Don’t place food too close to the vents at the rear of the refrigerator as this can obstruct free air circulation in the refrigerator compartment
<br>Do not block air vents in the refrigerator
<br>Wait at least 5 mins between disconnecting and reconnecting the refrigerator (switching on and off)
<br>The lamp in the freezer and fridge can be turned off if the doors are left open 2 seconds or longer
<br>Don’t keep vegetable oil in door bins. leaked oil can cause door bin to crack
<br>Don’t store fresh fruits and vegetables in the chill compartment which “goes bad easily at low temperatures”
<br>Don’t spray water directly on the fridge. When wiping use a wet cloth
<br>Do not spray any cleaning liquid on display, letters may come off
<br>Clean powerplug only with a dry cloth
<br>Don’t (cold) clean glass shelves with warm water. They’ll crack
<br>You have to remove all plastic wrapping before using the refrigerator
<br>Temperature of the two star ** section is higher than others
<br>Things we might get:<br>
Cool pack<br>
Ice tray<br>
Twist Ice Maker<br>
<br>Fridge has a load limit indicator on the top right side of the freezer compartment. Don’t put food items over the load limit indicator. Otherwise, energy efficiency may be affected
<br>The fridge is designed to operate in temperature range specified by its class rating
<br><br>
<br>So what’s our temperature range?
<br>Cooling performance and power consumption affected by ambient temperature. You might have to adjust the temperature settings appropriately<br>
To protect the floor, you can place a large piece of cardboard on each leg<br>
To adjust height, turn the levelling feet clockwise to lower and counter clockwise to raise<br>
For safety, adjust the front side a little higher than the rear side<br>
When moving the refrigerator, first raise using the levelling feet<br>
Do not use a stand<br>Installation<br>
<br>Plug the power cord into wall socket and turn the fridge on
<br>Open door and check if interior light lights up
<br>Set temperature to the coldest, and wait an hour. The freezer will be slightly chilled and the motor will run smoothly
<br>Wait until refrigerator reaches the set temperature
<br>Now it is ready to use
<br>Check<br>
<br>Plugged in
<br>On a flat surface with good clearance from floor and wall
<br>Level and doesn’t wobble
<br>Door opens and closes freely
<br>Interior light turns on automatically when door is open
<br>
<br>Use freezer button to toggle freezer temperature - -23 → -15 → -17 → -19 → -21 → -32
<br>In summers (&gt; 35), don’t use - 15
<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/fridge-installation-instructions.html</link><guid isPermaLink="false">Glossary/Fridge Installation Instructions.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Full Disjunction]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
A join-operator variant that maximally combines join consistent tuples from connected relations, while preserving all information in the relations. Two tuples from two different relations are join consistent if they agree on common attributes]]></description><link>https://www.jayitha.github.io/Notes/glossary/full-disjunction.html</link><guid isPermaLink="false">Glossary/Full Disjunction.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Function]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A function is a <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a>  with the property of being single-valued i.e. for each  in <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$dom$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> , there is only one  (denoted by ) such that <br>We usually say  ( maps  to ) where<br>
<br><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$dom$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> and
<br><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$ran$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br>Properties<br>See Also<br>
<br><a data-href="Partial Function" href="https://www.jayitha.github.io/Notes/Partial Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Partial Function</a><a data-href="Partial Function" href="https://www.jayitha.github.io/Notes/glossary/partial-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Partial Function</a>
<br><a data-href="Onto Function" href="https://www.jayitha.github.io/Notes/Onto Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Onto Function</a><a data-href="Onto Function" href="https://www.jayitha.github.io/Notes/glossary/onto-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Onto Function</a>
<br><a data-href="Restriction" href="https://www.jayitha.github.io/Notes/Restriction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Restriction</a><a data-href="Restriction" href="https://www.jayitha.github.io/Notes/glossary/restriction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Restriction</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/function.html</link><guid isPermaLink="false">Glossary/Function.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Functions of Database System]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Primary functionalities include<br>
<br>Secondary Storage Management - Data is usually too big to fit into the main memory. Involves indexing, clustering and resource allocation
<br><a data-tooltip-position="top" aria-label="Persistence > ^ea8932" data-href="Persistence#^ea8932" href="https://www.jayitha.github.io/Notes/Persistence#^ea8932" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Persistence</a><a data-tooltip-position="top" aria-label="Persistence > ^ea8932" data-href="Persistence#^ea8932" href="https://www.jayitha.github.io/Notes/glossary/persistence.html#^ea8932" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Persistence</a>
<br>Concurrency Control - transactions and serializability
<br>Data Protection - integrity checking mechanisms, recovery and backup protocols and security control
<br>Human-machine Interface - <a data-tooltip-position="top" aria-label="Abbreviations > ^DDL" data-href="Abbreviations#^DDL" href="https://www.jayitha.github.io/Notes/Abbreviations#^DDL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DDLs</a><a data-tooltip-position="top" aria-label="Abbreviations > ^DDL" data-href="Abbreviations#^DDL" href="https://www.jayitha.github.io/Notes/abbreviations.html#^DDL" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DDLs</a> and <a data-tooltip-position="top" aria-label="Abbreviations > ^DML" data-href="Abbreviations#^DML" href="https://www.jayitha.github.io/Notes/Abbreviations#^DML" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DMLs</a><a data-tooltip-position="top" aria-label="Abbreviations > ^DML" data-href="Abbreviations#^DML" href="https://www.jayitha.github.io/Notes/abbreviations.html#^DML" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DMLs</a>
<br>Distribution
<br>Compilation and Optimization
<br>A <a data-tooltip-position="top" aria-label="Database System" data-href="Database System" href="https://www.jayitha.github.io/Notes/Database System" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DBMS</a><a data-tooltip-position="top" aria-label="Database System" data-href="Database System" href="https://www.jayitha.github.io/Notes/glossary/database-system.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DBMS</a> must also deal with complexity and diversity in the type of applications being built on them, the kind of users using them, access models, logical models and hosting platforms.<br>An added factor is longevity - being able to use a database employed over a decade ago<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/functions-of-database-system.html</link><guid isPermaLink="false">Glossary/Functions of Database System.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Geometric Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
In independent <a data-href="Bernoulli Trials" href="https://www.jayitha.github.io/Notes/Bernoulli Trials" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bernoulli Trials</a><a data-href="Bernoulli Trials" href="https://www.jayitha.github.io/Notes/glossary/bernoulli-trials.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bernoulli Trials</a> with probability of success of each trial  (and failure ), we model the number of trials needed to observe the first success as a Geometric random variable parameterized by the probability of success .<br><br>its <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> is<br>
You can prove that the sum of all probabilities of values of the PMF is  using the formula for the <a data-href="Sum of Infinite Geometric Sequence" href="https://www.jayitha.github.io/Notes/Sum of Infinite Geometric Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Sum of Infinite Geometric Sequence</a><a data-href="Sum of Infinite Geometric Sequence" href="https://www.jayitha.github.io/Notes/glossary/sum-of-infinite-geometric-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Sum of Infinite Geometric Sequence</a><br>The <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mean</a>, 2nd <a data-tooltip-position="top" aria-label="Moments" data-href="Moments" href="https://www.jayitha.github.io/Notes/Moments" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">moment</a><a data-tooltip-position="top" aria-label="Moments" data-href="Moments" href="https://www.jayitha.github.io/Notes/glossary/moments.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">moment</a> and <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">variance</a><a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">variance</a> are<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/geometric-random-variable.html</link><guid isPermaLink="false">Glossary/Geometric Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Glossary]]></title><description><![CDATA[ 
 <br><br>: <br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>: <br><br>: <br><br><br><br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br>: <br><br><br>: <br><br>: <br><br><br><br><br><br><br><br><br><br><br>: <br><br>: <br><br>: <br><br><br><br><br><br><br>: <br><br><br><br><br><br><br>: <br><br><br><br>: <br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>: <br><br><br><br><br><br>: <br><br><br><br><br>: <br><br><br>: <br><br>: <br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/glossary.html</link><guid isPermaLink="false">Glossary/Glossary.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Graph]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A graph is a finite set  together with a collection  of subsets of , such that<br>
<br>If , then 
<br>For all , 
<br>If  and , then <br>
 denotes the entire graph
<br><br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A graph is a pair , where  is a finite set of vertices and  i.e.  is a <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a> over the set of vertices <br>In some cases, the graph is presented as just a set of edges where the vertices can be extrapolated from the set of edges]]></description><link>https://www.jayitha.github.io/Notes/glossary/graph.html</link><guid isPermaLink="false">Glossary/Graph.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Hierarchical Model]]></title><description><![CDATA[ 
 <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/hierarchical-model.html</link><guid isPermaLink="false">Glossary/Hierarchical Model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Homomorphism]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Let  and  be two <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graphs</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graphs</a>. A function  is a homomorphism from  to  if for each pair , <br>Properties<br>Homomorphism extends naturally to other data and algebraic structures like <a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relations</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relations</a><br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/homomorphism.html</link><guid isPermaLink="false">Glossary/Homomorphism.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Identity Function]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
The identity function on a set  is a special <a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/n-ary Operation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">unary operation</a><a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-operation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">unary operation</a> <br>
as a <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a><br>
<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/identity-function.html</link><guid isPermaLink="false">Glossary/Identity Function.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">iMinMax</span></span>(<span class="math math-inline is-loaded"><mjx-container class="MathJax" jax="CHTML"><mjx-math class="MJX-TEX"><mjx-mi class="mjx-i"><mjx-c class="mjx-c1D703 TEX-I"></mjx-c></mjx-mi></mjx-math></mjx-container></span>)]]></title><description><![CDATA[ 
 <br><br>Aliases: <br>
Papers: [<a data-href="ooi2000indexing" href="https://www.jayitha.github.io/Notes/ooi2000indexing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ooi2000indexing</a><a data-href="ooi2000indexing" href="https://www.jayitha.github.io/Notes/literature-notes/ooi2000indexing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ooi2000indexing</a>]<br>
Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:indexing" class="tag" target="_blank" rel="noopener nofollow">#indexing</a><br><a data-href="ooi2000indexing" href="https://www.jayitha.github.io/Notes/ooi2000indexing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ooi2000indexing</a><a data-href="ooi2000indexing" href="https://www.jayitha.github.io/Notes/literature-notes/ooi2000indexing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ooi2000indexing</a><br>
<br>Maps points in high dimensional spaces to single dimension values determined by their maximum or minimum values amongst all their dimensions
<br> is a tunable parameter that can be adapted for different data distributions
<br>iMinMax has three notable features<br>
<br>Adopts a simple transformation function from high dimensions to single dimension. Let  and  be the minimum and maximum value of a point  across all dimensions ( and  resp.). The mapping is given as follows<br>
This transformation partitions the data based on the dimension which has the largest or smallest value. 
<br>The single dimension values can be then indexed using a B+-Tree index and hence the iMinMax index can be used on top of existing DBMS
<br>The range query needs to be transformed. The transformation involves generating a range query on each dimension. The intersection of all range query answers is a superset of the required solution set. This is supposedly still efficient because

<br>The produced candidate set cannot be further pruned without losing out critical candidates
<br>The search space is reduced and 
<br>some range subqueries can be pruned without being evaluated


<br>By varying , you end up constructing different families of iMinMax index structures. At extremes, you map all data points to their maximum (minimum) value. At other values of , you partition data points based on the dimensions which has max/min values
<br>Unlike the <a data-href="Pyramid Technique" href="https://www.jayitha.github.io/Notes/Pyramid Technique" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pyramid Technique</a><a data-href="Pyramid Technique" href="https://www.jayitha.github.io/Notes/glossary/pyramid-technique.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pyramid Technique</a>, this index performs well on skewed distributions as well. <br>The value of  and  varies between 0-&gt;1. Therefore, the elements that get indexed using the first dimension usually range between , the elements that get ranged in the second dimension range between  and so on.<br>Lets say you have a range query  with th query subrange , the subquery  is given by<br><br>
<br>
<br>I'd love to test this indexing structure to see how it behaves. In high dimensions where NN is meaningless, does the iMinMax indexing improve upon simple scanning? What would the evaluation metrics look like?<br>
<br>Number of tuples accessed?
<br>Collisions?
<br>Is the added space overhead worth it?
<br>Point query vs Range query
<br>Selectivity of the range query
<br>From the Database Encyclopedia, approaches to handle high dimensional indexing include<br>
<br>Dimensionality reduction
<br>Data compression
<br>Optimized I/O schedules (page size optimization and fast index scan)
<br>Hierarchy flattening
<br>Optimizing the shape of page regions
<br>Clustering
]]></description><link>https://www.jayitha.github.io/Notes/glossary/iminmax.html</link><guid isPermaLink="false">Glossary/iMinMax.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Inclusion-Exclusion Formula]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Let  and  be two events, then<br>
<br>Let  be another events<br>
<br>In general, let  be events. Let ,  and more generally, let  be the set of all -tuples  of indices that satisfy . Then<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/inclusion-exclusion-formula.html</link><guid isPermaLink="false">Glossary/Inclusion-Exclusion Formula.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Independence]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
 is independent of  if the occurrence of  provides no information and does not alter the probability that  has occurred<br>
Equivalently<br>
<br>We say that events  are independent if, for every subset  of <br>
Pairwise independence does not imply independence, and<br>
does not imply pairwise independence and consequently, independence. <br>You can also define independence of a random variable  of an event  if<br>
In other words, if ,  and  are independent if<br>
Similarly,  is independent of another random variable  if<br>
in other words,<br>
<br><br>Let  and  be two independent random variables, then:<br>
<br>any functions of  and  () are independent as well
<br>
<br>Or, more generally, for any functions  and <br>

<br>. Generally, if  are independent random variables, then<br>

]]></description><link>https://www.jayitha.github.io/Notes/glossary/independence.html</link><guid isPermaLink="false">Glossary/Independence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Independent and Identically Distributed (IID)]]></title><description><![CDATA[ 
 <br><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
A sample  of size  is said to be independently and identically distributed according to a distribution  i.e.  denotes the probability of -tuples induced by applying  to each tuple independently (and identically).]]></description><link>https://www.jayitha.github.io/Notes/glossary/independent-and-identically-distributed-(iid).html</link><guid isPermaLink="false">Glossary/Independent and Identically Distributed (IID).md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Independent Trials]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
If an experiment involves a sequence of independent but identical stages, we say that we have a sequence of independent trials.]]></description><link>https://www.jayitha.github.io/Notes/glossary/independent-trials.html</link><guid isPermaLink="false">Glossary/Independent Trials.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Index-Only Plans]]></title><description><![CDATA[ 
 <br>The database can satisfy queries with just the indices without having to access actual data pages<br>Adv<br>
<br>Reduce I/O
<br>Improve performance
<br>Lower resource (memory and CPU) utilization
<br>Cons<br>
<br>All query-columns need to be covered by an index
<br>Maintaining indices with updates is an overhead
]]></description><link>https://www.jayitha.github.io/Notes/glossary/index-only-plans.html</link><guid isPermaLink="false">Glossary/Index-Only Plans.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Inductive Bias]]></title><description><![CDATA[ 
 <br><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
To counter <a data-href="Overfitting" href="https://www.jayitha.github.io/Notes/Overfitting" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Overfitting</a><a data-href="Overfitting" href="https://www.jayitha.github.io/Notes/glossary/overfitting.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Overfitting</a> with the <a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ERM</a><a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ERM</a> paradigm, you could reduce the search space to a hypothesis class (). Each function in the hypothesis class  maps  to . Therefore, the <a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ERM</a><a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ERM</a> learner () picks the function that minimizes empirical loss.<br>
By restricting the learner to choosing a predictor from  we bias the learner towards a predefined set of predictors. This biasing is inductive since the class  was chosen prior to interacting with the training data. ]]></description><link>https://www.jayitha.github.io/Notes/glossary/inductive-bias.html</link><guid isPermaLink="false">Glossary/Inductive Bias.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Integer Numbers]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
The set of integers <br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/integer-numbers.html</link><guid isPermaLink="false">Glossary/Integer Numbers.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Isolated Vertex]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A vertex in a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a> is isolated is it does not belong to any edge]]></description><link>https://www.jayitha.github.io/Notes/glossary/isolated-vertex.html</link><guid isPermaLink="false">Glossary/Isolated Vertex.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Isomorphism]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Homomorphism" data-href="Homomorphism" href="https://www.jayitha.github.io/Notes/Homomorphism" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">homomorphism</a><a data-tooltip-position="top" aria-label="Homomorphism" data-href="Homomorphism" href="https://www.jayitha.github.io/Notes/glossary/homomorphism.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">homomorphism</a>  from <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  to  is an isomorphism if  is a one-one onto mapping from  to  and  is a homomorphism from  to <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/isomorphism.html</link><guid isPermaLink="false">Glossary/Isomorphism.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Join Types]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
<img alt="Pasted image 20240323115112.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240323115112.png"><br>
Starting from top left, going the "U" and then the center<br>LEFT OUTER JOIN
LEFT ANTI JOIN
FULL OUTER JOIN
FULL ANTI JOIN
RIGHT ANTI JOIN
RIGHT OUTER JOIN
INNER JOIN; If only A or B - SEMI JOIN (ANTI-ANTI-JOINS)
]]></description><link>https://www.jayitha.github.io/Notes/glossary/join-types.html</link><guid isPermaLink="false">Glossary/Join Types.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240323115112.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240323115112.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Kleene's Theorem]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a>  is <a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">regular</a><a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">regular</a> iff it can be specified by a <a data-tooltip-position="top" aria-label="Regular Expression" data-href="Regular Expression" href="https://www.jayitha.github.io/Notes/Regular Expression" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">regular expression</a><a data-tooltip-position="top" aria-label="Regular Expression" data-href="Regular Expression" href="https://www.jayitha.github.io/Notes/glossary/regular-expression.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">regular expression</a><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/kleene&apos;s-theorem.html</link><guid isPermaLink="false">Glossary/Kleene&apos;s Theorem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Labeled Chromatic Graph (LCG)]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  that has both a <a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">coloring</a><a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">coloring</a>  and a <a data-tooltip-position="top" aria-label="Labeling" data-href="Labeling" href="https://www.jayitha.github.io/Notes/Labeling" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">labeling</a><a data-tooltip-position="top" aria-label="Labeling" data-href="Labeling" href="https://www.jayitha.github.io/Notes/glossary/labeling.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">labeling</a>  is a labelled chromatic graph. In distributed computing, we denote the coloring  by  and the label  by <br>Typically,  denotes the process and  denotes the processes local view]]></description><link>https://www.jayitha.github.io/Notes/glossary/labeled-chromatic-graph-(lcg).html</link><guid isPermaLink="false">Glossary/Labeled Chromatic Graph (LCG).md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Labeling]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Given a set , an L-labeling of  is defined as a function  that assigns to each vertex an element of  without any condition imposed on the edges<br>Therefore, a <a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">coloring</a><a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">coloring</a> is a labeling but not vice versa.<br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
This book uses notation  for the labelling function: Given <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  and label set <br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/labeling.html</link><guid isPermaLink="false">Glossary/Labeling.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Language]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Given a finite set  of alphabets,<br>
<br>A word over  is a finite sequence  where  and the length of the word (denoted by ) is 
<br>The empty word is denoted by 
<br>The set of all words over  is denoted by 
<br>A language over  is a subset of 
<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/language.html</link><guid isPermaLink="false">Glossary/Language.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Locality Sensitive Hashing</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: LSH<br>
Papers: [<a data-href="slaney2008locality" href="https://www.jayitha.github.io/Notes/slaney2008locality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">slaney2008locality</a><a data-href="slaney2008locality" href="https://www.jayitha.github.io/Notes/literature-notes/slaney2008locality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">slaney2008locality</a>]<br>
Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:indexing" class="tag" target="_blank" rel="noopener nofollow">#indexing</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/locality-sensitive-hashing.html</link><guid isPermaLink="false">Glossary/Locality Sensitive Hashing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Log Space Complexity Class]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A special <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a> with logarithmic space bound. However, input takes more than logarithmic space, a separation of the input tape (a read-only tape) and the tape used for computation is made.<br>This class consists of those <a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">regular languages</a><a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">regular languages</a>  that are accepted by <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a> using on input  on amount of worktape bounded by  for some constant <br>Denoted by <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/log-space-complexity-class.html</link><guid isPermaLink="false">Glossary/Log Space Complexity Class.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Logical Model]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A logical model is an abstract model of the data that specifies the structure of the stored data and for manipulating said data. The logical model usually represents the data resembling the vision modeled by the data more than the physical representation.<br>The logical model involves a <a data-tooltip-position="top" aria-label="Abbreviations > ^DDL" data-href="Abbreviations#^DDL" href="https://www.jayitha.github.io/Notes/Abbreviations#^DDL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DDL</a><a data-tooltip-position="top" aria-label="Abbreviations > ^DDL" data-href="Abbreviations#^DDL" href="https://www.jayitha.github.io/Notes/abbreviations.html#^DDL" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DDL</a> for specifying the structural aspects of data and a <a data-tooltip-position="top" aria-label="Abbreviations > ^DML" data-href="Abbreviations#^DML" href="https://www.jayitha.github.io/Notes/Abbreviations#^DML" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DML</a><a data-tooltip-position="top" aria-label="Abbreviations > ^DML" data-href="Abbreviations#^DML" href="https://www.jayitha.github.io/Notes/abbreviations.html#^DML" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DML</a> for accessing and updating data. <br>Some examples of logical data models include - <a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/Hierarchical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hierarchical</a><a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/glossary/hierarchical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hierarchical</a>, <a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/Network Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">network</a><a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/glossary/network-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">network</a>, <a data-tooltip-position="top" aria-label="Relational Model" data-href="Relational Model" href="https://www.jayitha.github.io/Notes/Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relational</a><a data-tooltip-position="top" aria-label="Relational Model" data-href="Relational Model" href="https://www.jayitha.github.io/Notes/glossary/relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relational</a> and object oriented]]></description><link>https://www.jayitha.github.io/Notes/glossary/logical-model.html</link><guid isPermaLink="false">Glossary/Logical Model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Maclaurin Series]]></title><description><![CDATA[ 
 <br>The specific case of the <a data-tooltip-position="top" aria-label="Taylor Series" data-href="Taylor Series" href="https://www.jayitha.github.io/Notes/Taylor Series" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Taylor Series Expansion</a><a data-tooltip-position="top" aria-label="Taylor Series" data-href="Taylor Series" href="https://www.jayitha.github.io/Notes/glossary/taylor-series.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Taylor Series Expansion</a> when <br><br>When , the expansion is<br>
When , the expansion is<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/maclaurin-series.html</link><guid isPermaLink="false">Glossary/Maclaurin Series.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Math Properties]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/glossary/math-properties.html</link><guid isPermaLink="false">Glossary/Math Properties.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Matrix Chain Multiplication]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
What is the optimal sequence to multiply matrices to minimize computation cost? Intuition is that we want all intermediate matrices to be small<br>
All possible ways to parenthesize: Catalan Number<br>
via Dynamic Programming: <br>
Best known: ]]></description><link>https://www.jayitha.github.io/Notes/glossary/matrix-chain-multiplication.html</link><guid isPermaLink="false">Glossary/Matrix Chain Multiplication.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Moments]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The 2nd moment of a random variable  is defined as the <a data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Expectation</a><a data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Expectation</a> of the random variable  ()<br>Generally, the nth moment is defined as  i.e. the expectation of the random variable <br>Therefore, the 1st moment is the <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Mean</a><br>You can compute the nth moment of a <a data-tooltip-position="top" aria-label="Discrete Random Variable" data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">discrete random variable</a><a data-tooltip-position="top" aria-label="Discrete Random Variable" data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">discrete random variable</a> using the <a data-href="Expected Value Rule" href="https://www.jayitha.github.io/Notes/Expected Value Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Expected Value Rule</a><a data-href="Expected Value Rule" href="https://www.jayitha.github.io/Notes/glossary/expected-value-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Expected Value Rule</a><br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/moments.html</link><guid isPermaLink="false">Glossary/Moments.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Monotone Queries]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
A query  is monotone if whenever tuples are added to the input/base relations, the size of the output relation cannot decrease<br>
Conjunctive SQL queries like SELECT-FROM-WHERE are monotone i.e. if tuples are added to the input relations, the output relation size can never get smaller<br>(<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a>) All unnested queries are {{monotone}}<br>(<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a>) Queries with {{universal quantifier}} are not monotone<br>(<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a>) We cannot unnest a query with a {{universal quantifier}}]]></description><link>https://www.jayitha.github.io/Notes/glossary/monotone-queries.html</link><guid isPermaLink="false">Glossary/Monotone Queries.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Multiplication Rule]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Assuming that all of the conditioning events have positive probability, we have<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/multiplication-rule.html</link><guid isPermaLink="false">Glossary/Multiplication Rule.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[n-ary Operation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a> that maps an <a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-ary relation</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary relation</a>  into  is called an n-ary operation on set <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/n-ary-operation.html</link><guid isPermaLink="false">Glossary/n-ary Operation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[n-ary Relation]]></title><description><![CDATA[ 
 <br>Similar to <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relations</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relations</a>, an -ary relation  is defined over  sets   as a subset of the cross product <br>
<br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
An n-ary relation over a (finite or infinite) set  is a subset  of <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
An n-ary relation can also be defined as a set of <a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/n-Tuple" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-tuple</a><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-tuple</a> <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequences</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequences</a> over set <br>Special cases on -ary relations include: <a data-tooltip-position="top" aria-label="Unary Relation" data-href="Unary Relation" href="https://www.jayitha.github.io/Notes/Unary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unary</a><a data-tooltip-position="top" aria-label="Unary Relation" data-href="Unary Relation" href="https://www.jayitha.github.io/Notes/glossary/unary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unary</a> and <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binary</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binary</a> relations<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html</link><guid isPermaLink="false">Glossary/n-ary Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[n-Tuple]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
An n-tuple is an extension of <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pairs</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pairs</a> to include  objects. It’s defined recursively<br>
<br>Properties<br>L1. Every -tuple is an <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pair</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pair</a><br>
<br>L2. If , then <a data-footref="[inline0" href="https://www.jayitha.github.io/Notes/about:blank#fn-1-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a><br>
<br>L3. If , then <a data-footref="[inline1" href="https://www.jayitha.github.io/Notes/about:blank#fn-2-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a><br>
<br>C1. If , both n-tuples are <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequences</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequences</a> of set  and no member  or  is a <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequence</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequence</a> of other elements in  then  and <br>
<br>See Also<br>
<br><a data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Finite Sequence</a><a data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Finite Sequence</a>
<br>
<br>
<br>Can be shown using induction on <a href="https://www.jayitha.github.io/Notes/about:blank#fnref-1-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>Can be shown using induction on , <a data-tooltip-position="top" aria-label="n-Tuple > ^lemma2" data-href="n-Tuple#^lemma2" href="https://www.jayitha.github.io/Notes/n-Tuple#^lemma2" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">L2</a><a data-tooltip-position="top" aria-label="n-Tuple > ^lemma2" data-href="n-Tuple#^lemma2" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html#^lemma2" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">L2</a> and <a data-tooltip-position="top" aria-label="n-Tuple > ^lemma1" data-href="n-Tuple#^lemma1" href="https://www.jayitha.github.io/Notes/n-Tuple#^lemma1" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">L1</a><a data-tooltip-position="top" aria-label="n-Tuple > ^lemma1" data-href="n-Tuple#^lemma1" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html#^lemma1" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">L1</a><a href="https://www.jayitha.github.io/Notes/about:blank#fnref-2-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/n-tuple.html</link><guid isPermaLink="false">Glossary/n-Tuple.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Natural Numbers]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>The set of natural numbers <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/natural-numbers.html</link><guid isPermaLink="false">Glossary/Natural Numbers.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Nested Queries]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
SQL is compositional i.e. you can use subqueries. Input and outputs are relations (multisets). Subqueries can be correlated.<br>
Subqueries can be used in any of the following clauses: SELECT, FROM (called derived tables), WHERE (for instance, using IN, ANY, ALL) and HAVING]]></description><link>https://www.jayitha.github.io/Notes/glossary/nested-queries.html</link><guid isPermaLink="false">Glossary/Nested Queries.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Network Model]]></title><description><![CDATA[ 
 <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/network-model.html</link><guid isPermaLink="false">Glossary/Network Model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Nondeterministic Finite-State Automata]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A variant of the <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a> that allows for several possible next states in a given move. A word is <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">accepted</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">accepted</a> if there is at least one computation that ends in an accepting state<br>Does not change the <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptance</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptance</a> power of FSA<br>Properties<br>The number of states in the equivalent <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a> may be exponential in the number of states in the nondeterministic version. (more succinct specification of <a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">regular languages</a><a data-tooltip-position="top" aria-label="Regular Language" data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">regular languages</a>)<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/nondeterministic-finite-state-automata.html</link><guid isPermaLink="false">Glossary/Nondeterministic Finite-State Automata.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Nondeterministic Polynomial Space Complexity Class]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A nondeterministic <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a> with space bounded by the Poly class of functions.<br>Denoted by <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-space-complexity-class.html</link><guid isPermaLink="false">Glossary/Nondeterministic Polynomial Space Complexity Class.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Nondeterministic Polynomial Time Complexity Class]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The nondeterministic <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a> time-bounded by Poly function class<br>Denoted by <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-time-complexity-class.html</link><guid isPermaLink="false">Glossary/Nondeterministic Polynomial Time Complexity Class.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Nondeterministic Turing Machine]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Similar to <a data-tooltip-position="top" aria-label="Nondeterministic Finite-State Automata" data-href="Nondeterministic Finite-State Automata" href="https://www.jayitha.github.io/Notes/Nondeterministic Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">NFSA</a><a data-tooltip-position="top" aria-label="Nondeterministic Finite-State Automata" data-href="Nondeterministic Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">NFSA</a>, the nondeterministic <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a> can have several possible computations on a given input. A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">word</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">word</a>  is <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">accepted</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">accepted</a> by an NTM  is atleast one computation of  on  halts in an accepting state<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/nondeterministic-turing-machine.html</link><guid isPermaLink="false">Glossary/Nondeterministic Turing Machine.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Normalization Property]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The probability over the whole sample space should sum to <br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/normalization-property.html</link><guid isPermaLink="false">Glossary/Normalization Property.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Null]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
NULL in SQL either implies that the value is missing i.e. exists but unknown or that it cannot be used yet<br>In SQL, there are 3 (not 2) boolean values: TRUE, FALSE and UNKNOWN. Furthermore, arithmetic operations produce NULL on NULL values whereas aggregate operations ignore NULL values<br>
<br>Apparently a lot of research on NULLs
]]></description><link>https://www.jayitha.github.io/Notes/glossary/null.html</link><guid isPermaLink="false">Glossary/Null.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[One-to-One Function]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  is one-to-one iff for each <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$ran$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>, there is only one  such that <br>Properties<br>See Also<br>
<br><a data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Function</a><a data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Function</a>
<br><a data-href="Onto Function" href="https://www.jayitha.github.io/Notes/Onto Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Onto Function</a><a data-href="Onto Function" href="https://www.jayitha.github.io/Notes/glossary/onto-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Onto Function</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html</link><guid isPermaLink="false">Glossary/One-to-One Function.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Onto Function]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  is onto iff <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$ran$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a><br>Properties<br>See Also<br>
<br><a data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Function</a><a data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Function</a>
<br><a data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">One-to-One Function</a><a data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">One-to-One Function</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/onto-function.html</link><guid isPermaLink="false">Glossary/Onto Function.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Ordered Pair]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
The ordered pair  of objects  and  must be defined in any way such that<br>
<br>The standard definition is<br>
<br>A natural extension for ordered triples is<br>
We also define singleton ordered pairs <br>Properties<br>See Also<br>
<br><a data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relation</a><a data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relation</a>
<br><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/n-Tuple" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-tuple</a><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-tuple</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/ordered-pair.html</link><guid isPermaLink="false">Glossary/Ordered Pair.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Ordering Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a>  defined on a set  is an ordering relation if it allows for comparing elements of set . Ordering relations typically satisfy properties like <a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Transitivity</a><a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Transitivity</a> and <a data-href="Trichotomy" href="https://www.jayitha.github.io/Notes/Trichotomy" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Trichotomy</a><a data-href="Trichotomy" href="https://www.jayitha.github.io/Notes/glossary/trichotomy.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Trichotomy</a><br>There are two types of ordering relations: <a data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Partial Order</a><a data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Partial Order</a> and <a data-href="Total Order" href="https://www.jayitha.github.io/Notes/Total Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Order</a><a data-href="Total Order" href="https://www.jayitha.github.io/Notes/glossary/total-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Order</a>.<br>When unspecified, an ordering relation usually refers to a total order.<br>
<br>Should ordering relations be <a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reflexive</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reflexive</a>? 
<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/ordering-relation.html</link><guid isPermaLink="false">Glossary/Ordering Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Overfitting]]></title><description><![CDATA[ 
 <br><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
Overfitting occurs when your hypothesis fits the training data too well, performing poorly on the test data i.e. low empirical error but high generalization error.<br>A classic example of overfitting using the <a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ERM</a><a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ERM</a> paradigm is if you decide on a model that remembers all the sample labels. In this case, the empirical loss is , however, the true error is unbounded. ]]></description><link>https://www.jayitha.github.io/Notes/glossary/overfitting.html</link><guid isPermaLink="false">Glossary/Overfitting.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[P-Closure]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
If  is a <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a> over , and  is a set of properties of binary relations, then the -Closure of  is the smallest binary relation  such that  and  satisfies all the properties in  (if a unique binary relation with these specifications exists)<br>Closures can usually be constructed using a recursive procedure<br>Properties<br>For any binary relation , the <a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reflexive</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reflexive</a>, <a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">symmetric</a><a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">symmetric</a>, and <a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">transitive</a><a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">transitive</a> closure exists and is an <a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">equivalence relation</a><a data-tooltip-position="top" aria-label="Equivalence Relation" data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">equivalence relation</a><br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/p-closure.html</link><guid isPermaLink="false">Glossary/P-Closure.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Pairwise Disjoint]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A collection of sets (a set of sets)  is pairwise disjoint iff any two members of the collection are disjoint i.e. their intersection is <a data-tooltip-position="top" aria-label="Notation > $ varnothing$" data-href="Notation#$ varnothing$" href="https://www.jayitha.github.io/Notes/Notation#$ varnothing$" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$\varnothing$</a><a data-tooltip-position="top" aria-label="Notation > $ varnothing$" data-href="Notation#$ varnothing$" href="https://www.jayitha.github.io/Notes/notation.html#$_varnothing$" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a><br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/pairwise-disjoint.html</link><guid isPermaLink="false">Glossary/Pairwise Disjoint.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Partial Function]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  is a partial function if  is defined for a subset of  i.e. the domain of  is a subset of <br>
<br>Partial functions are NOT <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">functions</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">functions</a>. Partial function  is not defined for every element of the input mapping.
<br>Properties<br>See Also<br>
<br><a data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Function</a><a data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Function</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/partial-function.html</link><guid isPermaLink="false">Glossary/Partial Function.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Partial Order]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A partial order of  is an <a data-tooltip-position="top" aria-label="Ordering Relation" data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/Ordering Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordering relation</a><a data-tooltip-position="top" aria-label="Ordering Relation" data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/glossary/ordering-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordering relation</a>  over  that is<br>
<br><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reflexive</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reflexive</a>,
<br><a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">antisymmetric</a><a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">antisymmetric</a>, and
<br><a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">transitive</a><a data-tooltip-position="top" aria-label="Transitive Relation" data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">transitive</a>.
<br>The ordered pair  is a partially ordered set (poset).<br>A partial order allows for comparing some elements of <br>Properties<br>See Also<br>
<br><a data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/Ordering Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Ordering Relation</a><a data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/glossary/ordering-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Ordering Relation</a>
<br><a data-href="Total Order" href="https://www.jayitha.github.io/Notes/Total Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Order</a><a data-href="Total Order" href="https://www.jayitha.github.io/Notes/glossary/total-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Order</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/partial-order.html</link><guid isPermaLink="false">Glossary/Partial Order.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Partition]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A partition of a nonempty set  is a family of sets  such that<br>
<br>
<br>
<br>
<br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A partition of a nonempty set  is a family of non-empty sets  such that each element  belongs to only one set in the partition<br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/partition.html</link><guid isPermaLink="false">Glossary/Partition.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Path]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A path in a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  is a nonempty sequence of vertices  of vertices such that  for each <br>The path from  to  has length <br>An undirected path in  is a nonempty sequence  such that for each ,  or <br>The path is proper if  for each  in path <br>Properties<br>See Also]]></description><link>https://www.jayitha.github.io/Notes/glossary/path.html</link><guid isPermaLink="false">Glossary/Path.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Permutation]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
If  is a set, a permutation of  is a one-one onto function <br>Assuming a listing of elements in , each permutation corresponds to a new listing  based on the permutation function <br>Properties<br>See Also<br>
<br><a data-href="Derived Permutation" href="https://www.jayitha.github.io/Notes/Derived Permutation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Derived Permutation</a><a data-href="Derived Permutation" href="https://www.jayitha.github.io/Notes/glossary/derived-permutation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Derived Permutation</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/permutation.html</link><guid isPermaLink="false">Glossary/Permutation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Persistence]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A requirement of <a data-tooltip-position="top" aria-label="Database System" data-href="Database System" href="https://www.jayitha.github.io/Notes/Database System" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">database systems</a><a data-tooltip-position="top" aria-label="Database System" data-href="Database System" href="https://www.jayitha.github.io/Notes/glossary/database-system.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">database systems</a> that sets it apart from standard programming is that data should be persistent. In standard programming, the data structure has to be explicitly coded into a file. <br>Properties<br><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> Persistent programming languages (Persistent C++)
]]></description><link>https://www.jayitha.github.io/Notes/glossary/persistence.html</link><guid isPermaLink="false">Glossary/Persistence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Piecewise Constant PDF]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
A <a data-tooltip-position="top" aria-label="Continuous Random Variable" data-href="Continuous Random Variable" href="https://www.jayitha.github.io/Notes/Continuous Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">continuous random variable</a><a data-tooltip-position="top" aria-label="Continuous Random Variable" data-href="Continuous Random Variable" href="https://www.jayitha.github.io/Notes/glossary/continuous-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">continuous random variable</a>  whose <a data-tooltip-position="top" aria-label="Probability Density Function (PDF)" data-href="Probability Density Function (PDF)" href="https://www.jayitha.github.io/Notes/Probability Density Function (PDF)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PDF</a><a data-tooltip-position="top" aria-label="Probability Density Function (PDF)" data-href="Probability Density Function (PDF)" href="https://www.jayitha.github.io/Notes/glossary/probability-density-function-(pdf).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PDF</a> has the piecewise constant form <br><br>where all s are nonnegative. i.e. within each interval ,  is <a data-tooltip-position="top" aria-label="Continuous Uniform Random Variable" data-href="Continuous Uniform Random Variable" href="https://www.jayitha.github.io/Notes/Continuous Uniform Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">uniform</a><a data-tooltip-position="top" aria-label="Continuous Uniform Random Variable" data-href="Continuous Uniform Random Variable" href="https://www.jayitha.github.io/Notes/glossary/continuous-uniform-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">uniform</a> ]]></description><link>https://www.jayitha.github.io/Notes/glossary/piecewise-constant-pdf.html</link><guid isPermaLink="false">Glossary/Piecewise Constant PDF.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Poisson Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The Poisson random variable is used to model the <a data-href="Binomial Random Variable" href="https://www.jayitha.github.io/Notes/Binomial Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binomial Random Variable</a><a data-href="Binomial Random Variable" href="https://www.jayitha.github.io/Notes/glossary/binomial-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binomial Random Variable</a> when the number of trials  is large and the probability of success  is small i.e. it’s used to model the number of occurrences of rare events. It’s used to make the probability model less complex and the related computation more tractable<br><br>its <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a> is given by<br>
You can use the <a data-tooltip-position="top" aria-label="Maclaurin Series" data-href="Maclaurin Series" href="https://www.jayitha.github.io/Notes/Maclaurin Series" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Maclaurin Series Expansion</a><a data-tooltip-position="top" aria-label="Maclaurin Series" data-href="Maclaurin Series" href="https://www.jayitha.github.io/Notes/glossary/maclaurin-series.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Maclaurin Series Expansion</a> of function  to show that it’s a valid PMF.<br>The Poisson PMF with parameter  is a good approximation for a Binomial PMF with parameters  and <br><br>In other words, a Poisson random variable  with parameter  can be viewed as the limit of the <a data-href="Binomial Random Variable" href="https://www.jayitha.github.io/Notes/Binomial Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binomial Random Variable</a><a data-href="Binomial Random Variable" href="https://www.jayitha.github.io/Notes/glossary/binomial-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binomial Random Variable</a><br>
as , while <br>The <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mean</a> and <a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">variance</a><a data-tooltip-position="top" aria-label="Variance" data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">variance</a> are<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/poisson-random-variable.html</link><guid isPermaLink="false">Glossary/Poisson Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Polynomial Space Complexity Class]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A special <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a> with space bounded by the Poly class of functions.<br>Denoted by  or <br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html</link><guid isPermaLink="false">Glossary/Polynomial Space Complexity Class.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Polynomial Time Complexity Class]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A special <a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complexity class</a><a data-tooltip-position="top" aria-label="Complexity" data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complexity class</a> with time bounded by the Poly class of functions.<br>Denoted by  or <br>Properties<br>In general, members of  are regarded as being tractable<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/polynomial-time-complexity-class.html</link><guid isPermaLink="false">Glossary/Polynomial Time Complexity Class.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[PostgreSQL]]></title><description><![CDATA[ 
 <br>Why is PostgreSQL the GOAT?<br>
?<br>
(<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a>) PostgreSQL reigns over other alternatives because of (1) its central algorithm, (2) flexibility and (3) community support<a data-footref="[inline0" href="https://www.jayitha.github.io/Notes/about:blank#fn-1-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a><br>
<br>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^WG" data-href="Abbreviations#^WG" href="https://www.jayitha.github.io/Notes/Abbreviations#^WG" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">WG</a><a data-tooltip-position="top" aria-label="Abbreviations > ^WG" data-href="Abbreviations#^WG" href="https://www.jayitha.github.io/Notes/abbreviations.html#^WG" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">WG</a>: More principled interpretation of SQL and a powerful EXPLAIN command<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-1-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/postgresql.html</link><guid isPermaLink="false">Glossary/PostgreSQL.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Principle of Extensionality]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
If  and  are sets such that , then <br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/principle-of-extensionality.html</link><guid isPermaLink="false">Glossary/Principle of Extensionality.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Probability Axioms]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>Nonnegativity<br>
, for ever event <br>Additivity<br>
If  and  are two disjoint events, then the probability of their union satisfies<br>
More generally, if the sample space has an infinite number of elements and  is a sequence of disjoint events, then the probability of their union satisfies<br>
<br><a data-href="Normalization Property" href="https://www.jayitha.github.io/Notes/Normalization Property" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Normalization Property</a><a data-href="Normalization Property" href="https://www.jayitha.github.io/Notes/glossary/normalization-property.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Normalization Property</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/probability-axioms.html</link><guid isPermaLink="false">Glossary/Probability Axioms.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Probability Density Function (PDF)]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The probability density function of a random variable  is a nonnegative function  indicating the probability mass per unit length around each value that  can take.<br>The probability that <a data-href="Random Variable" href="https://www.jayitha.github.io/Notes/Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Random Variable</a><a data-href="Random Variable" href="https://www.jayitha.github.io/Notes/glossary/random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Random Variable</a>  falls within the interval  is given by<br>
Note that since the probability of any single element is , including or excluding the limits of the interval make no difference.<br>To interpret the PDF, take the interval  with small , then<br>
To qualify as a valid PDF,  must satisfy the <a data-href="Normalization Property" href="https://www.jayitha.github.io/Notes/Normalization Property" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Normalization Property</a><a data-href="Normalization Property" href="https://www.jayitha.github.io/Notes/glossary/normalization-property.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Normalization Property</a>:<br>
<br>
An integral is just a limiting form of a sum!
]]></description><link>https://www.jayitha.github.io/Notes/glossary/probability-density-function-(pdf).html</link><guid isPermaLink="false">Glossary/Probability Density Function (PDF).md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Probability Law]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
A probability law assigned to each event (a subset of the sample space ) a nonnegative number  called the probability of event  that encodes knowledge or belief about the likelihood of the elements of .<br>A probability law must satisfy <a data-href="Probability Axioms" href="https://www.jayitha.github.io/Notes/Probability Axioms" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Axioms</a><a data-href="Probability Axioms" href="https://www.jayitha.github.io/Notes/glossary/probability-axioms.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Axioms</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/probability-law.html</link><guid isPermaLink="false">Glossary/Probability Law.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Probability Mass Function]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
A <a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Random Variable</a><a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Random Variable</a> has an associated Probability Mass Function (PMF), which gives the probability of each numerical value that the random variable can take<br>The PMF of a discrete random variable  is denoted by <br>To calculate the PMF of a random variable , for each possible value  of <br>
<br>Collect all the possible outcomes that give rise to the event 
<br>Add their probabilities to get 
<br>You can also define the PMF of two random variables  and  jointly<br>
You can derive the PMF of each of the random variables (called their marginal PMF) from the joint PMF<br>
You can also define conditional PMF of a random variable , conditioned on a particular event  or another random variable <br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html</link><guid isPermaLink="false">Glossary/Probability Mass Function.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Problem of Points]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Posed by Chevalier de Mere in the 17th century to Pascal, who introduced the idea that the stake of an interrupted game should be divided in the proportion to the players conditional probabilities of winning given the state of the game at the time of the interruption<br>Let  be the interrupted state,  and  be the conditional probability that  and  win (resp.) from state . Let  be the stake (prize). Then, the amount that  () gets, denoted by  () is given by<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/problem-of-points.html</link><guid isPermaLink="false">Glossary/Problem of Points.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Properties of Independence]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>If  and  are independent, so are  and <br><a data-href="Independence" href="https://www.jayitha.github.io/Notes/Independence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Independence</a><a data-href="Independence" href="https://www.jayitha.github.io/Notes/glossary/independence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Independence</a> does not imply <a data-href="Conditional Independence" href="https://www.jayitha.github.io/Notes/Conditional Independence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Conditional Independence</a><a data-href="Conditional Independence" href="https://www.jayitha.github.io/Notes/glossary/conditional-independence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Conditional Independence</a>, and vice versa.]]></description><link>https://www.jayitha.github.io/Notes/glossary/properties-of-independence.html</link><guid isPermaLink="false">Glossary/Properties of Independence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Properties of Probability Laws]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Consider a probability law, and let ,  and  be events. Some properties are:<br>
<br>If , then 
<br>
<br>
<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/properties-of-probability-laws.html</link><guid isPermaLink="false">Glossary/Properties of Probability Laws.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Pumping Lemma]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/pumping-lemma.html</link><guid isPermaLink="false">Glossary/Pumping Lemma.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Pure Graph]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a> is pure if either<br>
<br>every vertex belongs to an edge (pure of dimension 1) or
<br>every vertex is <a data-tooltip-position="top" aria-label="Isolated Vertex" data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/Isolated Vertex" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">isolated</a><a data-tooltip-position="top" aria-label="Isolated Vertex" data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/glossary/isolated-vertex.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">isolated</a> (pure of dimension 0)
]]></description><link>https://www.jayitha.github.io/Notes/glossary/pure-graph.html</link><guid isPermaLink="false">Glossary/Pure Graph.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Pyramid Technique</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: <br>
Papers: [<a data-href="berchtold1998pyramid" href="https://www.jayitha.github.io/Notes/berchtold1998pyramid" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">berchtold1998pyramid</a><a data-href="berchtold1998pyramid" href="https://www.jayitha.github.io/Notes/literature-notes/berchtold1998pyramid.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">berchtold1998pyramid</a>]<br>
Tags: <br><a data-href="berchtold1998pyramid" href="https://www.jayitha.github.io/Notes/berchtold1998pyramid" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">berchtold1998pyramid</a><a data-href="berchtold1998pyramid" href="https://www.jayitha.github.io/Notes/literature-notes/berchtold1998pyramid.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">berchtold1998pyramid</a><br>
<br>Indexing technique for high-dimensional data spaces
<br>Adapted to range query processing using the <a data-tooltip-position="top" aria-label="Chebyshev Metric" data-href="Chebyshev Metric" href="https://www.jayitha.github.io/Notes/Chebyshev Metric" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Maximum Metric</a><a data-tooltip-position="top" aria-label="Chebyshev Metric" data-href="Chebyshev Metric" href="https://www.jayitha.github.io/Notes/glossary/chebyshev-metric.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Maximum Metric</a>  
<br>
The basic idea is divide the data space such that the resulting partitions are shaped like peels of an onion
<br>Two major steps<br>
Step 1: Divide the -dimensional space into  pyramids having the center point of the space as their top.<br>
Step 2: Single pyramids are cut into slices parallel to the basis of the pyramid forming the data pages.<br>The paper <a data-href="berchtold1998pyramid" href="https://www.jayitha.github.io/Notes/berchtold1998pyramid" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">berchtold1998pyramid</a><a data-href="berchtold1998pyramid" href="https://www.jayitha.github.io/Notes/literature-notes/berchtold1998pyramid.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">berchtold1998pyramid</a> states that unlike other indexing structures, the performance of the pyramid technique is not impacted by the <a data-href="Curse of Dimensionality" href="https://www.jayitha.github.io/Notes/Curse of Dimensionality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Curse of Dimensionality</a><a data-href="Curse of Dimensionality" href="https://www.jayitha.github.io/Notes/glossary/curse-of-dimensionality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Curse of Dimensionality</a>, in fact, the performance improves as the dimensionality of the space increases. <br>
It's important to note that these observations are made for hypercube queries and uniform data distributions. Queries which touch the boundary of the data space or very skewed queries are handled less efficiently. 
<br>This technique maps the given -dimensional data space into a -dimensional data space so we can use B-Tree indexing.<br><br>
<br>
<br>
<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/pyramid-technique.html</link><guid isPermaLink="false">Glossary/Pyramid Technique.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Random Variable]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>A random variable is a real-valued function of the outcome of an experiment<br>A function of a random variable defines another random variable<br>With each random variable, you can compute statistics of interest like the mean or the variance<br>A random variable can be conditioned on another event or random variable. Furthermore, you can also define the notion of independence of random variables.<br><a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Random Variable</a><a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Random Variable</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/random-variable.html</link><guid isPermaLink="false">Glossary/Random Variable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Recursive Language]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a>  is recursive if an <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptor</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptor</a> <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a>  always halts on any input<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/recursive-language.html</link><guid isPermaLink="false">Glossary/Recursive Language.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Recursively Enumerable Language]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a>  is recursively enumerable iff it is  (or ) for some <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a> <br>This means that there is an algorithm that is guaranteed to eventually <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">accept</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">accept</a> on input  if  but may run forever if <br>Thus, you can never know if a <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">word</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">word</a> is not in <br>A language whose complement is <a data-tooltip-position="top" aria-label="Recursively Enumerable Language" data-href="Recursively Enumerable Language" href="https://www.jayitha.github.io/Notes/Recursively Enumerable Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">RE</a><a data-tooltip-position="top" aria-label="Recursively Enumerable Language" data-href="Recursively Enumerable Language" href="https://www.jayitha.github.io/Notes/glossary/recursively-enumerable-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">RE</a> is called Co-RE<br>Properties<br>Let  be a <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a><br>
<br>If  is RE and Co-RE, then  is <a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">recursive</a><a data-tooltip-position="top" aria-label="Recursive Language" data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">recursive</a>
<br> is RE iff it is the domain of a <a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">computable function</a><a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">computable function</a>
<br> is RE iff it is the range of a <a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">computable function</a><a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">computable function</a>
<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/recursively-enumerable-language.html</link><guid isPermaLink="false">Glossary/Recursively Enumerable Language.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Reduction]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br>Let  and  be two <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">languages</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">languages</a>,  is reducible to  if there is a <a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">computable function</a><a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">computable function</a>  mapping each <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">word</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">word</a>  to word <br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/reduction.html</link><guid isPermaLink="false">Glossary/Reduction.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Referential Integrity]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
Cannot violate key and foreign key constraints]]></description><link>https://www.jayitha.github.io/Notes/glossary/referential-integrity.html</link><guid isPermaLink="false">Glossary/Referential Integrity.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Refinement]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
If  and  are two <a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relations</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relations</a>,  is a refinement of  if <br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/refinement.html</link><guid isPermaLink="false">Glossary/Refinement.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Reflexive Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a>  is<br>
<br>reflexive iff for all <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$dom$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>, 
<br>irreflexive iff for all <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$dom$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>, 
<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html</link><guid isPermaLink="false">Glossary/Reflexive Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Regular Expression]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A regular expression over <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">alphabet</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">alphabet</a>  is written using the symbols in  and the operations: concatenation,  and <br>Properties<br>The language with an even number of 1’s over alphabet set  can be written as<br>
<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/regular-expression.html</link><guid isPermaLink="false">Glossary/Regular Expression.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Regular Language]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">accepted</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">accepted</a> by some <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a> is called a regular language<br>Properties<br> is a popular non regular language because no <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a> can remember the number of ’s scanned<br><br>
<br><a data-href="Pumping Lemma" href="https://www.jayitha.github.io/Notes/Pumping Lemma" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pumping Lemma</a><a data-href="Pumping Lemma" href="https://www.jayitha.github.io/Notes/glossary/pumping-lemma.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pumping Lemma</a>
<br><a data-href="Kleene's Theorem" href="https://www.jayitha.github.io/Notes/Kleene's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Kleene's Theorem</a><a data-href="Kleene's Theorem" href="https://www.jayitha.github.io/Notes/glossary/kleene's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Kleene's Theorem</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/regular-language.html</link><guid isPermaLink="false">Glossary/Regular Language.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A relation  is a set of <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pairs</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pairs</a>.<br>
<br>The domain of  () is the set of all objects  such that 
<br>The range of  () is the set of all objects  such that  for some 
<br>The field of  () is the union of the domain and range of  ()
<br>A relation can be defined on a set (say ) where . Using this notation we define an <a data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">n-ary Relation</a><a data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">n-ary Relation</a><br>Properties<br><br>
<br><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-ary Relation</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary Relation</a>
<br><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binary Relation</a><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binary Relation</a>
<br><a data-href="Unary Relation" href="https://www.jayitha.github.io/Notes/Unary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unary Relation</a><a data-href="Unary Relation" href="https://www.jayitha.github.io/Notes/glossary/unary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unary Relation</a>
<br><a data-href="Restriction" href="https://www.jayitha.github.io/Notes/Restriction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Restriction</a><a data-href="Restriction" href="https://www.jayitha.github.io/Notes/glossary/restriction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Restriction</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/relation.html</link><guid isPermaLink="false">Glossary/Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Relational Diagrams]]></title><description><![CDATA[ 
 <br>Visualizes and helps identify SQL patterns<br>
<img alt="Pasted image 20240323114830.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240323114830.png"><br>
A dashed box represents NOT EXISTS]]></description><link>https://www.jayitha.github.io/Notes/glossary/relational-diagrams.html</link><guid isPermaLink="false">Glossary/Relational Diagrams.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240323114830.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240323114830.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Relational Model]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
<br>humans viewed data as relations
<br>declarative languages are provided for data access
<br>Indexes and other mechanisms are hidden
<br>Provided the initial basis for mathematical investigation of databases because it bridges the gap between data modeling and mathematical logic
<br>The approach was increasingly accepted as implementation and optimization techniques could provide reasonable response times in spite of distance between the logical and physical layers
<br>Also, historically, DBMS systems were mostly used for business applications making the relational model a better fit. But now, requirements are more complex requiring more structures, control and intelligence
<br><a data-href="moseley2006out" href="https://www.jayitha.github.io/Notes/moseley2006out" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">moseley2006out</a><a data-href="moseley2006out" href="https://www.jayitha.github.io/Notes/literature-notes/moseley2006out.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">moseley2006out</a><br>
<br>Origin <a data-href="codd1970relational" href="https://www.jayitha.github.io/Notes/codd1970relational" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">codd1970relational</a><a data-href="codd1970relational" href="https://www.jayitha.github.io/Notes/literature-notes/codd1970relational.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">codd1970relational</a>
<br>Nothing intrinsically to do with databases

Elegant approach to structuring data, a means for manipulating such data, and a mechanism for maintaining integrity and consistency of state and a fourth strength is its insistence on a clear separation between the logical and physical layers of the system


<br>The relational model has the following four aspects

<br>Structure (relations represent data)
<br>Manipulation (means to specify derived data)
<br>Integrity (a means to specify restrictions on data)
<br>Data Independence (separation b/w logical data and its physical representation)


<br><br>
<br><a data-href="Why are the Relational Modal and the Data Independence Principle Taught Together?" href="https://www.jayitha.github.io/Notes/Why are the Relational Modal and the Data Independence Principle Taught Together" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Why are the Relational Modal and the Data Independence Principle Taught Together?</a><a data-href="Why are the Relational Modal and the Data Independence Principle Taught Together?" href="https://www.jayitha.github.io/Notes/glossary/why-are-the-relational-modal-and-the-data-independence-principle-taught-together" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Why are the Relational Modal and the Data Independence Principle Taught Together?</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/relational-model.html</link><guid isPermaLink="false">Glossary/Relational Model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Restriction]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
For an <a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">n-ary relation</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">n-ary relation</a>  on set  and a subset  of , the restriction of  to  is the intersection <br>Properties<br>If  is an <a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/n-ary Operation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-ary operation</a><a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-operation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary operation</a> on , then the restriction of  to a subset  of  is the <a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">function</a><a data-tooltip-position="top" aria-label="Function" data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">function</a>  with <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">domain</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">domain</a>  which agrees with  at each point of <br>
Function  will be an <a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/n-ary Operation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-ary operation</a><a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-operation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary operation</a> on set  iff  is closed under  i.e. <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$ran$</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> ()<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/restriction.html</link><guid isPermaLink="false">Glossary/Restriction.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Rice's Theorem]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/rice&apos;s-theorem.html</link><guid isPermaLink="false">Glossary/Rice&apos;s Theorem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Rigid Carrier Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
The <a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carrier map</a><a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carrier map</a> is rigid if for every simplex  of dimension , the subgraph  is <a data-tooltip-position="top" aria-label="Pure Graph" data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/Pure Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pure</a><a data-tooltip-position="top" aria-label="Pure Graph" data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/glossary/pure-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pure</a> of dimension <br>
<br>i.e. each vertex matches to a subgraph of <a data-tooltip-position="top" aria-label="Isolated Vertex" data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/Isolated Vertex" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">isolated vertices</a><a data-tooltip-position="top" aria-label="Isolated Vertex" data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/glossary/isolated-vertex.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">isolated vertices</a>
<br>and each edge matches to a subgraph where each vertex belongs to some edge
]]></description><link>https://www.jayitha.github.io/Notes/glossary/rigid-carrier-map.html</link><guid isPermaLink="false">Glossary/Rigid Carrier Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Rigid Simplical Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Given a <a data-tooltip-position="top" aria-label="Simplical Map" data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">simplical map</a><a data-tooltip-position="top" aria-label="Simplical Map" data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">simplical map</a>  and an edge , it is important to note that  and  need not be different i.e. the image of an edge may be a vertex. If this isn’t the case, i.e. if for all , , then the map is rigid<br>A rigid simplical map is a graph homomorphism]]></description><link>https://www.jayitha.github.io/Notes/glossary/rigid-simplical-map.html</link><guid isPermaLink="false">Glossary/Rigid Simplical Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Savitch's Theorem]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PSPACE$</a><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a> = <a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NPSPACE$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a><br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/savitch&apos;s-theorem.html</link><guid isPermaLink="false">Glossary/Savitch&apos;s Theorem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Segment]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A subsequence of a <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequence</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequence</a>  is called a segment. All segments take the form<br>
<br>A segment is called<br>
<br>first iff 
<br>proper iff segment is different from 
<br>Properties<br>Each segment is also a <a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">finite sequence</a><a data-tooltip-position="top" aria-label="Finite Sequence" data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">finite sequence</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/segment.html</link><guid isPermaLink="false">Glossary/Segment.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Semantics of a SQL Query]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
The nested loop way of executing a complex join query with select and project filters is a good conceptual way of looking at the semantics of the query though the optimizer will likely find an algebraically-equivalent more-efficient query execution strategy]]></description><link>https://www.jayitha.github.io/Notes/glossary/semantics-of-a-sql-query.html</link><guid isPermaLink="false">Glossary/Semantics of a SQL Query.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Simplex]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
An element of <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a>  is called a simplex (plu: simplices) of . <br>A simplex  has dimension ]]></description><link>https://www.jayitha.github.io/Notes/glossary/simplex.html</link><guid isPermaLink="false">Glossary/Simplex.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Simplical Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A <a data-tooltip-position="top" aria-label="Vertex Map" data-href="Vertex Map" href="https://www.jayitha.github.io/Notes/Vertex Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">vertex map</a><a data-tooltip-position="top" aria-label="Vertex Map" data-href="Vertex Map" href="https://www.jayitha.github.io/Notes/glossary/vertex-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">vertex map</a>  is a simplical map if it also carries simplices to simplices. If  is a simplex in , then  is a simplex of <br>Properties<br>The image of a <a data-tooltip-position="top" aria-label="Connected Graph" data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/Connected Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected graph</a><a data-tooltip-position="top" aria-label="Connected Graph" data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/glossary/connected-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected graph</a>  under a simplical map is connected<br><br><a data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/Rigid Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rigid Simplical Map</a><a data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rigid Simplical Map</a><br>
<a data-href="Chromatic Simplical Map" href="https://www.jayitha.github.io/Notes/Chromatic Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chromatic Simplical Map</a><a data-href="Chromatic Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chromatic Simplical Map</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/simplical-map.html</link><guid isPermaLink="false">Glossary/Simplical Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Slutsky's Theorem]]></title><description><![CDATA[ 
 <br><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beyer1999nearest</a><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beyer1999nearest</a><br>
Let  be random vectors (of the same arity) and  be a continuous function. If   (i.e. <a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/Converges in Probability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Converges in Probability</a><a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/glossary/converges-in-probability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Converges in Probability</a>) and  is finite then <br>Related Corollaries:<br>If  and  are sequences of random variables s.t.  and , then ]]></description><link>https://www.jayitha.github.io/Notes/glossary/slutsky&apos;s-theorem.html</link><guid isPermaLink="false">Glossary/Slutsky&apos;s Theorem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Standard Deviation]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Another measure of dispersion like <a data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Variance</a><a data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Variance</a> is the standard deviation (denoted by ) defined as the square root of the variance<br>
The standard deviation is easier to interpret than the <a data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Variance</a><a data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Variance</a> since it has the same unit as random variable .]]></description><link>https://www.jayitha.github.io/Notes/glossary/standard-deviation.html</link><guid isPermaLink="false">Glossary/Standard Deviation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Strict Carrier Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
A <a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carrier map</a><a data-tooltip-position="top" aria-label="Carrier Map" data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carrier map</a> is strict is if it satisfies  where  and  are two edges]]></description><link>https://www.jayitha.github.io/Notes/glossary/strict-carrier-map.html</link><guid isPermaLink="false">Glossary/Strict Carrier Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Sum of Infinite Geometric Sequence]]></title><description><![CDATA[ 
 <br>Let  be an infinite geometric sequence with . Then the sum of this sequence is given by<br><br>You can also prove this using the <a data-tooltip-position="top" aria-label="Maclaurin Series" data-href="Maclaurin Series" href="https://www.jayitha.github.io/Notes/Maclaurin Series" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Maclaurin Series Expansion</a><a data-tooltip-position="top" aria-label="Maclaurin Series" data-href="Maclaurin Series" href="https://www.jayitha.github.io/Notes/glossary/maclaurin-series.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Maclaurin Series Expansion</a> of the function ]]></description><link>https://www.jayitha.github.io/Notes/glossary/sum-of-infinite-geometric-sequence.html</link><guid isPermaLink="false">Glossary/Sum of Infinite Geometric Sequence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Symmetric Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a>  is<br>
<br>symmetric iff whenever <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pair</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pair</a> , then 
<br>antisymmetric iff whenever <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pair</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pair</a> , then  or 
<br>Another way to define antisymmetry: A relation  is antisymmetric iff<br>
<br>Properties<br><br>
<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html</link><guid isPermaLink="false">Glossary/Symmetric Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Task]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Let  be process names,  be a domain of input values and  be a domain of output values. A task is a triple  where<br>
<br> is a <a data-tooltip-position="top" aria-label="Pure Graph" data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/Pure Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pure</a><a data-tooltip-position="top" aria-label="Pure Graph" data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/glossary/pure-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pure</a> <a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic</a><a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic</a> input graph of dimension  colored by  and labeled by  defining all possible ways computation can start
<br> is a <a data-tooltip-position="top" aria-label="Pure Graph" data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/Pure Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pure</a><a data-tooltip-position="top" aria-label="Pure Graph" data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/glossary/pure-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pure</a> <a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chromatic</a><a data-tooltip-position="top" aria-label="Coloring" data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chromatic</a> output graph of dimension  colored by  and labeled by  defining all possible ways computation can end
<br> is a <a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/Chromatic Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">name-preserving</a><a data-tooltip-position="top" aria-label="Chromatic Carrier Map" data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">name-preserving</a> carrier map from  to  defining which inputs can lead to which outputs
<br> is an edge in the input graph where processor  starts with input  and so on.  is an edge in the output graph reachable from the input edge as dictated by the carrier map.<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/task.html</link><guid isPermaLink="false">Glossary/Task.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Taylor Series]]></title><description><![CDATA[ 
 <br>The Taylor Expansion of a function () is an infinite sum of terms that represent the function about a point (). <br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/taylor-series.html</link><guid isPermaLink="false">Glossary/Taylor Series.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The 3-Satisfiability Problem]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The 3-Satisfiability (3-SAT) problem takes as input a propositional formula in <a data-tooltip-position="top" aria-label="Conjunctive Normal Form" data-href="Conjunctive Normal Form" href="https://www.jayitha.github.io/Notes/Conjunctive Normal Form" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">CNF</a><a data-tooltip-position="top" aria-label="Conjunctive Normal Form" data-href="Conjunctive Normal Form" href="https://www.jayitha.github.io/Notes/glossary/conjunctive-normal-form.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">CNF</a> in which each conjunct has at most 3 literals.<br>The question is whether the formula is satisfiable i.e. is there an truth assignment that satisfies the formula<br>Properties<br>The 3-SAT problem is <a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NP$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>-<a data-tooltip-position="top" aria-label="Completeness" data-href="Completeness" href="https://www.jayitha.github.io/Notes/Completeness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complete</a><a data-tooltip-position="top" aria-label="Completeness" data-href="Completeness" href="https://www.jayitha.github.io/Notes/glossary/completeness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complete</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-3-satisfiability-problem.html</link><guid isPermaLink="false">Glossary/The 3-Satisfiability Problem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Borel-Cantelli Lemma]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Consider an infinite sequence of trials. The probability of success at the th trial is some positive number . Let  be the event that there is no success, and let  be the event that there is an infinite number of successes<br>(a) If the trials are independent and , then  and <br>(b) If , then ]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-borel-cantelli-lemma.html</link><guid isPermaLink="false">Glossary/The Borel-Cantelli Lemma.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Counting Method]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The Counting Method<br>When the number of possible outcomes is finite, and all outcomes are equally likely. To calculate the probability of an event, count the number of elements of the event and divide by the number of elements of the sample space.]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-counting-method.html</link><guid isPermaLink="false">Glossary/The Counting Method.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Counting Principle]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Consider a process that consists of  stages. Suppose that<br>
<br>There are  possible results at the first stage
<br>For every possible result at the first stage, there are  possible results at the second stage
<br>More generally, at stage  there are  possible results for each outcome of the previous stage<br>
The total number of possible results of the -stage process is<br>

]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-counting-principle.html</link><guid isPermaLink="false">Glossary/The Counting Principle.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Diderot Effect]]></title><description><![CDATA[ 
 <br><a data-href="clear2018atomic" href="https://www.jayitha.github.io/Notes/clear2018atomic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">clear2018atomic</a><a data-href="clear2018atomic" href="https://www.jayitha.github.io/Notes/literature-notes/clear2018atomic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">clear2018atomic</a><br>
Obtaining a new possession often creates a spiral of consumption that leads to additional purchases]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-diderot-effect.html</link><guid isPermaLink="false">Glossary/The Diderot Effect.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Divide-and-Conquer Method]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The Divide-and-Conquer Method<br>The probabilities  of various events  are obtained from conditional probabilities , where the  are suitable events that form a partition of the sample space and have known probabilities . The probabilities  are then obtained using the <a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/Total Probability Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Probability Theorem</a><a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/glossary/total-probability-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Probability Theorem</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-divide-and-conquer-method.html</link><guid isPermaLink="false">Glossary/The Divide-and-Conquer Method.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Emptiness Problem]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The emptiness problem determines if a <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> is empty given a description of the language.<br>Properties<br>If the language description is a <a data-tooltip-position="top" aria-label="Context-Free Grammar" data-href="Context-Free Grammar" href="https://www.jayitha.github.io/Notes/Context-Free Grammar" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">CFG</a><a data-tooltip-position="top" aria-label="Context-Free Grammar" data-href="Context-Free Grammar" href="https://www.jayitha.github.io/Notes/glossary/context-free-grammar.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">CFG</a>, then the question of weather  is empty is <a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PTIME$</a><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>-<a data-tooltip-position="top" aria-label="Completeness" data-href="Completeness" href="https://www.jayitha.github.io/Notes/Completeness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complete</a><a data-tooltip-position="top" aria-label="Completeness" data-href="Completeness" href="https://www.jayitha.github.io/Notes/glossary/completeness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complete</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-emptiness-problem.html</link><guid isPermaLink="false">Glossary/The Emptiness Problem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The False-Positive Puzzle]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
A test for a certain rare disease is assumed to be correct  of the time: if a person has the disease, the test results are positive with probability  , and if the person does not have the disease, the test results are negative with probability  (). A random person drawn from a certain population has the probability  of having the disease (). Given that the person just tested positive, what is the probability of having the disease? ()<br>Using <a data-href="Bayes' Rule" href="https://www.jayitha.github.io/Notes/Bayes' Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bayes' Rule</a><a data-href="Bayes' Rule" href="https://www.jayitha.github.io/Notes/glossary/bayes'-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bayes' Rule</a> and the <a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/Total Probability Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Probability Theorem</a><a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/glossary/total-probability-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Probability Theorem</a><br><br>How interesting! Even though the test seemed fairly accurate, a person who tested positive is still very unlikely to have the disease.]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-false-positive-puzzle.html</link><guid isPermaLink="false">Glossary/The False-Positive Puzzle.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Goldilocks Rule]]></title><description><![CDATA[ 
 <br><a data-href="clear2018atomic" href="https://www.jayitha.github.io/Notes/clear2018atomic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">clear2018atomic</a><a data-href="clear2018atomic" href="https://www.jayitha.github.io/Notes/literature-notes/clear2018atomic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">clear2018atomic</a><br>
The Goldilocks Rule states that humans experience peak motivation when working on tasks that are right on the edge of their current abilities. Not too hard or too easy.]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-goldilocks-rule.html</link><guid isPermaLink="false">Glossary/The Goldilocks Rule.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Halting Problem]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The halting problem asks if a given <a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">TM</a><a data-tooltip-position="top" aria-label="Turing Machine" data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">TM</a>  halts on a specified input .<br>Properties<br>The halting problem is <a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/Decidable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">undecidable</a><a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/glossary/decidable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">undecidable</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-halting-problem.html</link><guid isPermaLink="false">Glossary/The Halting Problem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Monty Hall Problem]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
You are told that a prize is equally likely to be found behind any one of the 3 closed doors in front of you. You point to one of the doors. A friend opens for you one of the remaining two doors, after making sure that the prize is not behind it. At this point you can stick to your initial choice, or switch to the other unopened door. Consider the following strategies<br>Stick to your initial choice<br>The probability of winning is  since the prize is equally likely to be behind each door<br>Switch to the other opened door<br>If the prize is behind the initially chosen door (), you do not win. Otherwise (2/3), you’re guaranteed to win since your friend eliminates the door without the prize]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-monty-hall-problem.html</link><guid isPermaLink="false">Glossary/The Monty Hall Problem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Post Correspondence Problem]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The input to the Post Correspondence Problem (PCP)  consists of two lists of <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">words</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">words</a> over some <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">alphabet</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">alphabet</a>  with at least 2 symbols<br>A solution to the PCP is a sequence of indexes  such that<br>
remember <a data-tooltip-position="top" aria-label="Concatenation" data-href="Concatenation" href="https://www.jayitha.github.io/Notes/Concatenation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">concatenation</a><a data-tooltip-position="top" aria-label="Concatenation" data-href="Concatenation" href="https://www.jayitha.github.io/Notes/glossary/concatenation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">concatenation</a> and  can be larger than .<br>The question of interest is if there exists a solution to the PCP problem (a yes/no <a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/Decidable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">decidability</a><a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/glossary/decidable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">decidability</a> problem)<br>Properties<br>PCP is <a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/Decidable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">undecidable</a><a data-tooltip-position="top" aria-label="Decidable" data-href="Decidable" href="https://www.jayitha.github.io/Notes/glossary/decidable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">undecidable</a>. PCP us used to show the undecidability of other problems through <a data-tooltip-position="top" aria-label="Reduction" data-href="Reduction" href="https://www.jayitha.github.io/Notes/Reduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reduction</a><a data-tooltip-position="top" aria-label="Reduction" data-href="Reduction" href="https://www.jayitha.github.io/Notes/glossary/reduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reduction</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-post-correspondence-problem.html</link><guid isPermaLink="false">Glossary/The Post Correspondence Problem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Quantified Satisfiability Problem]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The Quantified Satisfiability problem takes as input a quantified propositional formula (all variables are quantified). For eg.<br><br>The question is whether the formula is true.<br>Properties<br>The QSAT problem is <a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PSPACE$</a><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>-<a data-tooltip-position="top" aria-label="Completeness" data-href="Completeness" href="https://www.jayitha.github.io/Notes/Completeness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">complete</a><a data-tooltip-position="top" aria-label="Completeness" data-href="Completeness" href="https://www.jayitha.github.io/Notes/glossary/completeness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">complete</a> along with well-known games like GO<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-quantified-satisfiability-problem.html</link><guid isPermaLink="false">Glossary/The Quantified Satisfiability Problem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Realizability Assumption]]></title><description><![CDATA[ 
 <br><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
There exists  s.t. the true loss is zero (). This assumption implies that with probability  over all samples  over , you get <br>
In the <a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ERM</a><a data-tooltip-position="top" aria-label="Empirical Risk Minimization" data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ERM</a> case this implies there exists a hypothesis where the empirical loss is ]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-realizability-assumption.html</link><guid isPermaLink="false">Glossary/The Realizability Assumption.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Sequential Method]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>The Sequential Method<br>When the experiment has a sequential character, and suitable conditional probabilities are specified or calculated along the branches of the corresponding tree, the probabilities of various events are obtained by multiplying conditional probabilities along the paths of the tree using the <a data-href="Multiplication Rule" href="https://www.jayitha.github.io/Notes/Multiplication Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Multiplication Rule</a><a data-href="Multiplication Rule" href="https://www.jayitha.github.io/Notes/glossary/multiplication-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Multiplication Rule</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-sequential-method.html</link><guid isPermaLink="false">Glossary/The Sequential Method.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Statistical Learning Framework]]></title><description><![CDATA[ 
 <br><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
<br>The learner’s input

<br>Domain set  - population
<br>Label set  - possible labels
<br>Training data 


<br>The learner’s output: a hypothesis: 
<br>A data-generation model

<br>Probability distribution over  is denoted by 
<br>Some correct labelling function  
<br> is generated by sampling  according to  and labelling using 


<br>Measure of success

<br>error of a classifier - probability that it does not predict the right answer on a random data point
<br><a data-href="Error of a Prediction Rule" href="https://www.jayitha.github.io/Notes/Error of a Prediction Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Error of a Prediction Rule</a><a data-href="Error of a Prediction Rule" href="https://www.jayitha.github.io/Notes/glossary/error-of-a-prediction-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Error of a Prediction Rule</a>


<br>The learner is blind to both  and 
<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-statistical-learning-framework.html</link><guid isPermaLink="false">Glossary/The Statistical Learning Framework.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Two-Envelope Paradox]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
<br>Didn’t really understand this, circle back <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> 
<br>You are given two envelopes and you are told that one of them contains  times as much money as the other, where  is an integer with . You open one envelope and look at the amount. You can either keep the amount or you may switch envelopes. What is the best strategy? Switching or no switching?<br>Let  denote the amount of money in the envelope you picked () and Y denote the amount in the other ().  is either  or  with equal probability. Therefore,<br>
Therefore, it seems like switching is the dominant strategy. But if you were to pick envelope , the strategy is to switch again etc. <br>This is paradoxical! How can this be explained within the realm of probability theory?<br>You make two assumptions, both of which are flawed<br>
<br>We have no apriori knowledge about the amounts in the envelopes. So, given , the only thing we know is that  is either  or  and there’s no reason to assume either is more likely
<br>This assumption is flawed because it relies on an incompletely specified <a data-href="Probability Law" href="https://www.jayitha.github.io/Notes/Probability Law" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Law</a><a data-href="Probability Law" href="https://www.jayitha.github.io/Notes/glossary/probability-law.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Law</a> and subsequently an incomplete <a data-tooltip-position="top" aria-label="Elements of a Probabilistic Model" data-href="Elements of a Probabilistic Model" href="https://www.jayitha.github.io/Notes/Elements of a Probabilistic Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probabilistic Model</a><a data-tooltip-position="top" aria-label="Elements of a Probabilistic Model" data-href="Elements of a Probabilistic Model" href="https://www.jayitha.github.io/Notes/glossary/elements-of-a-probabilistic-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probabilistic Model</a>. If you have an idea of the range and likelihood of , then you can judge whether the amount  is relatively smaller or larger than . In a fully specified <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a>, you must have a join PMF of  and . <br>
<br>Given two random variables,  and , if , then the strategy that always switches to  has the highest expected reward
<br>Given the fully-specified probabilistic model i.e. given  and given , switch if and only if . Depending on the value of , you may or may not switch envelopes.<br>However, here’s a fully-specified probabilistic model that still advocates switching for all : A fair coin is tossed until head comes up. Let  be the number of tosses, then  dollars are placed in one envelope and  dollars are places in the other. <br>Now, if envelope  contains  dollars, then  contains either  or  dollars.  has a geometric PMF<br><br>Therefore,<br><br>The expected amount you’d get by switching is<br><br>The expected value is larger than  iff<br>
When , it may seem like switching is the dominant strategy<br>If you were to apply the <a data-href="Total Expectation Theorem" href="https://www.jayitha.github.io/Notes/Total Expectation Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Expectation Theorem</a><a data-href="Total Expectation Theorem" href="https://www.jayitha.github.io/Notes/glossary/total-expectation-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Expectation Theorem</a>, you might get . This cannot be true since  and  have identical PMFs. <br>In actuality, we have  which is consistent with . Assumption 2 is invalid when <br>Let  be a <a data-href="Geometric Random Variable" href="https://www.jayitha.github.io/Notes/Geometric Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Geometric Random Variable</a><a data-href="Geometric Random Variable" href="https://www.jayitha.github.io/Notes/glossary/geometric-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Geometric Random Variable</a> parameterized with  and  where  is a constant. Then<br><br>When , using the <a data-href="Sum of Infinite Geometric Sequence" href="https://www.jayitha.github.io/Notes/Sum of Infinite Geometric Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Sum of Infinite Geometric Sequence</a><a data-href="Sum of Infinite Geometric Sequence" href="https://www.jayitha.github.io/Notes/glossary/sum-of-infinite-geometric-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Sum of Infinite Geometric Sequence</a> <br><br>When  since the series diverges]]></description><link>https://www.jayitha.github.io/Notes/glossary/the-two-envelope-paradox.html</link><guid isPermaLink="false">Glossary/The Two-Envelope Paradox.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Three Methods for Calculating Probabilities]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br><a data-href="The Counting Method" href="https://www.jayitha.github.io/Notes/The Counting Method" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Counting Method</a><a data-href="The Counting Method" href="https://www.jayitha.github.io/Notes/glossary/the-counting-method.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Counting Method</a><br>
<a data-href="The Sequential Method" href="https://www.jayitha.github.io/Notes/The Sequential Method" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Sequential Method</a><a data-href="The Sequential Method" href="https://www.jayitha.github.io/Notes/glossary/the-sequential-method.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Sequential Method</a><br>
<a data-href="The Divide-and-Conquer Method" href="https://www.jayitha.github.io/Notes/The Divide-and-Conquer Method" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Divide-and-Conquer Method</a><a data-href="The Divide-and-Conquer Method" href="https://www.jayitha.github.io/Notes/glossary/the-divide-and-conquer-method.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Divide-and-Conquer Method</a>]]></description><link>https://www.jayitha.github.io/Notes/glossary/three-methods-for-calculating-probabilities.html</link><guid isPermaLink="false">Glossary/Three Methods for Calculating Probabilities.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Three-Level Architecture]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
The three-level architecture involves splitting up database functionality into - physical, <a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/Logical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">logical</a><a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/glossary/logical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">logical</a> and external levels.]]></description><link>https://www.jayitha.github.io/Notes/glossary/three-level-architecture.html</link><guid isPermaLink="false">Glossary/Three-Level Architecture.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Top-k Query]]></title><description><![CDATA[ 
 <br>How is Top-k evaluated?<br>
?<br>
<a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a><br>
Top-k is evaluated inefficiently by modern databases<br>
Top-k can be evaluated efficiently using dynamic programming and efficient factorization]]></description><link>https://www.jayitha.github.io/Notes/glossary/top-k-query.html</link><guid isPermaLink="false">Glossary/Top-k Query.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Topological Sort]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
If  is a <a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partially ordered set</a><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partially ordered set</a>, then a topological sort of  (relative to ) is a <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a>  on  that is a <a data-tooltip-position="top" aria-label="Total Order" data-href="Total Order" href="https://www.jayitha.github.io/Notes/Total Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">total order</a><a data-tooltip-position="top" aria-label="Total Order" data-href="Total Order" href="https://www.jayitha.github.io/Notes/glossary/total-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">total order</a> such that <br>Properties<br> is compatible with  i.e. <br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/topological-sort.html</link><guid isPermaLink="false">Glossary/Topological Sort.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Total Expectation Theorem]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
From the <a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/Total Probability Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Probability Theorem</a><a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/glossary/total-probability-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Probability Theorem</a>, if  are disjoint events that partition the sample space with  for all , then<br>
Other ways to interpret the same theorem include<br>For any event  with  for all , we have<br>
and<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/total-expectation-theorem.html</link><guid isPermaLink="false">Glossary/Total Expectation Theorem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Total Order]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A total order is a <a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partial order</a><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partial order</a> that also satisfies <a data-href="Trichotomy" href="https://www.jayitha.github.io/Notes/Trichotomy" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Trichotomy</a><a data-href="Trichotomy" href="https://www.jayitha.github.io/Notes/glossary/trichotomy.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Trichotomy</a><br>A total order allows for comparing all elements of <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A total order is a <a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partial order</a><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partial order</a>  over  such that<br>
<br>Properties<br><br>
<br><a data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/Ordering Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Ordering Relation</a><a data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/glossary/ordering-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Ordering Relation</a>
<br><a data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Partial Order</a><a data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Partial Order</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/total-order.html</link><guid isPermaLink="false">Glossary/Total Order.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Total Probability Theorem]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
Let  be disjoint events that form a partition of the sample space (each possible outcome is included in exactly one of the events ) and assume that , for all . Then, for any event , we have<br><br>A special case of the total probability theorem can be applied using the conditional <a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PMF</a><a data-tooltip-position="top" aria-label="Probability Mass Function" data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PMF</a><br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/total-probability-theorem.html</link><guid isPermaLink="false">Glossary/Total Probability Theorem.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Transitive Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">relation</a><a data-tooltip-position="top" aria-label="Relation" data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">relation</a>  is transitive iff whenever both <a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordered pairs</a><a data-tooltip-position="top" aria-label="Ordered Pair" data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordered pairs</a> , then <br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/transitive-relation.html</link><guid isPermaLink="false">Glossary/Transitive Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Tree]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A tree is a <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graph</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graph</a> that has exactly one vertex with no in-edges (called the root) and no <a data-tooltip-position="top" aria-label="Cycle" data-href="Cycle" href="https://www.jayitha.github.io/Notes/Cycle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">undirected cycles</a><a data-tooltip-position="top" aria-label="Cycle" data-href="Cycle" href="https://www.jayitha.github.io/Notes/glossary/cycle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">undirected cycles</a><br>For each vertex , there is a unique <a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/Path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">proper path</a><a data-tooltip-position="top" aria-label="Path" data-href="Path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">proper path</a> from root to <br>A leaf is a vertex of a tree with no out-edges<br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
For each tree, there is a finite <a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">partial ordering</a><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">partial ordering</a> . If , then  is lower than  and connected by a line.<br>Properties<br>A tree is <a data-tooltip-position="top" aria-label="Connected Graph" data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/Connected Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">connected</a><a data-tooltip-position="top" aria-label="Connected Graph" data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/glossary/connected-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">connected</a> but not <a data-tooltip-position="top" aria-label="Connected Graph" data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/Connected Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">strongly connected</a><a data-tooltip-position="top" aria-label="Connected Graph" data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/glossary/connected-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">strongly connected</a><br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/tree.html</link><guid isPermaLink="false">Glossary/Tree.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Trichotomy]]></title><description><![CDATA[ 
 <br>
<br>The definition is unofficial
<br>A <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a>  defined over  is said to satisfy trichotomy if for every pair of elements , exactly one of three possibilities holds<br>
<br>
 and  or

<br>
 and  or

<br>


<br>
The interpretation of the <a data-tooltip-position="top" aria-label="Trichotomy > ^trioff" data-href="Trichotomy#^trioff" href="https://www.jayitha.github.io/Notes/Trichotomy#^trioff" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">official definition</a><a data-tooltip-position="top" aria-label="Trichotomy > ^trioff" data-href="Trichotomy#^trioff" href="https://www.jayitha.github.io/Notes/glossary/trichotomy.html#^trioff" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">official definition</a> of trichotomy is not straightforward. According to the literal interpretation, <a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">reflexive relations</a><a data-tooltip-position="top" aria-label="Reflexive Relation" data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">reflexive relations</a> cannot satisfy trichotomy (which is not the case). However, the three trichotomy conditions are supposed to be mutually exclusive.

<br>Properties<br>
<br>All relations that satisfy trichotomy are <a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">antisymmetric</a><a data-tooltip-position="top" aria-label="Symmetric Relation" data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">antisymmetric</a>
<br><br>
<br><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Symmetric Relation</a><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Symmetric Relation</a>
<br><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Reflexive Relation</a><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Reflexive Relation</a>
<br>Appendix<br>
OFFICIAL<br>
<a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A <a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">binary relation</a><a data-tooltip-position="top" aria-label="Binary Relation" data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">binary relation</a>  defined over  is said to satisfy trichotomy if for every pair of elements , exactly one of three possibilities holds

<br> or
<br> or
<br><br>


]]></description><link>https://www.jayitha.github.io/Notes/glossary/trichotomy.html</link><guid isPermaLink="false">Glossary/Trichotomy.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Turing Machine]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
Turing Machines provide classical formalization of computation<br>Like <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a>s except symbols can be overwritten rather than just read, the head can move in either direction and the amount of tape available is infinite<br>
<br>
TMs can also be viewed as <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptors</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptors</a> - <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> accepted by TM  is denoted by . On input <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">word</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">word</a> ,  halts in an acceptance state

<br>
TMs can also be generators of words - language generated by TM  is denoted by 

<br>
TMs can also be viewed as computing a function from input to output (<a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">computable function</a><a data-tooltip-position="top" aria-label="Computable" data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">computable function</a>)

<br>Properties<br>A <a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">language</a><a data-tooltip-position="top" aria-label="Language" data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">language</a> is  for some <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptor</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptor</a> TM  iff it is  for some generator TM <br><br>
<br><a data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Computable</a><a data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Computable</a>
<br><a data-href="Nondeterministic Turing Machine" href="https://www.jayitha.github.io/Notes/Nondeterministic Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Nondeterministic Turing Machine</a><a data-href="Nondeterministic Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Nondeterministic Turing Machine</a>
<br><a data-href="Recursively Enumerable Language" href="https://www.jayitha.github.io/Notes/Recursively Enumerable Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Recursively Enumerable Language</a><a data-href="Recursively Enumerable Language" href="https://www.jayitha.github.io/Notes/glossary/recursively-enumerable-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Recursively Enumerable Language</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/turing-machine.html</link><guid isPermaLink="false">Glossary/Turing Machine.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Two-Way Automata]]></title><description><![CDATA[ 
 <br><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abiteboul1995foundations</a><a data-href="abiteboul1995foundations" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abiteboul1995foundations</a><br>
A variant of the <a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">FSA</a><a data-tooltip-position="top" aria-label="Finite-State Automata" data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">FSA</a> that allows scanning the input back and forth any number of times<br>Does not change the <a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">acceptance</a><a data-tooltip-position="top" aria-label="Acceptance" data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">acceptance</a> powder of FSAs<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/two-way-automata.html</link><guid isPermaLink="false">Glossary/Two-Way Automata.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Unary Relation]]></title><description><![CDATA[ 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
A unary relation (<a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$1$-ary relation</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary relation</a>) on a set  is simply a subset of <br>Properties<br><br>
<br><a data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relation</a><a data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relation</a>
<br><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binary Relation</a><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binary Relation</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/unary-relation.html</link><guid isPermaLink="false">Glossary/Unary Relation.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Unbiased Coin from Biased Coin]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
How can you get unbiased outcomes ( for heads) from an unbiased coin ( for heads)<br>Flip the biased coin repeatedly until you get either an outcome of  or . A  outcome could correspond to , and a  outcome could correspond to .<br><br>You discard the events  and ]]></description><link>https://www.jayitha.github.io/Notes/glossary/unbiased-coin-from-biased-coin.html</link><guid isPermaLink="false">Glossary/Unbiased Coin from Biased Coin.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Union]]></title><description><![CDATA[ 
 <br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a> Where UNION uses set semantics, UNION ALL uses bag semantics (even duplicates show up in the query result)]]></description><link>https://www.jayitha.github.io/Notes/glossary/union.html</link><guid isPermaLink="false">Glossary/Union.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Union Bound]]></title><description><![CDATA[ 
 <br>?<br>
<a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/shalev2014understanding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shalev2014understanding</a><a data-href="shalev2014understanding" href="https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shalev2014understanding</a><br>
For any two sets  and  and distribution  we have<br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/union-bound.html</link><guid isPermaLink="false">Glossary/Union Bound.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Unstable Nearest Neighbor Query]]></title><description><![CDATA[ 
 <br><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beyer1999nearest</a><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beyer1999nearest</a><br>
A nearest neighbor query is unstable for a given  if the distance from the query point to most data points is less than  times the distance from the query point to its nearest neighbor<br>
<br>In many situations, for any fixed , as dimensionality increases, the probability that a query is unstable converges to 
]]></description><link>https://www.jayitha.github.io/Notes/glossary/unstable-nearest-neighbor-query.html</link><guid isPermaLink="false">Glossary/Unstable Nearest Neighbor Query.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">VA-File</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: <br>
Papers: [-]<br>
Tags: <br><a data-href="ooi2000indexing" href="https://www.jayitha.github.io/Notes/ooi2000indexing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ooi2000indexing</a><a data-href="ooi2000indexing" href="https://www.jayitha.github.io/Notes/literature-notes/ooi2000indexing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ooi2000indexing</a><br>
The performance of the VA-File is sensitive to the data distribution]]></description><link>https://www.jayitha.github.io/Notes/glossary/va-file.html</link><guid isPermaLink="false">Glossary/VA-File.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Variance]]></title><description><![CDATA[ 
 <br><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Literature Notes/bertsekas2008introduction</a><a data-href="Literature Notes/bertsekas2008introduction" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Literature Notes/bertsekas2008introduction</a><br>
The variance of a random variable  (denoted by ) is a measure of dispersion of random variable  around its <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Mean</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Mean</a>. The variance is the <a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Expected Value</a><a data-tooltip-position="top" aria-label="Expectation" data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Expected Value</a> of the random variable <br>
See also <a data-href="Standard Deviation" href="https://www.jayitha.github.io/Notes/Standard Deviation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Standard Deviation</a><a data-href="Standard Deviation" href="https://www.jayitha.github.io/Notes/glossary/standard-deviation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Standard Deviation</a><br>You can compute the variance using the <a data-href="Expected Value Rule" href="https://www.jayitha.github.io/Notes/Expected Value Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Expected Value Rule</a><a data-href="Expected Value Rule" href="https://www.jayitha.github.io/Notes/glossary/expected-value-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Expected Value Rule</a> (of a <a data-tooltip-position="top" aria-label="Discrete Random Variable" data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">discrete random variable</a><a data-tooltip-position="top" aria-label="Discrete Random Variable" data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">discrete random variable</a>)<br>
The variance can also be computed using <a data-href="Moments" href="https://www.jayitha.github.io/Notes/Moments" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Moments</a><a data-href="Moments" href="https://www.jayitha.github.io/Notes/glossary/moments.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Moments</a><br>
Let  be a random variable constructed as a linear function of random variable . For instance<br>
Where  and  are scalars. Then,<br>
The variance of a random variable  is the same as that of the zero-mean random variable <br>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/variance.html</link><guid isPermaLink="false">Glossary/Variance.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Vertex Map]]></title><description><![CDATA[ 
 <br><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/rajsbaum2014distributed" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rajsbaum2014distributed</a><a data-href="rajsbaum2014distributed" href="https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rajsbaum2014distributed</a><br>
Given two <a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graphs</a><a data-tooltip-position="top" aria-label="Graph" data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graphs</a>  and , a vertex map  carries each vertex of  to a vertex of ]]></description><link>https://www.jayitha.github.io/Notes/glossary/vertex-map.html</link><guid isPermaLink="false">Glossary/Vertex Map.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[<span class="dataview dataview-inline-query"><span data-tag-name="p" class="el-p">Virtualization</span></span>]]></title><description><![CDATA[ 
 <br><br>Aliases: <br>
Papers: [<a data-href="arpacidusseau2018operating" href="https://www.jayitha.github.io/Notes/arpacidusseau2018operating" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">arpacidusseau2018operating</a><a data-href="arpacidusseau2018operating" href="https://www.jayitha.github.io/Notes/literature-notes/arpacidusseau2018operating.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">arpacidusseau2018operating</a>]<br>
Tags: ]]></description><link>https://www.jayitha.github.io/Notes/glossary/virtualization.html</link><guid isPermaLink="false">Glossary/Virtualization.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Weak Law of Large Numbers]]></title><description><![CDATA[ 
 <br><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beyer1999nearest</a><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beyer1999nearest</a><br>Aside
See <a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/Converges in Probability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Converges in Probability</a><a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/glossary/converges-in-probability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Converges in Probability</a><br>
for definition of 
<br>Let  be <a data-tooltip-position="top" aria-label="Independent and Identically Distributed (IID)" data-href="Independent and Identically Distributed (IID)" href="https://www.jayitha.github.io/Notes/Independent and Identically Distributed (IID)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">IID</a><a data-tooltip-position="top" aria-label="Independent and Identically Distributed (IID)" data-href="Independent and Identically Distributed (IID)" href="https://www.jayitha.github.io/Notes/glossary/independent-and-identically-distributed-(iid).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">IID</a> random variables and  is finite, then<br>
<br>something<br>
some text<br>ok<br>Aside
Testing aside
<br>Slutsky's Theorem<br><br><br><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beyer1999nearest</a><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beyer1999nearest</a><br>
Let  be random vectors (of the same arity) and  be a continuous function. If   (i.e. <a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/Converges in Probability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Converges in Probability</a><a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/glossary/converges-in-probability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Converges in Probability</a>) and  is finite then <br>Related Corollaries:<br>If  and  are sequences of random variables s.t.  and , then <br>
<br>An idea!<a data-footref="[inline0" href="https://www.jayitha.github.io/Notes/about:blank#fn-1-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>
<br>Info
<br>Ooo danger!
<br>
<br>
<br><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beyer1999nearest</a><a data-href="beyer1999nearest" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beyer1999nearest</a><a href="https://www.jayitha.github.io/Notes/about:blank#fnref-1-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://www.jayitha.github.io/Notes/glossary/weak-law-of-large-numbers.html</link><guid isPermaLink="false">Glossary/Weak Law of Large Numbers.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Why are the Relational Modal and the Data Independence Principle Taught Together?]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br>Historically, it seems like when Codd presented the <a data-tooltip-position="top" aria-label="Relational Model" data-href="Relational Model" href="https://www.jayitha.github.io/Notes/Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relational Model</a><a data-tooltip-position="top" aria-label="Relational Model" data-href="Relational Model" href="https://www.jayitha.github.io/Notes/glossary/relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relational Model</a> he built it around the <a data-href="Data Independence Principle" href="https://www.jayitha.github.io/Notes/Data Independence Principle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Data Independence Principle</a><a data-href="Data Independence Principle" href="https://www.jayitha.github.io/Notes/glossary/data-independence-principle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Data Independence Principle</a>. While you could in theory use the data independence principle with the <a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/Hierarchical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hierarchical</a><a data-tooltip-position="top" aria-label="Hierarchical Model" data-href="Hierarchical Model" href="https://www.jayitha.github.io/Notes/glossary/hierarchical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hierarchical</a> and <a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/Network Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">network</a><a data-tooltip-position="top" aria-label="Network Model" data-href="Network Model" href="https://www.jayitha.github.io/Notes/glossary/network-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">network</a> models, their “definition” didn’t have any <a data-href="Abbreviations#DML" href="https://www.jayitha.github.io/Notes/Abbreviations#DML" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DML</a><a data-href="Abbreviations#DML" href="https://www.jayitha.github.io/Notes/abbreviations.html#DML" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DML</a>s or <a data-href="Abbreviations#DDL" href="https://www.jayitha.github.io/Notes/Abbreviations#DDL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">DDL</a><a data-href="Abbreviations#DDL" href="https://www.jayitha.github.io/Notes/abbreviations.html#DDL" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">DDL</a>s that supported a <a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/Logical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">logical layer</a><a data-tooltip-position="top" aria-label="Logical Model" data-href="Logical Model" href="https://www.jayitha.github.io/Notes/glossary/logical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">logical layer</a>. The previous models weren’t equipped with a tool to efficiently compile and optimize queries for the physical layer. The main contribution of the relational model seems to be towards <a data-href="Database Theory" href="https://www.jayitha.github.io/Notes/Database Theory" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Database Theory</a><a data-href="Database Theory" href="https://www.jayitha.github.io/Notes/glossary/database-theory.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Database Theory</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> I’d really like to see some examples of how systems struggled before the relational model and the data independence principal. The independence principle seems to have little to do with the relational model. Did the relational model only prove to be of theoretical use? How is Codd popularized with the relational model and not data independence which in my mind is the bigger of the two contributions? - From <a data-tooltip-position="top" aria-label="https://chatgpt.com/share/66f25833-4604-800a-a7b1-ad1397696d3f" rel="noopener nofollow" class="external-link" href="https://chatgpt.com/share/66f25833-4604-800a-a7b1-ad1397696d3f" target="_blank">ChatGPT</a>

<br>Lack of Data Independence - Before the introduction of the relational model, databases were tightly coupled with application logic. This meant that changes to the database structure required corresponding changes in the application code

<br><a data-href="gray1978notes" href="https://www.jayitha.github.io/Notes/gray1978notes" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gray1978notes</a><a data-href="gray1978notes" href="https://www.jayitha.github.io/Notes/literature-notes/gray1978notes.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gray1978notes</a> - touches on the difficulties of handling data with hierarchical structures and the lack of general-purpose query languages before the relational model.
<br><a data-href="bachman1969data" href="https://www.jayitha.github.io/Notes/bachman1969data" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bachman1969data</a><a data-href="bachman1969data" href="https://www.jayitha.github.io/Notes/literature-notes/bachman1969data.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bachman1969data</a> - describes the network model and highlights the challenge of managing complex linkages between data, which hindered flexibility.


<br>Rigid Data Structures (Hierarchical and Network Models) - Early database systems used fixed and inflexible data structures. For example, hierarchical databases (such as IMS) enforced strict parent-child relationships, and network models allowed complex many-to-many relationships that were difficult to query or modify

<br><a data-href="tsichritzis1978ansi" href="https://www.jayitha.github.io/Notes/tsichritzis1978ansi" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">tsichritzis1978ansi</a><a data-href="tsichritzis1978ansi" href="https://www.jayitha.github.io/Notes/literature-notes/tsichritzis1978ansi.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">tsichritzis1978ansi</a> - outlined issues with hierarchical and network models, explaining why data abstraction and independence were needed


<br>Limited Query Capabilities - Before Codd's relational model, there was no formal query language like SQL. Queries in hierarchical and network databases often required writing procedural code to traverse complex pointers or paths between records

<br><a data-href="bachman1969database" href="https://www.jayitha.github.io/Notes/bachman1969database" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bachman1969database</a><a data-href="bachman1969database" href="https://www.jayitha.github.io/Notes/literature-notes/bachman1969database.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bachman1969database</a> - This report from the creators of the network model reflects the procedural nature of data queries and how this contributed to the lack of ease-of-use compared to relational databases.


<br>Complexity of Data Modification - The pre-relational models involved complex pointers and links, making updates, deletions, and insertions difficult without affecting data integrity or requiring considerable manual work

<br><a data-href="bachman1973programmer" href="https://www.jayitha.github.io/Notes/bachman1973programmer" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bachman1973programmer</a><a data-href="bachman1973programmer" href="https://www.jayitha.github.io/Notes/literature-notes/bachman1973programmer.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bachman1973programmer</a> - This paper outlined how navigating complex data relationships and pointers could lead to errors and inefficiencies in database operations, particularly with updates.


<br>Data Redundancy and Anomalies - Early databases suffered from data redundancy, where the same piece of information was stored in multiple places. This could lead to anomalies during updates, insertions, or deletions (e.g., inconsistent data after partial updates).

<br><a data-href="codd1970relational" href="https://www.jayitha.github.io/Notes/codd1970relational" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">codd1970relational</a><a data-href="codd1970relational" href="https://www.jayitha.github.io/Notes/literature-notes/codd1970relational.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">codd1970relational</a> - While this is Codd's seminal paper introducing the relational model, it also describes the issues with redundancy and anomalies that motivated the shift from previous models




<br>Properties<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/why-are-the-relational-modal-and-the-data-independence-principle-taught-together/why-are-the-relational-modal-and-the-data-independence-principle-taught-together.html</link><guid isPermaLink="false">Glossary/Why are the Relational Modal and the Data Independence Principle Taught Together?.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[XRM]]></title><description><![CDATA[ 
 <br><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/chamberlin1981history" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chamberlin1981history</a><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1981history.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chamberlin1981history</a><br>A relational access method<br>Developed by R.Lorie at IBM's Cambridge Scientific Center<br>XRM stores relations in the form of "tuples" each of which has a unique 32-but "tuple identifier" (TID). TIDs store page pointers.<br>Tuples don't store data values directly but instead store pointers to the domains where data is stored<br><img alt="Source: chamberlin1981history" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240319130518.png"><br>Domain may additionally have inversions which associates a domain values with all the TIDs that take on the domain value. Therefore, if you query for a list of tuples that take on a domain value, you can access the inversion list for that domain value. <br>Inversion lists allow for TID-list processing where you can obtain the list of query-satisfying TIDs before tuples are fetched]]></description><link>https://www.jayitha.github.io/Notes/glossary/xrm.html</link><guid isPermaLink="false">Glossary/XRM.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240319130518.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240319130518.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Zorn's Lemma]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a><br>
Let  be a set with an <a data-tooltip-position="top" aria-label="Ordering Relation" data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/Ordering Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ordering relation</a><a data-tooltip-position="top" aria-label="Ordering Relation" data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/glossary/ordering-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ordering relation</a>  such that for any <a data-tooltip-position="top" aria-label="Chain" data-href="Chain" href="https://www.jayitha.github.io/Notes/Chain" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chain</a><a data-tooltip-position="top" aria-label="Chain" data-href="Chain" href="https://www.jayitha.github.io/Notes/glossary/chain.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chain</a> , the <a data-tooltip-position="top" aria-label="Chain" data-href="Chain" href="https://www.jayitha.github.io/Notes/Chain" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">upper bound</a><a data-tooltip-position="top" aria-label="Chain" data-href="Chain" href="https://www.jayitha.github.io/Notes/glossary/chain.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">upper bound</a> of  exists and is in . Then, there is some element  which is maximal i.e. for any element , either  or  and  are incomparable wrt <br>EXAMPLE<br>
Let  be a set of sets such that for any <a data-tooltip-position="top" aria-label="Chain" data-href="Chain" href="https://www.jayitha.github.io/Notes/Chain" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chain</a><a data-tooltip-position="top" aria-label="Chain" data-href="Chain" href="https://www.jayitha.github.io/Notes/glossary/chain.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chain</a> , the upper bound . Then, there is some element  which is maximal i.e. it is not a subset of any other element of 
<br>Properties<br>Equivalent to: <a data-href="Axiom of Choice (AC)" href="https://www.jayitha.github.io/Notes/Axiom of Choice (AC)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Axiom of Choice (AC)</a><a data-href="Axiom of Choice (AC)" href="https://www.jayitha.github.io/Notes/glossary/axiom-of-choice-(ac).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Axiom of Choice (AC)</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> How is Zorn’s Lemma related to the Axiom of Choice?
<br>]]></description><link>https://www.jayitha.github.io/Notes/glossary/zorn&apos;s-lemma.html</link><guid isPermaLink="false">Glossary/Zorn&apos;s Lemma.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 1 - Database Systems]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a data-href="Database System" href="https://www.jayitha.github.io/Notes/Database System" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Database System</a><a data-href="Database System" href="https://www.jayitha.github.io/Notes/glossary/database-system.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Database System</a><br>
<a data-href="Three-Level Architecture" href="https://www.jayitha.github.io/Notes/Three-Level Architecture" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Three-Level Architecture</a><a data-href="Three-Level Architecture" href="https://www.jayitha.github.io/Notes/glossary/three-level-architecture.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Three-Level Architecture</a><br>
<a data-href="Data Systems History" href="https://www.jayitha.github.io/Notes/Data Systems History" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Data Systems History</a><a data-href="Data Systems History" href="https://www.jayitha.github.io/Notes/glossary/data-systems-history.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Data Systems History</a><br>
<a data-href="Logical Model" href="https://www.jayitha.github.io/Notes/Logical Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Logical Model</a><a data-href="Logical Model" href="https://www.jayitha.github.io/Notes/glossary/logical-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Logical Model</a><br>
<a data-href="Relational Model" href="https://www.jayitha.github.io/Notes/Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relational Model</a><a data-href="Relational Model" href="https://www.jayitha.github.io/Notes/glossary/relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relational Model</a><br>
<a data-href="Data Independence Principle" href="https://www.jayitha.github.io/Notes/Data Independence Principle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Data Independence Principle</a><a data-href="Data Independence Principle" href="https://www.jayitha.github.io/Notes/glossary/data-independence-principle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Data Independence Principle</a><br>
<a data-href="Why are the Relational Modal and the Data Independence Principle Taught Together?" href="https://www.jayitha.github.io/Notes/Why are the Relational Modal and the Data Independence Principle Taught Together" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Why are the Relational Modal and the Data Independence Principle Taught Together?</a><a data-href="Why are the Relational Modal and the Data Independence Principle Taught Together?" href="https://www.jayitha.github.io/Notes/glossary/why-are-the-relational-modal-and-the-data-independence-principle-taught-together" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Why are the Relational Modal and the Data Independence Principle Taught Together?</a><br>
<a data-href="Functions of Database System" href="https://www.jayitha.github.io/Notes/Functions of Database System" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Functions of Database System</a><a data-href="Functions of Database System" href="https://www.jayitha.github.io/Notes/glossary/functions-of-database-system.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Functions of Database System</a><br>
<a data-href="Database Theory" href="https://www.jayitha.github.io/Notes/Database Theory" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Database Theory</a><a data-href="Database Theory" href="https://www.jayitha.github.io/Notes/glossary/database-theory.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Database Theory</a><br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> Bibliography!
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-1-database-systems.html</link><guid isPermaLink="false">Literature Notes/abiteboul1995foundations/Chapter 1 - Database Systems.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 2 - Theoretical Background]]></title><description><![CDATA[ 
 <br>
<br><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binary Relation</a><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binary Relation</a>
<br><a data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">n-ary Relation</a><a data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">n-ary Relation</a>
<br><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Reflexive Relation</a><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Reflexive Relation</a>
<br><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Symmetric Relation</a><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Symmetric Relation</a>
<br><a data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Transitive Relation</a><a data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Transitive Relation</a>
<br><a data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Equivalence Relation</a><a data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Equivalence Relation</a>
<br><a data-href="Equivalence Class" href="https://www.jayitha.github.io/Notes/Equivalence Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Equivalence Class</a><a data-href="Equivalence Class" href="https://www.jayitha.github.io/Notes/glossary/equivalence-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Equivalence Class</a>
<br><a data-href="Partition" href="https://www.jayitha.github.io/Notes/Partition" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Partition</a><a data-href="Partition" href="https://www.jayitha.github.io/Notes/glossary/partition.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Partition</a>
<br><a data-href="Refinement" href="https://www.jayitha.github.io/Notes/Refinement" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Refinement</a><a data-href="Refinement" href="https://www.jayitha.github.io/Notes/glossary/refinement.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Refinement</a>
<br><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/Partial Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Partially Ordered Set</a><a data-tooltip-position="top" aria-label="Partial Order" data-href="Partial Order" href="https://www.jayitha.github.io/Notes/glossary/partial-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Partially Ordered Set</a>
<br><a data-href="Total Order" href="https://www.jayitha.github.io/Notes/Total Order" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Order</a><a data-href="Total Order" href="https://www.jayitha.github.io/Notes/glossary/total-order.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Order</a>
<br><a data-href="Topological Sort" href="https://www.jayitha.github.io/Notes/Topological Sort" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Topological Sort</a><a data-href="Topological Sort" href="https://www.jayitha.github.io/Notes/glossary/topological-sort.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Topological Sort</a>
<br><a data-href="P-Closure" href="https://www.jayitha.github.io/Notes/P-Closure" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">P-Closure</a><a data-href="P-Closure" href="https://www.jayitha.github.io/Notes/glossary/p-closure.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">P-Closure</a>
<br><a data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Graph</a><a data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Graph</a>
<br><a data-href="Path" href="https://www.jayitha.github.io/Notes/Path" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Path</a><a data-href="Path" href="https://www.jayitha.github.io/Notes/glossary/path.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Path</a>
<br><a data-href="Cycle" href="https://www.jayitha.github.io/Notes/Cycle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Cycle</a><a data-href="Cycle" href="https://www.jayitha.github.io/Notes/glossary/cycle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Cycle</a>
<br><a data-href="Acyclic Graph" href="https://www.jayitha.github.io/Notes/Acyclic Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Acyclic Graph</a><a data-href="Acyclic Graph" href="https://www.jayitha.github.io/Notes/glossary/acyclic-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Acyclic Graph</a>
<br><a data-href="Connectedness" href="https://www.jayitha.github.io/Notes/Connectedness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Connectedness</a><a data-href="Connectedness" href="https://www.jayitha.github.io/Notes/glossary/connectedness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Connectedness</a>
<br><a data-href="Connected Component" href="https://www.jayitha.github.io/Notes/Connected Component" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Connected Component</a><a data-href="Connected Component" href="https://www.jayitha.github.io/Notes/glossary/connected-component.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Connected Component</a>
<br><a data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/Connected Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Connected Graph</a><a data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/glossary/connected-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Connected Graph</a>
<br><a data-href="Distance" href="https://www.jayitha.github.io/Notes/Distance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Distance</a><a data-href="Distance" href="https://www.jayitha.github.io/Notes/glossary/distance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Distance</a>
<br><a data-href="Diameter" href="https://www.jayitha.github.io/Notes/Diameter" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Diameter</a><a data-href="Diameter" href="https://www.jayitha.github.io/Notes/glossary/diameter.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Diameter</a>
<br><a data-href="Tree" href="https://www.jayitha.github.io/Notes/Tree" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Tree</a><a data-href="Tree" href="https://www.jayitha.github.io/Notes/glossary/tree.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Tree</a>
<br><a data-href="Forest" href="https://www.jayitha.github.io/Notes/Forest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Forest</a><a data-href="Forest" href="https://www.jayitha.github.io/Notes/glossary/forest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Forest</a>
<br><a data-href="Labeling" href="https://www.jayitha.github.io/Notes/Labeling" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Labeling</a><a data-href="Labeling" href="https://www.jayitha.github.io/Notes/glossary/labeling.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Labeling</a>
<br><a data-href="Homomorphism" href="https://www.jayitha.github.io/Notes/Homomorphism" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Homomorphism</a><a data-href="Homomorphism" href="https://www.jayitha.github.io/Notes/glossary/homomorphism.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Homomorphism</a>
<br><a data-href="Isomorphism" href="https://www.jayitha.github.io/Notes/Isomorphism" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Isomorphism</a><a data-href="Isomorphism" href="https://www.jayitha.github.io/Notes/glossary/isomorphism.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Isomorphism</a>
<br><a data-href="Automorphism" href="https://www.jayitha.github.io/Notes/Automorphism" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Automorphism</a><a data-href="Automorphism" href="https://www.jayitha.github.io/Notes/glossary/automorphism.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Automorphism</a>
<br><a data-href="Permutation" href="https://www.jayitha.github.io/Notes/Permutation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Permutation</a><a data-href="Permutation" href="https://www.jayitha.github.io/Notes/glossary/permutation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Permutation</a>
<br><a data-href="Derived Permutation" href="https://www.jayitha.github.io/Notes/Derived Permutation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Derived Permutation</a><a data-href="Derived Permutation" href="https://www.jayitha.github.io/Notes/glossary/derived-permutation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Derived Permutation</a>
<br><a data-href="Language" href="https://www.jayitha.github.io/Notes/Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Language</a><a data-href="Language" href="https://www.jayitha.github.io/Notes/glossary/language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Language</a>
<br><a data-href="Concatenation" href="https://www.jayitha.github.io/Notes/Concatenation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Concatenation</a><a data-href="Concatenation" href="https://www.jayitha.github.io/Notes/glossary/concatenation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Concatenation</a>
<br><a data-href="Acceptance" href="https://www.jayitha.github.io/Notes/Acceptance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Acceptance</a><a data-href="Acceptance" href="https://www.jayitha.github.io/Notes/glossary/acceptance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Acceptance</a>
<br><a data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Finite-State Automata</a><a data-href="Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Finite-State Automata</a>
<br><a data-href="Regular Language" href="https://www.jayitha.github.io/Notes/Regular Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Regular Language</a><a data-href="Regular Language" href="https://www.jayitha.github.io/Notes/glossary/regular-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Regular Language</a>
<br><a data-href="Pumping Lemma" href="https://www.jayitha.github.io/Notes/Pumping Lemma" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pumping Lemma</a><a data-href="Pumping Lemma" href="https://www.jayitha.github.io/Notes/glossary/pumping-lemma.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pumping Lemma</a>
<br><a data-href="Regular Expression" href="https://www.jayitha.github.io/Notes/Regular Expression" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Regular Expression</a><a data-href="Regular Expression" href="https://www.jayitha.github.io/Notes/glossary/regular-expression.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Regular Expression</a>
<br><a data-href="Kleene's Theorem" href="https://www.jayitha.github.io/Notes/Kleene's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Kleene's Theorem</a><a data-href="Kleene's Theorem" href="https://www.jayitha.github.io/Notes/glossary/kleene's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Kleene's Theorem</a>
<br><a data-href="Two-Way Automata" href="https://www.jayitha.github.io/Notes/Two-Way Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Two-Way Automata</a><a data-href="Two-Way Automata" href="https://www.jayitha.github.io/Notes/glossary/two-way-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Two-Way Automata</a>
<br><a data-href="Nondeterministic Finite-State Automata" href="https://www.jayitha.github.io/Notes/Nondeterministic Finite-State Automata" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Nondeterministic Finite-State Automata</a><a data-href="Nondeterministic Finite-State Automata" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-finite-state-automata.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Nondeterministic Finite-State Automata</a>
<br><a data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Turing Machine</a><a data-href="Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Turing Machine</a>
<br><a data-href="Computable" href="https://www.jayitha.github.io/Notes/Computable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Computable</a><a data-href="Computable" href="https://www.jayitha.github.io/Notes/glossary/computable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Computable</a>
<br><a data-href="Nondeterministic Turing Machine" href="https://www.jayitha.github.io/Notes/Nondeterministic Turing Machine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Nondeterministic Turing Machine</a><a data-href="Nondeterministic Turing Machine" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-turing-machine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Nondeterministic Turing Machine</a>
<br><a data-href="Recursively Enumerable Language" href="https://www.jayitha.github.io/Notes/Recursively Enumerable Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Recursively Enumerable Language</a><a data-href="Recursively Enumerable Language" href="https://www.jayitha.github.io/Notes/glossary/recursively-enumerable-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Recursively Enumerable Language</a>
<br><a data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/Recursive Language" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Recursive Language</a><a data-href="Recursive Language" href="https://www.jayitha.github.io/Notes/glossary/recursive-language.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Recursive Language</a>
<br><a data-href="Decidable" href="https://www.jayitha.github.io/Notes/Decidable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Decidable</a><a data-href="Decidable" href="https://www.jayitha.github.io/Notes/glossary/decidable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Decidable</a>
<br><a data-href="The Halting Problem" href="https://www.jayitha.github.io/Notes/The Halting Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Halting Problem</a><a data-href="The Halting Problem" href="https://www.jayitha.github.io/Notes/glossary/the-halting-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Halting Problem</a>
<br><a data-href="Rice's Theorem" href="https://www.jayitha.github.io/Notes/Rice's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rice's Theorem</a><a data-href="Rice's Theorem" href="https://www.jayitha.github.io/Notes/glossary/rice's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rice's Theorem</a>
<br><a data-href="The Post Correspondence Problem" href="https://www.jayitha.github.io/Notes/The Post Correspondence Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Post Correspondence Problem</a><a data-href="The Post Correspondence Problem" href="https://www.jayitha.github.io/Notes/glossary/the-post-correspondence-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Post Correspondence Problem</a>
<br><a data-href="Reduction" href="https://www.jayitha.github.io/Notes/Reduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Reduction</a><a data-href="Reduction" href="https://www.jayitha.github.io/Notes/glossary/reduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Reduction</a>
<br><a data-href="Complexity" href="https://www.jayitha.github.io/Notes/Complexity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Complexity</a><a data-href="Complexity" href="https://www.jayitha.github.io/Notes/glossary/complexity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Complexity</a>
<br><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PTIME$</a><a data-tooltip-position="top" aria-label="Polynomial Time Complexity Class" data-href="Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$PSPACE$</a><a data-tooltip-position="top" aria-label="Polynomial Space Complexity Class" data-href="Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Log Space Complexity Class" data-href="Log Space Complexity Class" href="https://www.jayitha.github.io/Notes/Log Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$LOGSPACE$</a><a data-tooltip-position="top" aria-label="Log Space Complexity Class" data-href="Log Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/log-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Elementary Functions" data-href="Elementary Functions" href="https://www.jayitha.github.io/Notes/Elementary Functions" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$Hyp$</a><a data-tooltip-position="top" aria-label="Elementary Functions" data-href="Elementary Functions" href="https://www.jayitha.github.io/Notes/glossary/elementary-functions.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Elementary Languages" data-href="Elementary Languages" href="https://www.jayitha.github.io/Notes/Elementary Languages" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Elementary Languages ($TIME(Hyp)$)</a><a data-tooltip-position="top" aria-label="Elementary Languages" data-href="Elementary Languages" href="https://www.jayitha.github.io/Notes/glossary/elementary-languages.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Elementary Languages ()</a> 
<br><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Time Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NP$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Time Complexity Class" data-href="Nondeterministic Polynomial Time Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-time-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/Nondeterministic Polynomial Space Complexity Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$NPSPACE$</a><a data-tooltip-position="top" aria-label="Nondeterministic Polynomial Space Complexity Class" data-href="Nondeterministic Polynomial Space Complexity Class" href="https://www.jayitha.github.io/Notes/glossary/nondeterministic-polynomial-space-complexity-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow"></a>
<br><a data-href="Savitch's Theorem" href="https://www.jayitha.github.io/Notes/Savitch's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Savitch's Theorem</a><a data-href="Savitch's Theorem" href="https://www.jayitha.github.io/Notes/glossary/savitch's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Savitch's Theorem</a>
<br><a data-href="Completeness" href="https://www.jayitha.github.io/Notes/Completeness" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Completeness</a><a data-href="Completeness" href="https://www.jayitha.github.io/Notes/glossary/completeness.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Completeness</a>
<br><a data-tooltip-position="top" aria-label="The 3-Satisfiability Problem" data-href="The 3-Satisfiability Problem" href="https://www.jayitha.github.io/Notes/The 3-Satisfiability Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">3-SAT</a><a data-tooltip-position="top" aria-label="The 3-Satisfiability Problem" data-href="The 3-Satisfiability Problem" href="https://www.jayitha.github.io/Notes/glossary/the-3-satisfiability-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">3-SAT</a>
<br><a data-tooltip-position="top" aria-label="The Quantified Satisfiability Problem" data-href="The Quantified Satisfiability Problem" href="https://www.jayitha.github.io/Notes/The Quantified Satisfiability Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">QSAT</a><a data-tooltip-position="top" aria-label="The Quantified Satisfiability Problem" data-href="The Quantified Satisfiability Problem" href="https://www.jayitha.github.io/Notes/glossary/the-quantified-satisfiability-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">QSAT</a>
<br><a data-tooltip-position="top" aria-label="Context-Free Grammar" data-href="Context-Free Grammar" href="https://www.jayitha.github.io/Notes/Context-Free Grammar" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">CFG</a><a data-tooltip-position="top" aria-label="Context-Free Grammar" data-href="Context-Free Grammar" href="https://www.jayitha.github.io/Notes/glossary/context-free-grammar.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">CFG</a>
<br><a data-href="The Emptiness Problem" href="https://www.jayitha.github.io/Notes/The Emptiness Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Emptiness Problem</a><a data-href="The Emptiness Problem" href="https://www.jayitha.github.io/Notes/glossary/the-emptiness-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Emptiness Problem</a>
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-2-theoretical-background.html</link><guid isPermaLink="false">Literature Notes/abiteboul1995foundations/Chapter 2 - Theoretical Background.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 3 - The Relational Model]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-3-the-relational-model.html</link><guid isPermaLink="false">Literature Notes/abiteboul1995foundations/Chapter 3 - The Relational Model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 4 - Conjunctive Queries]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-4-conjunctive-queries.html</link><guid isPermaLink="false">Literature Notes/abiteboul1995foundations/Chapter 4 - Conjunctive Queries.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Foundations of Databases]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="Chapter 1 - Database Systems" href="https://www.jayitha.github.io/Notes/Chapter 1 - Database Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 1 - Database Systems</a><a data-href="Chapter 1 - Database Systems" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-1-database-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 1 - Database Systems</a>
<br><a data-href="Chapter 2 - Theoretical Background" href="https://www.jayitha.github.io/Notes/Chapter 2 - Theoretical Background" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 2 - Theoretical Background</a><a data-href="Chapter 2 - Theoretical Background" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-2-theoretical-background.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 2 - Theoretical Background</a>
<br><a data-href="Chapter 3 - The Relational Model" href="https://www.jayitha.github.io/Notes/Chapter 3 - The Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 3 - The Relational Model</a><a data-href="Chapter 3 - The Relational Model" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-3-the-relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 3 - The Relational Model</a>
<br><a data-href="Chapter 4 - Conjunctive Queries" href="https://www.jayitha.github.io/Notes/Chapter 4 - Conjunctive Queries" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 4 - Conjunctive Queries</a><a data-href="Chapter 4 - Conjunctive Queries" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/chapter-4-conjunctive-queries.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 4 - Conjunctive Queries</a>
<br>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/abiteboul1995foundations.html</link><guid isPermaLink="false">Literature Notes/abiteboul1995foundations/abiteboul1995foundations.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A Mathematical Introduction to Logic]]></title><description><![CDATA[ 
 <br>
(<a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=12&amp;selection=2,0,4,7" data-href="enderton2001mathematical.pdf#page=12&amp;selection=2,0,4,7" href="https://www.jayitha.github.io/Notes/enderton2001mathematical.pdf#page=12&amp;selection=2,0,4,7" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical, p.xi</a><a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=12&amp;selection=2,0,4,7" data-href="enderton2001mathematical.pdf#page=12&amp;selection=2,0,4,7" href="https://www.jayitha.github.io/Notes/papers/enderton2001mathematical.pdf#page=12&amp;selection=2,0,4,7" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical, p.xi</a>)<br>
Symbolic logic is a mathematical model of deductive thought
<br>
(<a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=13&amp;selection=10,0,11,22" data-href="enderton2001mathematical.pdf#page=13&amp;selection=10,0,11,22" href="https://www.jayitha.github.io/Notes/enderton2001mathematical.pdf#page=13&amp;selection=10,0,11,22" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical, p.xii</a><a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=13&amp;selection=10,0,11,22" data-href="enderton2001mathematical.pdf#page=13&amp;selection=10,0,11,22" href="https://www.jayitha.github.io/Notes/papers/enderton2001mathematical.pdf#page=13&amp;selection=10,0,11,22" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical, p.xii</a>)<br>
The logical correctness of these deductions is due to their form but is independent of their content.
<br><a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=13&amp;selection=21,0,31,58&amp;color=red" data-href="enderton2001mathematical.pdf#page=13&amp;selection=21,0,31,58&amp;color=red" href="https://www.jayitha.github.io/Notes/enderton2001mathematical.pdf#page=13&amp;selection=21,0,31,58&amp;color=red" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical, p.xii</a><a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=13&amp;selection=21,0,31,58&amp;color=red" data-href="enderton2001mathematical.pdf#page=13&amp;selection=21,0,31,58&amp;color=red" href="https://www.jayitha.github.io/Notes/papers/enderton2001mathematical.pdf#page=13&amp;selection=21,0,31,58&amp;color=red" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical, p.xii</a>

<br>Is there a gap between what we can prove in an axiomatic system (say for the natural numbers) and what is true about the natural numbers? 
<br>What is the connection between logic and computability?

<br>
(<a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=13&amp;selection=159,0,161,19" data-href="enderton2001mathematical.pdf#page=13&amp;selection=159,0,161,19" href="https://www.jayitha.github.io/Notes/enderton2001mathematical.pdf#page=13&amp;selection=159,0,161,19" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical, p.xii</a><a data-tooltip-position="top" aria-label="enderton2001mathematical.pdf > page=13&amp;selection=159,0,161,19" data-href="enderton2001mathematical.pdf#page=13&amp;selection=159,0,161,19" href="https://www.jayitha.github.io/Notes/papers/enderton2001mathematical.pdf#page=13&amp;selection=159,0,161,19" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical, p.xii</a>)<br>
This book does not propose to teach the reader how to think. The word “logic” is sometimes used to refer to remedial thinking, but not by us. The reader already knows how to think.
<br><br>
<br><a data-href="Chapter 0 - Useful Facts about Sets" href="https://www.jayitha.github.io/Notes/Chapter 0 - Useful Facts about Sets" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 0 - Useful Facts about Sets</a><a data-href="Chapter 0 - Useful Facts about Sets" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-0-useful-facts-about-sets.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 0 - Useful Facts about Sets</a>
<br><a data-href="Chapter 1 - Sentential Logic" href="https://www.jayitha.github.io/Notes/Chapter 1 - Sentential Logic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 1 - Sentential Logic</a><a data-href="Chapter 1 - Sentential Logic" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-1-sentential-logic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 1 - Sentential Logic</a>
<br><a data-href="Chapter 2 - First-Order Logic" href="https://www.jayitha.github.io/Notes/Chapter 2 - First-Order Logic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 2 - First-Order Logic</a><a data-href="Chapter 2 - First-Order Logic" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-2-first-order-logic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 2 - First-Order Logic</a>
<br><a data-href="Chapter 3 - Undecidability" href="https://www.jayitha.github.io/Notes/Chapter 3 - Undecidability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 3 - Undecidability</a><a data-href="Chapter 3 - Undecidability" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-3-undecidability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 3 - Undecidability</a>
<br><a data-href="Chapter 4 - Second-Order Logic" href="https://www.jayitha.github.io/Notes/Chapter 4 - Second-Order Logic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chapter 4 - Second-Order Logic</a><a data-href="Chapter 4 - Second-Order Logic" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-4-second-order-logic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chapter 4 - Second-Order Logic</a>
<br>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html</link><guid isPermaLink="false">Literature Notes/enderton2001mathematical/enderton2001mathematical.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 0 - Useful Facts about Sets]]></title><description><![CDATA[ 
 <br>
<br><a data-href="Principle of Extensionality" href="https://www.jayitha.github.io/Notes/Principle of Extensionality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Principle of Extensionality</a><a data-href="Principle of Extensionality" href="https://www.jayitha.github.io/Notes/glossary/principle-of-extensionality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Principle of Extensionality</a>
<br><a data-href="Pairwise Disjoint" href="https://www.jayitha.github.io/Notes/Pairwise Disjoint" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pairwise Disjoint</a><a data-href="Pairwise Disjoint" href="https://www.jayitha.github.io/Notes/glossary/pairwise-disjoint.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pairwise Disjoint</a>
<br><a data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/Ordered Pair" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Ordered Pair</a><a data-href="Ordered Pair" href="https://www.jayitha.github.io/Notes/glossary/ordered-pair.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Ordered Pair</a>
<br><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/n-Tuple" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-tuple</a><a data-tooltip-position="top" aria-label="n-Tuple" data-href="n-Tuple" href="https://www.jayitha.github.io/Notes/glossary/n-tuple.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-tuple</a>
<br><a data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/Finite Sequence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Finite Sequence</a><a data-href="Finite Sequence" href="https://www.jayitha.github.io/Notes/glossary/finite-sequence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Finite Sequence</a>
<br><a data-href="Segment" href="https://www.jayitha.github.io/Notes/Segment" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Segment</a><a data-href="Segment" href="https://www.jayitha.github.io/Notes/glossary/segment.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Segment</a>
<br><a data-href="Relation" href="https://www.jayitha.github.io/Notes/Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relation</a><a data-href="Relation" href="https://www.jayitha.github.io/Notes/glossary/relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relation</a>
<br><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/n-ary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-ary Relation</a><a data-tooltip-position="top" aria-label="n-ary Relation" data-href="n-ary Relation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary Relation</a>
<br><a data-href="Unary Relation" href="https://www.jayitha.github.io/Notes/Unary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unary Relation</a><a data-href="Unary Relation" href="https://www.jayitha.github.io/Notes/glossary/unary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unary Relation</a>
<br><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/Binary Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binary Relation</a><a data-href="Binary Relation" href="https://www.jayitha.github.io/Notes/glossary/binary-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binary Relation</a>
<br><a data-href="Restriction" href="https://www.jayitha.github.io/Notes/Restriction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Restriction</a><a data-href="Restriction" href="https://www.jayitha.github.io/Notes/glossary/restriction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Restriction</a>
<br><a data-href="Function" href="https://www.jayitha.github.io/Notes/Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Function</a><a data-href="Function" href="https://www.jayitha.github.io/Notes/glossary/function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Function</a>
<br><a data-href="Onto Function" href="https://www.jayitha.github.io/Notes/Onto Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Onto Function</a><a data-href="Onto Function" href="https://www.jayitha.github.io/Notes/glossary/onto-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Onto Function</a>
<br><a data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/One-to-One Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">One-to-One Function</a><a data-href="One-to-One Function" href="https://www.jayitha.github.io/Notes/glossary/one-to-one-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">One-to-One Function</a>
<br><a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/n-ary Operation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">$n$-ary Operation</a><a data-tooltip-position="top" aria-label="n-ary Operation" data-href="n-ary Operation" href="https://www.jayitha.github.io/Notes/glossary/n-ary-operation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">-ary Operation</a>
<br><a data-href="Identity Function" href="https://www.jayitha.github.io/Notes/Identity Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Identity Function</a><a data-href="Identity Function" href="https://www.jayitha.github.io/Notes/glossary/identity-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Identity Function</a>
<br><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/Reflexive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Reflexive Relation</a><a data-href="Reflexive Relation" href="https://www.jayitha.github.io/Notes/glossary/reflexive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Reflexive Relation</a>
<br><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/Symmetric Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Symmetric Relation</a><a data-href="Symmetric Relation" href="https://www.jayitha.github.io/Notes/glossary/symmetric-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Symmetric Relation</a>
<br><a data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/Transitive Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Transitive Relation</a><a data-href="Transitive Relation" href="https://www.jayitha.github.io/Notes/glossary/transitive-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Transitive Relation</a>
<br><a data-href="Trichotomy" href="https://www.jayitha.github.io/Notes/Trichotomy" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Trichotomy</a><a data-href="Trichotomy" href="https://www.jayitha.github.io/Notes/glossary/trichotomy.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Trichotomy</a>
<br><a data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/Equivalence Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Equivalence Relation</a><a data-href="Equivalence Relation" href="https://www.jayitha.github.io/Notes/glossary/equivalence-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Equivalence Relation</a>
<br><a data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/Ordering Relation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Ordering Relation</a><a data-href="Ordering Relation" href="https://www.jayitha.github.io/Notes/glossary/ordering-relation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Ordering Relation</a>
<br><a data-href="Equivalence Class" href="https://www.jayitha.github.io/Notes/Equivalence Class" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Equivalence Class</a><a data-href="Equivalence Class" href="https://www.jayitha.github.io/Notes/glossary/equivalence-class.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Equivalence Class</a>
<br><a data-href="Partition" href="https://www.jayitha.github.io/Notes/Partition" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Partition</a><a data-href="Partition" href="https://www.jayitha.github.io/Notes/glossary/partition.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Partition</a>
<br><a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/Natural Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Natural Numbers ($\N$)</a><a data-tooltip-position="top" aria-label="Natural Numbers" data-href="Natural Numbers" href="https://www.jayitha.github.io/Notes/glossary/natural-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Natural Numbers ()</a>
<br><a data-tooltip-position="top" aria-label="Finite" data-href="Finite" href="https://www.jayitha.github.io/Notes/Finite" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Finite Set</a><a data-tooltip-position="top" aria-label="Finite" data-href="Finite" href="https://www.jayitha.github.io/Notes/glossary/finite.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Finite Set</a>
<br><a data-tooltip-position="top" aria-label="Countable" data-href="Countable" href="https://www.jayitha.github.io/Notes/Countable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Countable Set</a><a data-tooltip-position="top" aria-label="Countable" data-href="Countable" href="https://www.jayitha.github.io/Notes/glossary/countable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Countable Set</a>
<br><a data-href="Tree" href="https://www.jayitha.github.io/Notes/Tree" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Tree</a><a data-href="Tree" href="https://www.jayitha.github.io/Notes/glossary/tree.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Tree</a>
<br><a data-href="Axiom of Choice (AC)" href="https://www.jayitha.github.io/Notes/Axiom of Choice (AC)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Axiom of Choice (AC)</a><a data-href="Axiom of Choice (AC)" href="https://www.jayitha.github.io/Notes/glossary/axiom-of-choice-(ac).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Axiom of Choice (AC)</a>
<br><a data-href="Chain" href="https://www.jayitha.github.io/Notes/Chain" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chain</a><a data-href="Chain" href="https://www.jayitha.github.io/Notes/glossary/chain.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chain</a>
<br><a data-href="Zorn's Lemma" href="https://www.jayitha.github.io/Notes/Zorn's Lemma" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Zorn's Lemma</a><a data-href="Zorn's Lemma" href="https://www.jayitha.github.io/Notes/glossary/zorn's-lemma.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Zorn's Lemma</a>
<br><a data-href="Equinumerosity" href="https://www.jayitha.github.io/Notes/Equinumerosity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Equinumerosity</a><a data-href="Equinumerosity" href="https://www.jayitha.github.io/Notes/glossary/equinumerosity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Equinumerosity</a>
<br><a data-tooltip-position="top" aria-label="Integer Numbers" data-href="Integer Numbers" href="https://www.jayitha.github.io/Notes/Integer Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Integer Numbers ($\Z$)</a><a data-tooltip-position="top" aria-label="Integer Numbers" data-href="Integer Numbers" href="https://www.jayitha.github.io/Notes/glossary/integer-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Integer Numbers ()</a>
<br><a data-tooltip-position="top" aria-label="Cardinality" data-href="Cardinality" href="https://www.jayitha.github.io/Notes/Cardinality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Cardinality ($card$)</a><a data-tooltip-position="top" aria-label="Cardinality" data-href="Cardinality" href="https://www.jayitha.github.io/Notes/glossary/cardinality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Cardinality ()</a>
<br>
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-0-useful-facts-about-sets.html</link><guid isPermaLink="false">Literature Notes/enderton2001mathematical/Chapter 0 - Useful Facts about Sets.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 1 - Sentential Logic]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-1-sentential-logic.html</link><guid isPermaLink="false">Literature Notes/enderton2001mathematical/Chapter 1 - Sentential Logic.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 2 - First-Order Logic]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-2-first-order-logic.html</link><guid isPermaLink="false">Literature Notes/enderton2001mathematical/Chapter 2 - First-Order Logic.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 3 - Undecidability]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-3-undecidability.html</link><guid isPermaLink="false">Literature Notes/enderton2001mathematical/Chapter 3 - Undecidability.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chapter 4 - Second-Order Logic]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/chapter-4-second-order-logic.html</link><guid isPermaLink="false">Literature Notes/enderton2001mathematical/Chapter 4 - Second-Order Logic.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[{F2FS}: A new file system for flash storage]]></title><description><![CDATA[ 
 <br><br>Changman Lee, Dongho Sim, Jooyoung Hwang, Sangyeun Cho (2015)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Changman-Lee" class="tag" target="_blank" rel="noopener nofollow">#Changman-Lee</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Dongho-Sim" class="tag" target="_blank" rel="noopener nofollow">#Dongho-Sim</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jooyoung-Hwang" class="tag" target="_blank" rel="noopener nofollow">#Jooyoung-Hwang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sangyeun-Cho" class="tag" target="_blank" rel="noopener nofollow">#Sangyeun-Cho</a><br>Abstract
F2FS is a Linux file system designed to perform well on modern flash storage devices. The file system builds on append-only logging and its key design decisions were made with the characteristics of flash storage in mind. This paper describes the main design ideas, data structures, algorithms and the resulting performance of F2FS. Experimental results highlight the desirable performance of F2FS; on a state-of-the-art mobile system, it outperforms EXT4 under synthetic workloads by up to 3.1 (iozone) and 2 (SQLite). It reduces elapsed time of several realistic workloads by up to 40%. On a server system, F2FS is shown to perform better than EXT4 by up to 2.5 (SATA SSD) and 1.8 (PCIe SSD).
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lee2015f2fs.html</link><guid isPermaLink="false">Literature Notes/lee2015f2fs.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A case for redundant arrays of inexpensive disks (RAID)]]></title><description><![CDATA[ 
 <br><br>David A Patterson, Garth Gibson, Randy H Katz (1988)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David" class="tag" target="_blank" rel="noopener nofollow">#David</a> <a href="https://www.jayitha.github.io/Notes?query=tag:A-Patterson" class="tag" target="_blank" rel="noopener nofollow">#A-Patterson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Garth-Gibson" class="tag" target="_blank" rel="noopener nofollow">#Garth-Gibson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Randy" class="tag" target="_blank" rel="noopener nofollow">#Randy</a> <a href="https://www.jayitha.github.io/Notes?query=tag:H-Katz" class="tag" target="_blank" rel="noopener nofollow">#H-Katz</a><br>Abstract
Increasing performance of CPUs and memories will be squandered if not matched by a similar performance increase in I/O. While the capacity of Single Large Expensive Disks (SLED) has grown rapidly, the performance improvement of SLED has been modest. Redundant Arrays of Inexpensive Disks (RAID), based on the magnetic disk technology developed for personal computers, offers an attractive alternative to SLED, promising improvements of an order of magnitude in performance, reliability, power consumption, and scalability. This paper introduces five levels of RAIDs, giving their relative cost/performance, and compares RAID to an IBM 3380 and a Fujitsu Super Eagle.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/patterson1988case.html</link><guid isPermaLink="false">Literature Notes/patterson1988case.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A comparison of approaches to large-scale data analysis]]></title><description><![CDATA[ 
 <br><br>Andrew Pavlo, Erik Paulson, Alexander Rasin, Daniel J Abadi, David J DeWitt, Samuel Madden, Michael Stonebraker (2009)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Pavlo" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Pavlo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Erik-Paulson" class="tag" target="_blank" rel="noopener nofollow">#Erik-Paulson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alexander-Rasin" class="tag" target="_blank" rel="noopener nofollow">#Alexander-Rasin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel" class="tag" target="_blank" rel="noopener nofollow">#Daniel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Abadi" class="tag" target="_blank" rel="noopener nofollow">#J-Abadi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David" class="tag" target="_blank" rel="noopener nofollow">#David</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-DeWitt" class="tag" target="_blank" rel="noopener nofollow">#J-DeWitt</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Samuel-Madden" class="tag" target="_blank" rel="noopener nofollow">#Samuel-Madden</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Stonebraker" class="tag" target="_blank" rel="noopener nofollow">#Michael-Stonebraker</a><br>Abstract
There is currently considerable enthusiasm around the MapReduce (MR) paradigm for large-scale data analysis [17]. Although the basic control flow of this framework has existed in parallel SQL database management systems (DBMS) for over 20 years, some have called MR a dramatically new computing model [8, 17]. In this paper, we describe and compare both paradigms. Furthermore, we evaluate both kinds of systems in terms of performance and development complexity. To this end, we define a benchmark consisting of a collection of tasks that we have run on an open source version of MR as well as on two parallel DBMSs. For each task, we measure each system's performance for various degrees of parallelism on a cluster of 100 nodes. Our results reveal some interesting trade-offs. Although the process to load data into and tune the execution of parallel DBMSs took much longer than the MR system, the observed performance of these DBMSs was strikingly better. We speculate about the causes of the dramatic performance difference and consider implementation concepts that future systems should take from both kinds of architectures.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/pavlo2009comparison.html</link><guid isPermaLink="false">Literature Notes/pavlo2009comparison.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A computer system for inference execution and data retrieval]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/levien1967computer.html</link><guid isPermaLink="false">Literature Notes/levien1967computer.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A critique of ANSI SQL isolation levels]]></title><description><![CDATA[ 
 <br><br>Hal Berenson, Phil Bernstein, Jim Gray, Jim Melton, Elizabeth O'Neil, Patrick O'Neil (1995)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Hal-Berenson" class="tag" target="_blank" rel="noopener nofollow">#Hal-Berenson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Phil-Bernstein" class="tag" target="_blank" rel="noopener nofollow">#Phil-Bernstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jim-Gray" class="tag" target="_blank" rel="noopener nofollow">#Jim-Gray</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jim-Melton" class="tag" target="_blank" rel="noopener nofollow">#Jim-Melton</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Elizabeth-O" class="tag" target="_blank" rel="noopener nofollow">#Elizabeth-O</a>'Neil <a href="https://www.jayitha.github.io/Notes?query=tag:Patrick-O" class="tag" target="_blank" rel="noopener nofollow">#Patrick-O</a>'Neil<br>Abstract
ANSI SQL-92 [MS, ANSI] defines Isolation Levels in terms of phenomena: Dirty Reads, Non-Repeatable Reads, and Phantoms. This paper shows that these phenomena and the ANSI SQL definitions fail to properly characterize several popular isolation levels, including the standard locking implementations of the levels covered. Ambiguity in the statement of the phenomena is investigated and a more formal statement is arrived at; in addition new phenomena that better characterize isolation types are introduced. Finally, an important multiversion isolation type, called Snapshot Isolation, is defined.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/berenson1995critique.html</link><guid isPermaLink="false">Literature Notes/berenson1995critique.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A data base sublanguage founded on the relational calculus]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/codd1971data.html</link><guid isPermaLink="false">Literature Notes/codd1971data.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A fast and slippery slope for file systems]]></title><description><![CDATA[ 
 <br><br>Ricardo Santana, Raju Rangaswami, Vasily Tarasov, Dean Hildebrand (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ricardo-Santana" class="tag" target="_blank" rel="noopener nofollow">#Ricardo-Santana</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Raju-Rangaswami" class="tag" target="_blank" rel="noopener nofollow">#Raju-Rangaswami</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Vasily-Tarasov" class="tag" target="_blank" rel="noopener nofollow">#Vasily-Tarasov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Dean-Hildebrand" class="tag" target="_blank" rel="noopener nofollow">#Dean-Hildebrand</a><br>Abstract
There is a vast number and variety of file systems currently available, each optimizing for an ever growing number of storage devices and workloads. Users have an unprecedented, and somewhat overwhelming, number of data management options. At the same time, the fastest storage devices are only getting faster, and it is unclear on how well the existing file systems will adapt. Using emulation techniques, we evaluate five popular Linux file systems across a range of storage device latencies typical to low-end hard drives, latest high-performance persistent memory block devices, and in between. Our findings are often surprising. Depending on the workload, we find that some file systems can clearly scale with faster storage devices much better than others. Further, as storage device latency decreases, we find unexpected performance inversions across file systems. Finally, file system scalability in the higher device latency range is not representative of scalability in the lower, submillisecond, latency range. We then focus on Nilfs2 as an especially alarming example of an unexpectedly poor scalability and present detailed instructions for identifying bottlenecks in the I/O stack.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/santana2016fast.html</link><guid isPermaLink="false">Literature Notes/santana2016fast.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A fast file system for UNIX]]></title><description><![CDATA[ 
 <br><br>Marshall K McKusick, William N Joy, Samuel J Leffler, Robert S Fabry (1984)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Marshall" class="tag" target="_blank" rel="noopener nofollow">#Marshall</a> <a href="https://www.jayitha.github.io/Notes?query=tag:K-McKusick" class="tag" target="_blank" rel="noopener nofollow">#K-McKusick</a> <a href="https://www.jayitha.github.io/Notes?query=tag:William" class="tag" target="_blank" rel="noopener nofollow">#William</a> <a href="https://www.jayitha.github.io/Notes?query=tag:N-Joy" class="tag" target="_blank" rel="noopener nofollow">#N-Joy</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Samuel" class="tag" target="_blank" rel="noopener nofollow">#Samuel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Leffler" class="tag" target="_blank" rel="noopener nofollow">#J-Leffler</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Robert" class="tag" target="_blank" rel="noopener nofollow">#Robert</a> <a href="https://www.jayitha.github.io/Notes?query=tag:S-Fabry" class="tag" target="_blank" rel="noopener nofollow">#S-Fabry</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mckusick1984fast.html</link><guid isPermaLink="false">Literature Notes/mckusick1984fast.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A History and Evaluation of System R]]></title><description><![CDATA[ 
 <br><br>Donald D Chamberlin, Morton M Astrahan, Michael W Blasgen, James N Gray, W Frank King, Bruce G Lindsay, Raymond Lorie, James W Mehl, Thomas G Price, Franco Putzolu, others (1981)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Donald-D-Chamberlin" class="tag" target="_blank" rel="noopener nofollow">#Donald-D-Chamberlin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Morton-M-Astrahan" class="tag" target="_blank" rel="noopener nofollow">#Morton-M-Astrahan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-W-Blasgen" class="tag" target="_blank" rel="noopener nofollow">#Michael-W-Blasgen</a> <a href="https://www.jayitha.github.io/Notes?query=tag:James-N-Gray" class="tag" target="_blank" rel="noopener nofollow">#James-N-Gray</a> <a href="https://www.jayitha.github.io/Notes?query=tag:W-Frank-King" class="tag" target="_blank" rel="noopener nofollow">#W-Frank-King</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Bruce" class="tag" target="_blank" rel="noopener nofollow">#Bruce</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Bruce-G-Lindsay" class="tag" target="_blank" rel="noopener nofollow">#Bruce-G-Lindsay</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Raymond-Lorie" class="tag" target="_blank" rel="noopener nofollow">#Raymond-Lorie</a> <a href="https://www.jayitha.github.io/Notes?query=tag:James" class="tag" target="_blank" rel="noopener nofollow">#James</a> <a href="https://www.jayitha.github.io/Notes?query=tag:James-W-Mehl" class="tag" target="_blank" rel="noopener nofollow">#James-W-Mehl</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-G-Price" class="tag" target="_blank" rel="noopener nofollow">#Thomas-G-Price</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Franco-Putzolu" class="tag" target="_blank" rel="noopener nofollow">#Franco-Putzolu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
System R, an experimental database system, was constructed to demonstrate that the usability advantages of the relational data model can be realized in a system with the complete function and high performance required for everyday production use. This paper describes the three principal phases of the System R project and discusses some of the lessons learned from System R about the design of relational systems and database systems in general.
<br>My notes are from the version of the paper annotated by Prof. Joe Hellerstein (<a data-href="Abbreviations#JH" href="https://www.jayitha.github.io/Notes/Abbreviations#JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-href="Abbreviations#JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>) from UC Berkeley. I list some annotation verbatim in my notes (as footnotes).<br>Developed by IBM Research Laboratory, San Jose, California between 1974-1979<br>Prior to the Codd model, conventional database systems stores data in two ways<br>
<br>By contents of records
<br>By connections between the records<br>

<br>Aside
Navigational System
<br>
<br>This older models are called navigational systems where for every query, the burden is on the user to specify the query's algorithm (through the access paths the query must use)
<br>Any changes made to the representation of data would require changes being made to the application code
<br>The navigational system is a problem since, in the words of Joe Hellerstein<br>
i.e. the rate of change of the environment (disks etc) is much faster than the rate of change of an application built on top of a database systems. In navigational systems where queries are dependent on the physical layout, application code will have to change with the database. <br>The relational database system as modeled by Codd have two important properties<br>
<br>All information shown to the user is represented as data values and not dependent as connections
<br>A high-level query language which supports data queries without specifying the algorithm
<br>At that point it was doubtful is an automatic system could be as good as an experienced programmer in picking an efficient algorithm for processing queries <br>The key goals were<br>
<br>Provide a high-level non-navigational user interface for <a data-tooltip-position="top" aria-label="Data Independence Principle" data-href="Data Independence Principle" href="https://www.jayitha.github.io/Notes/Data Independence Principle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">data independence</a><a data-tooltip-position="top" aria-label="Data Independence Principle" data-href="Data Independence Principle" href="https://www.jayitha.github.io/Notes/glossary/data-independence-principle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">data independence</a>
<br>Support different kinds of use cases - transactions, ad hoc queries, report generation
<br>Support rapidly changing database environments without having to modify application code
<br>Support safe concurrent usage
<br>Support recovery
<br>Support views and restricted access
<br>Support all the above with good performance
<br>The history of System R is divided into three phases<br><br>Occurred during 1974 and most of 1975<br>Developed the SQL user interface and quick prototyping of a subset of SQL for a single-user environment<br>How cool! Phase 0 code was meant as a learning project that the authors were planning to scrape!<a data-footref="[inline0" href="https://www.jayitha.github.io/Notes/about:blank#fn-1-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a><br>Uses relational access method <a data-href="XRM" href="https://www.jayitha.github.io/Notes/XRM" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">XRM</a><a data-href="XRM" href="https://www.jayitha.github.io/Notes/glossary/xrm.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">XRM</a><br>Interpreter program written to execute high-level SQL on top of XRM<br>Supports "subquery" but not "join" i.e. query can search through several relation during computation but the result has to be from one relation<a data-footref="[inline1" href="https://www.jayitha.github.io/Notes/about:blank#fn-2-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a><br>In this phase, a lot of attention was paid to human interactability with SQL<a data-footref="[inline2" href="https://www.jayitha.github.io/Notes/about:blank#fn-3-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[3]</a><br>One lesson learnt is that the system catalog that describes the structure of the database should be stored as a regular set of relations in the database itself<a data-footref="[inline3" href="https://www.jayitha.github.io/Notes/about:blank#fn-4-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[4]</a>. There are two advantages<br>
<br>Permits keeping catalog upto date as changes are made to the database
<br>Makes catalog information available to system optimizer
<br>XRM model allows for TID-list processing<a data-footref="[inline4" href="https://www.jayitha.github.io/Notes/about:blank#fn-5-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[5]</a><br>The most challenging part was building a query optimizer. The objective was to minimize the number of tuples fetched during query processing. To this end, the optimizer made extensive use of inversions and TID-lists. Large TID-lists are stored as temporary objects in the database during query processing<br>Other key take positive aways include<br>
<br>usability of SQL
<br>feasibility of creating new tables and inversions "on the fly"
<br>feasibility of an automatic optimizer for access path selection
<br>convenience of storing system catalog in the database
<br>Key lessons learnt<br>
<br>Optimizer should also take cost of creating and manipulating TID lists, fetching tuples and fetching data pointed to by tuples and not just the cost of fetching tuples. These hidden costs add up making TID-list manipulation especially when they're managed in the database (and not in-memory)
<br>Rather than the objective being "minimize number of fetched tuples", we should aim to minimize the number of I/Os. Showcases the importance of clustering related tuples on physical storage<a data-footref="[inline5" href="https://www.jayitha.github.io/Notes/about:blank#fn-6-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[6]</a><a data-footref="[inline6" href="https://www.jayitha.github.io/Notes/about:blank#fn-7-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[7]</a>.
<br>The optimizer cost measure should be weighted sum of CPU time and I/O count<a data-footref="[inline7" href="https://www.jayitha.github.io/Notes/about:blank#fn-8-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[8]</a>
<br>Joins are important and are consequently included in the next phase
<br>Complex query optimizer emphasizing on complex query should be swapped out for a simpler one that minimized path length for simple queries<a data-footref="[inline8" href="https://www.jayitha.github.io/Notes/about:blank#fn-9-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[9]</a>
<br><br>Occurred during 1976 and 1977<br>Design and construction for full-function multiuser environments<br>Used different access method RSS (Research Storage System) and an optimizing SQL processor called RDS (the Relational Data System)<br>Separation between the two is beneficial<br>RSS originally designed to support multiple concurrent users<br>Included a locking subsystem to prevent conflicts<br>Also added view and authorization subsystems for security<br>View subsystem - alternate views of the database<br>Authorization subsystem - each user has access only to those views for which they have been authorized<a data-footref="[inline9" href="https://www.jayitha.github.io/Notes/about:blank#fn-10-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[10]</a><br>Recovery subsystem - restore consistent state in the event of a hardware or software failure<br>System R supports both embedding and a standalone query UI (called UFI - User Friendly Interface).<br>The UFI is built on top of System R, therefore, it can be modified. <br>Interestingly, to install a multiuser database system, modification to the OS were necessary to support communication between virtual machines and writable shared virtual memory<a data-footref="[inline10" href="https://www.jayitha.github.io/Notes/about:blank#fn-11-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[11]</a><br><br>It is possible to compute very high-level SQL statements into compact efficient routines in machine language (ccite:42)<br>When embedding SQL queries, a preprocessor examines, optimizes and compiles the query into small machine language routines which are packaged into an access module<a data-footref="[inline11" href="https://www.jayitha.github.io/Notes/about:blank#fn-12-2f3a76ff191bd6d2" class="footnote-link" target="_self" rel="noopener nofollow">[12]</a><br>The access module when called processes the query by making calls to the RSS<br>The application program need not interact with a SQL interpreter, it just uses the access module.<br>If any changes are made to the database like dropping an index, an access module generated with the index is marked "invalid" and the next time it's accessed, a new module is generated. For each access module, the list of indices and tables that the module depends on are stored in the database. When some dependency is modified, all dependent access modules are marked for deletion.<br><br>Occurred during 1978 and 1979<br>Evaluation of System R in actual use<br>
<br>
<br><a data-href="Abbreviations#JH" href="https://www.jayitha.github.io/Notes/Abbreviations#JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-href="Abbreviations#JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: It is part of system lore that you should expect to throw out the first version of a system<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-1-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-href="Abbreviations#JH" href="https://www.jayitha.github.io/Notes/Abbreviations#JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-href="Abbreviations#JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: This also obviated the need for a join-reordering query optimizer,  placing  the decisions of which relation to check when in the hands of the SQL writer.  Not very declarative, by subsequent standards!<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-2-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: Note focus on human factors for end-users early on!<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-3-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: Uniform interface to data and metadata also results in code reuse both internal and external to the system too -- everything is "just a table".  Very helpful.  it's often tempting to make the system metadata have its own "special" interface, but it's almost always a mistake.<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-4-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: TID-list intersection is considered a rather "advanced" feature in modern DBMSs -- it wasn't implemented in most systems in the 80's, but became important in data warehousing in the late 1990s.<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-5-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>Also revealed how XRM needs extra I/Os are needed to retrieve values. Useful if many tuples are processed but only few are materialized<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-6-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: So why not be flexible about this?  TID lists turn out to be useful for internal representation in queries.  See also <a data-href="Index-Only Plans" href="https://www.jayitha.github.io/Notes/Index-Only Plans" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Index-Only Plans</a><a data-href="Index-Only Plans" href="https://www.jayitha.github.io/Notes/glossary/index-only-plans.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Index-Only Plans</a><a href="https://www.jayitha.github.io/Notes/about:blank#fnref-7-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br>Phase 0 was found to be CPU-bound<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-8-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: Optimizing the fast path, another systems chestnut<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-9-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: Though this is a quick mention, the idea of access control via views is a rather deep application of  data independence to the realm of security.  How do you provide fine-grained access control in a language where all entities are addressed by value rather than by identity?  It all works out fairly naturally using the relation as the basic unit of access, and a rich query language to define view relations.  A complication is that updates through views are often ill-defined.  Also, defining many views results in a lot of SQL and a crowded catalog.<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-10-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: As in the UNIX world, database functionality has been a key driver of OS modifications -- mostly because DBMSs were for years the only large multi-user server "application".<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-11-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
<br><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/Abbreviations#^JH" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">JH</a><a data-tooltip-position="top" aria-label="Abbreviations > ^JH" data-href="Abbreviations#^JH" href="https://www.jayitha.github.io/Notes/abbreviations.html#^JH" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">JH</a>: This is another age-old design decision: interpretation vs. compilation vs. various possible intermediate representations of basic "opcodes" strung together.  In retrospect, the System R decision of full compilation isn't necessarily the only one that's reasonable.<a href="https://www.jayitha.github.io/Notes/about:blank#fnref-12-2f3a76ff191bd6d2" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow">↩︎</a>
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chamberlin1981history.html</link><guid isPermaLink="false">Literature Notes/chamberlin1981history.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A reconfigurable FTL (flash translation layer) architecture for NAND flash-based applications]]></title><description><![CDATA[ 
 <br><br>Chanik Park, Wonmoon Cheon, Jeonguk Kang, Kangho Roh, Wonhee Cho, Jin-Soo Kim (2008)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Chanik-Park" class="tag" target="_blank" rel="noopener nofollow">#Chanik-Park</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wonmoon-Cheon" class="tag" target="_blank" rel="noopener nofollow">#Wonmoon-Cheon</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jeonguk-Kang" class="tag" target="_blank" rel="noopener nofollow">#Jeonguk-Kang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kangho-Roh" class="tag" target="_blank" rel="noopener nofollow">#Kangho-Roh</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wonhee-Cho" class="tag" target="_blank" rel="noopener nofollow">#Wonhee-Cho</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jin-Soo-Kim" class="tag" target="_blank" rel="noopener nofollow">#Jin-Soo-Kim</a><br>Abstract
In this article, a novel FTL (flash translation layer) architecture is proposed for NAND flash-based applications such as MP3 players, DSCs (digital still cameras) and SSDs (solid-state drives). Although the basic function of an FTL is to translate a logical sector address to a physical sector address in flash memory, efficient algorithms of an FTL have a significant impact on performance as well as the lifetime. After the dominant parameters that affect the performance and endurance are categorized, the design space of the FTL architecture is explored based on a diverse workload analysis. With the proposed FTL architectural framework, it is possible to decide which configuration of FTL mapping parameters yields the best performance, depending on the differing characteristics of various NAND flash-based applications.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/park2008reconfigurable.html</link><guid isPermaLink="false">Literature Notes/park2008reconfigurable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A relational model of data for large shared data banks]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/codd1970relational.html</link><guid isPermaLink="false">Literature Notes/codd1970relational.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[A survey of B-tree logging and recovery techniques]]></title><description><![CDATA[ 
 <br><br>Goetz Graefe (2012)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Goetz-Graefe" class="tag" target="_blank" rel="noopener nofollow">#Goetz-Graefe</a><br>Abstract
B-trees have been ubiquitous in database management systems for several decades, and they serve in many other storage systems as well. Their basic structure and their basic operations are well understood including search, insertion, and deletion. However, implementation of transactional guarantees such as all-or-nothing failure atomicity and durability in spite of media and system failures seems to be difficult. High-performance techniques such as pseudo-deleted records, allocation-only logging, and transaction processing during crash recovery are widely used in commercial B-tree implementations but not widely understood. This survey collects many of these techniques as a reference for students, researchers, system architects, and software developers. Central in this discussion are physical data independence, separation of logical database contents and physical representation, and the concepts of user transactions and system transactions. Many of the techniques discussed are applicable beyond B-trees.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/graefe2012survey.html</link><guid isPermaLink="false">Literature Notes/graefe2012survey.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[HadoopDB: An architectural hybrid of MapReduce and DBMS technologies for analytical workloads]]></title><description><![CDATA[ 
 <br><br>Azza Abouzeid, Kamil Bajda-Pawlikowski, Daniel Abadi, Avi Silberschatz, Alexander Rasin (2009)<br>Tags: <br>Abstract
The production environment for analytical data management applications is rapidly changing. Many enterprises are shifting away from deploying their analytical databases on high-end proprietary machines, and moving towards cheaper, lower-end, commodity hardware, typically arranged in a shared-nothing MPP architecture, often in a virtualized environment inside public or private "clouds". At the same time, the amount of data that needs to be analyzed is exploding, requiring hundreds to thousands of machines to work in parallel to perform the analysis. There tend to be two schools of thought regarding what technology to use for data analysis in such an environment. Proponents of parallel databases argue that the strong emphasis on performance and efficiency of parallel databases makes them well-suited to perform such analysis. On the other hand, others argue that MapReduce-based systems are better suited due to their superior scalability, fault tolerance, and flexibility to handle unstructured data. In this paper, we explore the feasibility of building a hybrid system that takes the best features from both technologies; the prototype we built approaches parallel databases in performance and efficiency, yet still yields the scalability, fault tolerance, and flexibility of MapReduce-based systems.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abouzeid2009hadoopdb.html</link><guid isPermaLink="false">Literature Notes/abouzeid2009hadoopdb.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Adopting worst-case optimal joins in relational database systems]]></title><description><![CDATA[ 
 <br><br>Michael Freitag, Maximilian Bandle, Tobias Schmidt, Alfons Kemper, Thomas Neumann (2020)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Freitag" class="tag" target="_blank" rel="noopener nofollow">#Michael-Freitag</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Maximilian-Bandle" class="tag" target="_blank" rel="noopener nofollow">#Maximilian-Bandle</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tobias-Schmidt" class="tag" target="_blank" rel="noopener nofollow">#Tobias-Schmidt</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a><br>Abstract
Worst-case optimal join algorithms are attractive from a theoretical point of view, as they offer asymptotically better runtime than binary joins on certain types of queries. In particular, they avoid enumerating large intermediate results by processing multiple input relations in a single multi-way join. However, existing implementations incur a sizable overhead in practice, primarily since they rely on suitable ordered index structures on their input. Systems that support worst-case optimal joins often focus on a specific problem domain, such as read-only graph analytic queries, where extensive precomputation allows them to mask these costs. In this paper, we present a comprehensive implementation approach for worst-case optimal joins that is practical within general-purpose relational database management systems supporting both hybrid transactional and analytical workloads. The key component of our approach is a novel hash-based worst-case optimal join algorithm that relies only on data structures that can be built efficiently during query execution. Furthermore, we implement a hybrid query optimizer that intelligently and transparently combines both binary and multi-way joins within the same query plan. We demonstrate that our approach far outperforms existing systems when worst-case optimal joins are beneficial while sacrificing no performance when they are not.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/freitag2020adopting.html</link><guid isPermaLink="false">Literature Notes/freitag2020adopting.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Concurrency control performance modeling: Alternatives and implications]]></title><description><![CDATA[ 
 <br><br>Rakesh Agrawal, Michael J Carey, Miron Livny (1987)<br>Tags: <br>Abstract
A number of recent studies have examined the performance of concurrency control algorithms for database management systems. The results reported to date, rather than being definitive, have tended to be contradictory. In this paper, rather than presenting “yet another algorithm performance study,” we critically investigate the assumptions made in the models used in past studies and their implications. We employ a fairly complete model of a database environment for studying the relative performance of three different approaches to the concurrency control problem under a variety of modeling assumptions. The three approaches studied represent different extremes in how transaction conflicts are dealt with, and the assumptions addressed pertain to the nature of the database system's resources, how transaction restarts are modeled, and the amount of information available to the concurrency control algorithm about transactions' reference strings. We show that differences in the underlying assumptions explain the seemingly contradictory performance results. We also address the question of how realistic the various assumptions are for actual database systems.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/agrawal1987concurrency.html</link><guid isPermaLink="false">Literature Notes/agrawal1987concurrency.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Consistency analysis in bloom: A CALM and collected approach.]]></title><description><![CDATA[ 
 <br><br>Peter Alvaro, Neil Conway, Joseph M Hellerstein, William R Marczak (2011)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/alvaro2011consistency.html</link><guid isPermaLink="false">Literature Notes/alvaro2011consistency.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Amazon aurora: Design considerations for high throughput cloud-native relational databases]]></title><description><![CDATA[ 
 <br><br>Alexandre Verbitski, Anurag Gupta, Debanjan Saha, Murali Brahmadesam, Kamal Gupta, Raman Mittal, Sailesh Krishnamurthy, Sandor Maurice, Tengiz Kharatishvili, Xiaofeng Bao (2017)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Alexandre-Verbitski" class="tag" target="_blank" rel="noopener nofollow">#Alexandre-Verbitski</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Anurag-Gupta" class="tag" target="_blank" rel="noopener nofollow">#Anurag-Gupta</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Debanjan-Saha" class="tag" target="_blank" rel="noopener nofollow">#Debanjan-Saha</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Murali-Brahmadesam" class="tag" target="_blank" rel="noopener nofollow">#Murali-Brahmadesam</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kamal-Gupta" class="tag" target="_blank" rel="noopener nofollow">#Kamal-Gupta</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Raman-Mittal" class="tag" target="_blank" rel="noopener nofollow">#Raman-Mittal</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sailesh-Krishnamurthy" class="tag" target="_blank" rel="noopener nofollow">#Sailesh-Krishnamurthy</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sandor-Maurice" class="tag" target="_blank" rel="noopener nofollow">#Sandor-Maurice</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tengiz-Kharatishvili" class="tag" target="_blank" rel="noopener nofollow">#Tengiz-Kharatishvili</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Xiaofeng-Bao" class="tag" target="_blank" rel="noopener nofollow">#Xiaofeng-Bao</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
Amazon Aurora is a relational database service for OLTP workloads offered as part of Amazon Web Services (AWS). In this paper, we describe the architecture of Aurora and the design considerations leading to that architecture. We believe the central constraint in high throughput data processing has moved from compute and storage to the network. Aurora brings a novel architecture to the relational database to address this constraint, most notably by pushing redo processing to a multi-tenant scale-out storage service, purpose-built for Aurora. We describe how doing so not only reduces network traffic, but also allows for fast crash recovery, failovers to replicas without loss of data, and fault-tolerant, self-healing storage. We then describe how Aurora achieves consensus on durable state across numerous storage nodes using an efficient asynchronous scheme, avoiding expensive and chatty recovery protocols. Finally, having operated Aurora as a production service for over 18 months, we share the lessons we have learnt from our customers on what modern cloud applications expect from databases.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/verbitski2017amazon.html</link><guid isPermaLink="false">Literature Notes/verbitski2017amazon.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[An optimality theory of concurrency control for databases]]></title><description><![CDATA[ 
 <br><br>Hsing-Tsung Kung, Christos H Papadimitriou (1979)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Hsing-Tsung-Kung" class="tag" target="_blank" rel="noopener nofollow">#Hsing-Tsung-Kung</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Christos" class="tag" target="_blank" rel="noopener nofollow">#Christos</a> <a href="https://www.jayitha.github.io/Notes?query=tag:H-Papadimitriou" class="tag" target="_blank" rel="noopener nofollow">#H-Papadimitriou</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kung1979optimality.html</link><guid isPermaLink="false">Literature Notes/kung1979optimality.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Analysis and evolution of journaling file systems.]]></title><description><![CDATA[ 
 <br><br>Vijayan Prabhakaran, Andrea C Arpaci-Dusseau, Remzi H Arpaci-Dusseau (2005)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Vijayan-Prabhakaran" class="tag" target="_blank" rel="noopener nofollow">#Vijayan-Prabhakaran</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrea" class="tag" target="_blank" rel="noopener nofollow">#Andrea</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Arpaci-Dusseau" class="tag" target="_blank" rel="noopener nofollow">#C-Arpaci-Dusseau</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Remzi" class="tag" target="_blank" rel="noopener nofollow">#Remzi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:H-Arpaci-Dusseau" class="tag" target="_blank" rel="noopener nofollow">#H-Arpaci-Dusseau</a><br>Abstract
We develop and apply two new methods for analyzing file system behavior and evaluating file system changes. First, semantic block-level analysis (SBA) combines knowledge of on-disk data structures with a trace of disk traffic to infer file system behavior; in contrast to standard benchmarking approaches, SBA enables users to understand why the file system behaves as it does. Second, semantic trace playback (STP) enables traces of disk traffic to be easily modified to represent changes in the file system implementation; in contrast to directly modifying the file system, STP enables users to rapidly gauge the benefits of new policies. We use SBA to analyze Linux ext3, ReiserFS, JFS, and Windows NTFS; in the process, we uncover many strengths and weaknesses of these journaling file systems. We also apply STP to evaluate several modifications to ext3, demonstrating the benefits of various optimizations without incurring the costs of a real implementation.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/prabhakaran2005analysis.html</link><guid isPermaLink="false">Literature Notes/prabhakaran2005analysis.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Analysis and simulation of a fair queueing algorithm]]></title><description><![CDATA[ 
 <br><br>Alan Demers, Srinivasan Keshav, Scott Shenker (1989)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alan-Demers" class="tag" target="_blank" rel="noopener nofollow">#Alan-Demers</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Srinivasan-Keshav" class="tag" target="_blank" rel="noopener nofollow">#Srinivasan-Keshav</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Scott-Shenker" class="tag" target="_blank" rel="noopener nofollow">#Scott-Shenker</a><br>Abstract
We discuss gateway queueing algorithms and their role in controlling congestion in datagram networks. A fair queueing algorithm, based on an earlier suggestion by Nagle, is proposed. Analysis and simulations are used to compare this algorithm to other congestion control schemes. We find that fair queueing provides several important advantages over the usual first-come-first-serve queueing algorithm: fair allocation of bandwidth, lower delay for sources using less than their full share of bandwidth, and protection from ill-behaved sources.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/demers1989analysis.html</link><guid isPermaLink="false">Literature Notes/demers1989analysis.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Anytime approximation in probabilistic databases via scaled dissociations]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:P-hard" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#P-hard</a> 
 <br><br>Maarten Van den Heuvel, Peter Ivanov, Wolfgang Gatterbauer, Floris Geerts, Martin Theobald (2019)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:P-hard" class="tag" target="_blank" rel="noopener nofollow">#P-hard</a> <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Maarten-Van" class="tag" target="_blank" rel="noopener nofollow">#Maarten-Van</a> <a href="https://www.jayitha.github.io/Notes?query=tag:den" class="tag" target="_blank" rel="noopener nofollow">#den</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Heuvel" class="tag" target="_blank" rel="noopener nofollow">#Heuvel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Ivanov" class="tag" target="_blank" rel="noopener nofollow">#Peter-Ivanov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wolfgang-Gatterbauer" class="tag" target="_blank" rel="noopener nofollow">#Wolfgang-Gatterbauer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Floris-Geerts" class="tag" target="_blank" rel="noopener nofollow">#Floris-Geerts</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Martin-Theobald" class="tag" target="_blank" rel="noopener nofollow">#Martin-Theobald</a><br>Abstract
Speeding up probabilistic inference remains a key challenge in probabilistic databases (PDBs) and the related area of statistical relational learning (SRL). Since computing probabilities for query answers is <a href="https://www.jayitha.github.io/Notes?query=tag:P-hard" class="tag" target="_blank" rel="noopener nofollow">#P-hard</a>, even for fairly simple conjunctive queries, both the PDB and SRL communities have proposed a number of approximation techniques over the years. The two prevalent techniques are either (i) MCMC-style sampling or (ii) branch-and-bound (B&amp;B) algorithms that iteratively improve model-based bounds using a combination of variable substitution and elimination. We propose a new anytime B&amp;B approximation scheme that encompasses all prior model-based approximation schemes proposed in the PDB and SRL literature. Our approach relies on the novel idea of "scaled dissociation" which can improve both the upper and lower bounds of existing modelbased algorithms. We apply our approach to the well-studied problem of evaluating self-join-free conjunctive queries over tuple-independent PDBs, and show a consistent reduction in approximation error in our experiments on TPC-H, Yago3, and a synthetic benchmark setting.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/van2019anytime.html</link><guid isPermaLink="false">Literature Notes/van2019anytime.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Architecture of a database system]]></title><description><![CDATA[ 
 <br><br>Joseph M Hellerstein, Michael Stonebraker, James Hamilton, others (2007)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Stonebraker" class="tag" target="_blank" rel="noopener nofollow">#Michael-Stonebraker</a> <a href="https://www.jayitha.github.io/Notes?query=tag:James-Hamilton" class="tag" target="_blank" rel="noopener nofollow">#James-Hamilton</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract
Database Management Systems (DBMSs) are a ubiquitous and critical component of modern computing, and the result of decades of research and development in both academia and industry. Historically, DBMSs were among the earliest multi-user server systems to be developed, and thus pioneered many systems design techniques for scalability and reliability now in use in many other contexts. While many of the algorithms and abstractions used by a DBMS are textbook material, there has been relatively sparse coverage in the literature of the systems design issues that make a DBMS work. This paper presents an architectural discussion of DBMS design principles, including process models, parallel architecture, storage system design, transaction system implementation, query processor and optimizer architectures, and typical shared components and utilities. Successful commercial and open-source systems are used as points of reference, particularly when multiple alternative designs have been adopted by different groups.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hellerstein2007architecture.html</link><guid isPermaLink="false">Literature Notes/hellerstein2007architecture.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Are virtual machine monitors microkernels done right?]]></title><description><![CDATA[ 
 <br><br>Steven Hand, Andrew Warfield, Keir Fraser, Evangelos Kotsovinos, Daniel J Magenheimer (2005)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Steven-Hand" class="tag" target="_blank" rel="noopener nofollow">#Steven-Hand</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Warfield" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Warfield</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Keir-Fraser" class="tag" target="_blank" rel="noopener nofollow">#Keir-Fraser</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Evangelos-Kotsovinos" class="tag" target="_blank" rel="noopener nofollow">#Evangelos-Kotsovinos</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel" class="tag" target="_blank" rel="noopener nofollow">#Daniel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Magenheimer" class="tag" target="_blank" rel="noopener nofollow">#J-Magenheimer</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hand2005virtual.html</link><guid isPermaLink="false">Literature Notes/hand2005virtual.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Atomic Habits: An Easy & Proven Way to Build Good Habits & Break Bad Ones]]></title><description><![CDATA[ 
 <br>
<br>Changes that seem small and unimportant at first will compound into remarkable results if you’re willing to stick with them for years
<br>Making a choice that is 1 percent better that seems insignificant in the moment, but over the span of moments make up a lifetime. These choices determine the difference between who you are and who you could be. <br>The three layers of behavior change are - changing outcomes (outermost), changing process (middle) and changing identify (innermost)<br>Focus on changing identity, if you want to get healthy, who you want to be is a healthy person. Do what healthy people do. Make it a part of your identity and your pride will have you make compounding good decisions. <br>As a side note, if you’re strict with identity it’ll make it harder to change. Progress requires unlearning. (For work!)<br>Every action you take is a vote for the person you want to become. Your aim should now be to put yourself in a trajectory towards who you want to become.<br>Homework:<br>
Who do you want to be? What do I want to stand for? What are my principles and values? Who is the type of person who could get the outcome I want?<br>Habits will make you believe in yourself.<br>The process of building a habit it divided into four steps:<br>
<br>Cue - triggers your brain to initiate a habit
<br>Craving - motivational force behind every habit
<br>Response - the actual habit you perform
<br>Reward - end goal of a habit<br>
These four steps are looped to create the habit loop
<br>If a behavior is insufficient in any of the four stages, it will not become a habit. This gives you a framework for unlearning and the inverse for learning<br>
<br>If you eliminate the cue, the habit will never start
<br>If you reduce the craving, you won’t be motivated to perform the habit
<br>If the response behavior is difficult to perform, you won’t be able to do it and
<br>If the reward fails to satisfy you, you’ll not want to do it again in the future
<br>The Four Laws of Behavior Change<br>Invert the laws to break a bad habit<br>1st Law (Cue) - Make it obvious (invisible)<br>
2nd Law (Craving) - Make it attractive (unattractive)<br>
3rd Law (Response) - Make it easy (difficult)<br>
4th Law (Reward) - Make it satisfying (unsatisfying)<br>The hard part is going to be altering your these laws to my specifications<br>The 1st Law (Make it Obvious)<br>Create a habit scorecard. Write down all your minor habits. Write a “+” if its a good habit, a “-” if it’s a bad habit and “=” if it’s neutral. Maybe create a habit card every 4 weeks?<br>Create implementation intentions:<br>
When situation X arises, I will perform response Y
<br>It’s good to start habits at the beginning of the week, month or year<br>It’s easy to get derailed or make exception for small things during the day when your goals and habits are vague. <br><a data-href="The Diderot Effect" href="https://www.jayitha.github.io/Notes/The Diderot Effect" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Diderot Effect</a><a data-href="The Diderot Effect" href="https://www.jayitha.github.io/Notes/glossary/the-diderot-effect.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Diderot Effect</a><br>You often decide on what to do next based on what you have just finished doing<br>Utiliza Habit Stacking<br>
After [CURRENT HABIT], I will [NEW HABIT]
<br>You need to pick very specific cues to trigger a habit you’re planning on cultivating.<br>Most common cues are time and location. <br>Motivation is Overrated; Environment Often Matters More<br>In 1936, Kurt Lewin wrote: Behavior is a function of the Person in their Environment<br>
You should have a lot of visual cues to trigger good behavior. <br>A stable environment where everything has a place and a purpose is an environment where habits can easily form. For instance, use this desk ONLY to do work. Use the couch to read or relax. Use the bed to relax and sleep. <br>People with supposed self-control aren’t different from those that are afflicted with addictions, they are just better at structuring their lives to avoid tempting situations. It’s easier to practice self-restraint when you don’t have to use it very often. <br>Self-control is a short-term strategy, not a long-term one. The secret to self-control is to make the cues of good habits obvious and the cues of your bad habits invisible. <br>Apparently it’s nearly impossible to erase a bad habit. In the long term, it’s likely you’ll have to keep resisting temptation. The best strategy is to eliminate cues. If you’re addicted to your phone, throw the phone in a different room when dating. <br>The 2nd Law: Make it Attractive<br>At some point, salt, sugar and fat were far and few between. Then, it was logical to eat as much as you could find for survival. However, now in a calorie dense world, we’re still programmed the same and hence why we crave junk food. <br>The Dopamine-Driven Feedback Loop<br>Habits are a dopamine-driven feedback loop. Dopamine is released not only when you experience pleasure, but also when you anticipate pleasure. <br>Most actions are taken because of the anticipation that precedes it. More dopamine is released in anticipation than when rewarded. You don’t actually truly enjoy the food you order in, but you always anticipate it. That’s why you’re always left disappointed. <br>Use Temptation Bundling<br>
After [CURRENT HABIT], I will [HABIT I NEED] habit stacking<br>
After [HABIT I NEED], I will [HABIT I WANT] temptation bundling
<br>Supernormal stimuli - heightened versions of reality that increase our desire to take action.<br>Whatever habits are normal in your culture are among the most attractive behaviors you’ll find!<br>The best is the enemy of the good. It is easy to get bogged down trying to find the optimal plan for change. We are so focused on figuring out the best approach that we never get around to taking action. <br>The biggest reason you slip into motion rather than taking action: delay failure. Motion makes you feel like you’re getting things done but really you’re just preparing to get something done. You just need to get your reps in. <br>Active practice vs passive learning<br>the Law of Least Effort: when deciding between two similar options, people naturally gravitate toward the option that requires the least amount of work.<br>Habits are the cab, not the gym. When you start a new habit, it should take less than two minutes to do so. <br>The point is to master the habit of showing up. <br>The Two Minute Rule states - When starting a new habit, it should take you less than two minutes to do<br>Alfred North: “Civilization advances by extending the number of operations we can perform without thinking about them”<br>Utiliza a commitment device - a choice you make in the present that locks in better behavior in the future<br>The 4th Law: Make It Satisfying<br>Charles Goodhart: “When a measure becomes a target, it ceases to be a good measure.”<br><a data-href="The Goldilocks Rule" href="https://www.jayitha.github.io/Notes/The Goldilocks Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Goldilocks Rule</a><a data-href="The Goldilocks Rule" href="https://www.jayitha.github.io/Notes/glossary/the-goldilocks-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Goldilocks Rule</a>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/clear2018atomic.html</link><guid isPermaLink="false">Literature Notes/clear2018atomic.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Attention is all you need]]></title><description><![CDATA[ 
 <br><br>Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, Illia Polosukhin (2017)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ashish-Vaswani" class="tag" target="_blank" rel="noopener nofollow">#Ashish-Vaswani</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Noam-Shazeer" class="tag" target="_blank" rel="noopener nofollow">#Noam-Shazeer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Niki-Parmar" class="tag" target="_blank" rel="noopener nofollow">#Niki-Parmar</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jakob-Uszkoreit" class="tag" target="_blank" rel="noopener nofollow">#Jakob-Uszkoreit</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Llion-Jones" class="tag" target="_blank" rel="noopener nofollow">#Llion-Jones</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Aidan" class="tag" target="_blank" rel="noopener nofollow">#Aidan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:N-Gomez" class="tag" target="_blank" rel="noopener nofollow">#N-Gomez</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Łukasz-Kaiser" class="tag" target="_blank" rel="noopener nofollow">#Łukasz-Kaiser</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Illia-Polosukhin" class="tag" target="_blank" rel="noopener nofollow">#Illia-Polosukhin</a><br>Abstract<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/vaswani2017attention.html</link><guid isPermaLink="false">Literature Notes/vaswani2017attention.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Eddies: Continuously adaptive query processing]]></title><description><![CDATA[ 
 <br><br>Ron Avnur, Joseph M Hellerstein (2000)<br>Tags: <br>Abstract
In large federated and shared-nothing databases, resources can exhibit widely fluctuating characteristics. Assumptions made at the time a query is submitted will rarely hold throughout the duration of query processing. As a result, traditional static query optimization and execution techniques are ineffective in these environments. In this paper we introduce a query processing mechanism called an eddy, which continuously reorders operators in a query plan as it runs. We characterize the moments of symmetry during which pipelined joins can be easily reordered, and the synchronization barriers that require inputs from different sources to be coordinated. By combining eddies with appropriate join algorithms, we merge the optimization and execution phases of query processing, allowing each tuple to have a flexible ordering of the query operators. This flexibility is controlled by a combination of fluid dynamics and a simple learning algorithm. Our initial implementation demonstrates promising results, with eddies performing nearly as well as a static optimizer/executor in static scenarios, and providing dramatic improvements in dynamic execution environments.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/avnur2000eddies.html</link><guid isPermaLink="false">Literature Notes/avnur2000eddies.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Highly available transactions: Virtues and limitations (extended version)]]></title><description><![CDATA[ 
 <br><br>Peter Bailis, Aaron Davidson, Alan Fekete, Ali Ghodsi, Joseph M Hellerstein, Ion Stoica (2013)<br>Tags: <br>Abstract
To minimize network latency and remain online during server failures and network partitions, many modern distributed data storage systems eschew transactional functionality, which provides strong semantic guarantees for groups of multiple operations over multiple data items. In this work, we consider the problem of providing Highly Available Transactions (HATs): transactional guarantees that do not suffer unavailability during system partitions or incur high network latency. We introduce a taxonomy of highly available systems and analyze existing ACID isolation and distributed data consistency guarantees to identify which can and cannot be achieved in HAT systems. This unifies the literature on weak transactional isolation, replica consistency, and highly available systems. We analytically and experimentally quantify the availability and performance benefits of HATs–often two to three orders of magnitude over wide-area networks–and discuss their necessary semantic compromises.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bailis2013highly.html</link><guid isPermaLink="false">Literature Notes/bailis2013highly.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Feral concurrency control: An empirical investigation of modern application integrity]]></title><description><![CDATA[ 
 <br><br>Peter Bailis, Alan Fekete, Michael J Franklin, Ali Ghodsi, Joseph M Hellerstein, Ion Stoica (2015)<br>Tags: <br>Abstract
The rise of data-intensive "Web 2.0" Internet services has led to a range of popular new programming frameworks that collectively embody the latest incarnation of the vision of Object-Relational Mapping (ORM) systems, albeit at unprecedented scale. In this work, we empirically investigate modern ORM-backed applications' use and disuse of database concurrency control mechanisms. Specifically, we focus our study on the common use of feral, or application-level, mechanisms for maintaining database integrity, which, across a range of ORM systems, often take the form of declarative correctness criteria, or invariants. We quantitatively analyze the use of these mechanisms in a range of open source applications written using the Ruby on Rails ORM and find that feral invariants are the most popular means of ensuring integrity (and, by usage, are over 37 times more popular than transactions). We evaluate which of these feral invariants actually ensure integrity (by usage, up to 86.9%) and which—due to concurrency errors and lack of database support—may lead to data corruption (the remainder), which we experimentally quantify. In light of these findings, we present recommendations for database system designers for better supporting these modern ORM programming patterns, thus eliminating their adverse effects on application integrity.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bailis2015feral.html</link><guid isPermaLink="false">Literature Notes/bailis2015feral.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Balsa: Learning a query optimizer without expert demonstrations]]></title><description><![CDATA[ 
 <br><br>Zongheng Yang, Wei-Lin Chiang, Sifei Luan, Gautam Mittal, Michael Luo, Ion Stoica (2022)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Zongheng-Yang" class="tag" target="_blank" rel="noopener nofollow">#Zongheng-Yang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wei-Lin-Chiang" class="tag" target="_blank" rel="noopener nofollow">#Wei-Lin-Chiang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sifei-Luan" class="tag" target="_blank" rel="noopener nofollow">#Sifei-Luan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gautam-Mittal" class="tag" target="_blank" rel="noopener nofollow">#Gautam-Mittal</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Luo" class="tag" target="_blank" rel="noopener nofollow">#Michael-Luo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ion-Stoica" class="tag" target="_blank" rel="noopener nofollow">#Ion-Stoica</a><br>Abstract
Query optimizers are a performance-critical component in every database system. Due to their complexity, optimizers take experts months to write and years to refine. In this work, we demonstrate for the first time that learning to optimize queries without learning from an expert optimizer is both possible and efficient. We present Balsa, a query optimizer built by deep reinforcement learning. Balsa first learns basic knowledge from a simple, environment-agnostic simulator, followed by safe learning in real execution. On the Join Order Benchmark, Balsa matches the performance of two expert query optimizers, both open-source and commercial, with two hours of learning, and outperforms them by up to 2.8× in workload runtime after a few more hours. Balsa thus opens the possibility of automatically learning to optimize in future compute environments where expert-designed optimizers do not exist.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/yang2022balsa.html</link><guid isPermaLink="false">Literature Notes/yang2022balsa.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Finding a needle in haystack: Facebook's photo storage]]></title><description><![CDATA[ 
 <br><br>Doug Beaver, Sanjeev Kumar, Harry C Li, Jason Sobel, Peter Vajgel (2010)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/beaver2010finding.html</link><guid isPermaLink="false">Literature Notes/beaver2010finding.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Benchmarking learned indexes]]></title><description><![CDATA[ 
 <br><br>Ryan Marcus, Andreas Kipf, Alexander van Renen, Mihail Stoian, Sanchit Misra, Alfons Kemper, Thomas Neumann, Tim Kraska (2020)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ryan-Marcus" class="tag" target="_blank" rel="noopener nofollow">#Ryan-Marcus</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andreas-Kipf" class="tag" target="_blank" rel="noopener nofollow">#Andreas-Kipf</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alexander-van" class="tag" target="_blank" rel="noopener nofollow">#Alexander-van</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Renen" class="tag" target="_blank" rel="noopener nofollow">#Renen</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mihail-Stoian" class="tag" target="_blank" rel="noopener nofollow">#Mihail-Stoian</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanchit-Misra" class="tag" target="_blank" rel="noopener nofollow">#Sanchit-Misra</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Kraska" class="tag" target="_blank" rel="noopener nofollow">#Tim-Kraska</a><br>Abstract
Recent advancements in learned index structures propose replacing existing index structures, like B-Trees, with approximate learned models. In this work, we present a unified benchmark that compares well-tuned implementations of three learned index structures against several state-of-the-art "traditional" baselines. Using four real-world datasets, we demonstrate that learned index structures can indeed outperform non-learned indexes in read-only in-memory workloads over a dense array. We also investigate the impact of caching, pipelining, dataset size, and key size. We study the performance profile of learned index structures, and build an explanation for why learned models achieve such good performance. Finally, we investigate other important properties of learned index structures, such as their performance in multi-threaded systems and their build times.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/marcus2020benchmarking.html</link><guid isPermaLink="false">Literature Notes/marcus2020benchmarking.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Orleans: Distributed virtual actors for programmability and scalability]]></title><description><![CDATA[ 
 <br><br>Phil Bernstein, Sergey Bykov, Alan Geller, Gabriel Kliot, Jorgen Thelin (2014)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bernstein2014orleans.html</link><guid isPermaLink="false">Literature Notes/bernstein2014orleans.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[SPIN: An extensible microkernel for application-specific operating system services]]></title><description><![CDATA[ 
 <br><br>Brian N Bershad, Craig Chambers, Susan Eggers, Chris Maeda, Dylan McNamee, Przemyslaw Pardyak, Stefan Savage, Emin Gün Sirer (1994)<br>Tags: <br>Abstract
Application domains such as multimedia, databases, and parallel computing, require operating system services with high performance and high functionality. Existing operating systems provide fixed interfaces and implementations to system services and resources. This makes them inappropriate for applications whose resource demands and usage patterns are poorly matched by the services provided. The SPIN operating system enables system services to be defined in an application-specific fashion through an extensible microkernel. It offers applications fine-grained control over a machine's logical and physical resources through run-time adaptation of the system to application requirements.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bershad1994spin.html</link><guid isPermaLink="false">Literature Notes/bershad1994spin.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Cilk: An efficient multithreaded runtime system]]></title><description><![CDATA[ 
 <br><br>Robert D Blumofe, Christopher F Joerg, Bradley C Kuszmaul, Charles E Leiserson, Keith H Randall, Yuli Zhou (1995)<br>Tags: <br>Abstract
Cilk (pronounced “silk”) is a C-based runtime system for multi-threaded parallel programming. In this paper, we document the efficiency of the Cilk work-stealing scheduler, both empirically and analytically. We show that on real and synthetic applications, the “work” and “critical path” of a Cilk computation can be used to accurately model performance. Consequently, a Cilk programmer can focus on reducing the work and critical path of his computation, insulated from load balancing and other runtime scheduling issues. We also prove that for the class of “fully strict” (well-structured) programs, the Cilk scheduler achieves space, time and communication bounds all within a constant factor of optimal. The Cilk runtime system currently runs on the Connection Machine CM5 MPP, the Intel Paragon MPP, the Silicon Graphics Power Challenge SMP, and the MIT Phish network of workstations. Applications written in Cilk include protein folding, graphic rendering, backtrack search, and the *Socrates chess program, which won third prize in the 1994 ACM International Computer Chess Championship.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/blumofe1995cilk.html</link><guid isPermaLink="false">Literature Notes/blumofe1995cilk.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[CAP twelve years later: How the" Rules" have changed]]></title><description><![CDATA[ 
 <br><br>Eric Brewer (2012)<br>Tags: <br>Abstract
The CAP theorem asserts that any networked shared-data system can have only two of three desirable properties. However, by explicitly handling partitions, designers can optimize consistency and availability, thereby achieving some trade-off of all three. The featured Web extra is a podcast from Software Engineering Radio, in which the host interviews Dwight Merriman about the emerging NoSQL movement, the three types of nonrelational data stores, Brewer's CAP theorem, and much more.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/brewer2012cap.html</link><guid isPermaLink="false">Literature Notes/brewer2012cap.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Disco: Running commodity operating systems on scalable multiprocessors]]></title><description><![CDATA[ 
 <br><br>Edouard Bugnion, Scott Devine, Kinshuk Govil, Mendel Rosenblum (1997)<br>Tags: <br>Abstract
In this article we examine the problem of extending modern operating systems to run efficiently on large-scale shared-memory multiprocessors without a large implementation effort. Our approach brings back an idea popular in the 1970s: virtual machine monitors. We use virtual machines to run multiple commodity operating systems on a scalable multiprocessor. This solution addresses many of the challenges facing the system software for these machines. We demonstrate our approach with a prototype called Disco that runs multiple copies of Silicon Graphics' IRIX operating system on a multiprocessor. Our experience shows that the overheads of the monitor are small and that the approach provides scalability as well as the ability to deal with the nonuniform memory access time of these systems. To reduce the memory overheads associated with running multiple operating systems, virtual machines transparently share major data structures such as the program code and the file system buffer cache. We use the distributed-system support of modern operating systems to export a partial single system image to the users. The overall solution achieves most of the benefits of operating systems customized for scalable multiprocessors, yet it can be achieved with a significantly smaller implementation effort.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bugnion1997disco.html</link><guid isPermaLink="false">Literature Notes/bugnion1997disco.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Building on quicksand]]></title><description><![CDATA[ 
 <br><br>Pat Helland, David Campbell (2009)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Pat-Helland" class="tag" target="_blank" rel="noopener nofollow">#Pat-Helland</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David-Campbell" class="tag" target="_blank" rel="noopener nofollow">#David-Campbell</a><br>Abstract
Reliable systems have always been built out of unreliable components. Early on, the reliable components were small such as mirrored disks or ECC (Error Correcting Codes) in core memory. These systems were designed such that failures of these small components were transparent to the application. Later, the size of the unreliable components grew larger and semantic challenges crept into the application when failures occurred. As the granularity of the unreliable component grows, the latency to communicate with a backup becomes unpalatable. This leads to a more relaxed model for fault tolerance. The primary system will acknowledge the work request and its actions without waiting to ensure that the backup is notified of the work. This improves the responsiveness of the system. There are two implications of asynchronous state capture: 1) Everything promised by the primary is probabilistic. There is always a chance that an untimely failure shortly after the promise results in a backup proceeding without knowledge of the commitment. Hence, nothing is guaranteed! 2) Applications must ensure eventual consistency. Since work may be stuck in the primary after a failure and reappear later, the processing order for work cannot be guaranteed. Platform designers are struggling to make this easier for their applications. Emerging patterns of eventual consistency and probabilistic execution may soon yield a way for applications to express requirements for a "looser" form of consistency while providing availability in the face of ever larger failures. This paper recounts portions of the evolution of these trends, attempts to show the patterns that span these changes, and talks about future directions as we continue to "build on quicksand".
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/helland2009building.html</link><guid isPermaLink="false">Literature Notes/helland2009building.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Can learned models replace hash functions?]]></title><description><![CDATA[ 
 <br><br>Ibrahim Sabek, Kapil Vaidya, Dominik Horn, Andreas Kipf, Michael Mitzenmacher, Tim Kraska (2022)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ibrahim-Sabek" class="tag" target="_blank" rel="noopener nofollow">#Ibrahim-Sabek</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kapil-Vaidya" class="tag" target="_blank" rel="noopener nofollow">#Kapil-Vaidya</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Dominik-Horn" class="tag" target="_blank" rel="noopener nofollow">#Dominik-Horn</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andreas-Kipf" class="tag" target="_blank" rel="noopener nofollow">#Andreas-Kipf</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Mitzenmacher" class="tag" target="_blank" rel="noopener nofollow">#Michael-Mitzenmacher</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Kraska" class="tag" target="_blank" rel="noopener nofollow">#Tim-Kraska</a><br>Abstract
Hashing is a fundamental operation in database management, playing a key role in the implementation of numerous core database data structures and algorithms. Traditional hash functions aim to mimic a function that maps a key to a random value, which can result in collisions, where multiple keys are mapped to the same value. There are many well-known schemes like chaining, probing, and cuckoo hashing to handle collisions. In this work, we aim to study if using learned models instead of traditional hash functions can reduce collisions and whether such a reduction translates to improved performance, particularly for indexing and joins. We show that learned models reduce collisions in some cases, which depend on how the data is distributed. To evaluate the effectiveness of learned models as hash function, we test them with bucket chaining, linear probing, and cuckoo hash tables. We find that learned models can (1) yield a 1.4x lower probe latency, and (2) reduce the non-partitioned hash join runtime with 28% over the next best baseline for certain datasets. On the other hand, if the data distribution is not suitable, we either do not see gains or see worse performance. In summary, we find that learned models can indeed outperform hash functions, but only for certain data distributions.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/sabek2022can.html</link><guid isPermaLink="false">Literature Notes/sabek2022can.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Paxos made live: An engineering perspective]]></title><description><![CDATA[ 
 <br><br>Tushar D Chandra, Robert Griesemer, Joshua Redstone (2007)<br>Tags: <br>Abstract
We describe our experience in building a fault-tolerant data-base using the Paxos consensus algorithm. Despite the existing literature in the field, building such a database proved to be non-trivial. We describe selected algorithmic and engineering problems encountered, and the solutions we found for them. Our measurements indicate that we have built a competitive system.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chandra2007paxos.html</link><guid isPermaLink="false">Literature Notes/chandra2007paxos.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bigtable: A distributed storage system for structured data]]></title><description><![CDATA[ 
 <br><br>Fay Chang, Jeffrey Dean, Sanjay Ghemawat, Wilson C Hsieh, Deborah A Wallach, Mike Burrows, Tushar Chandra, Andrew Fikes, Robert E Gruber (2008)<br>Tags: <br>Abstract
Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size: petabytes of data across thousands of commodity servers. Many projects at Google store data in Bigtable, including web indexing, Google Earth, and Google Finance. These applications place very different demands on Bigtable, both in terms of data size (from URLs to web pages to satellite imagery) and latency requirements (from backend bulk processing to real-time data serving). Despite these varied demands, Bigtable has successfully provided a flexible, high-performance solution for all of these Google products. In this article, we describe the simple data model provided by Bigtable, which gives clients dynamic control over data layout and format, and we describe the design and implementation of Bigtable.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chang2008bigtable.html</link><guid isPermaLink="false">Literature Notes/chang2008bigtable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Attested append-only memory: Making adversaries stick to their word]]></title><description><![CDATA[ 
 <br><br>Byung-Gon Chun, Petros Maniatis, Scott Shenker, John Kubiatowicz (2007)<br>Tags: <br>Abstract
Researchers have made great strides in improving the fault tolerance of both centralized and replicated systems against arbitrary (Byzantine) faults. However, there are hard limits to how much can be done with entirely untrusted components; for example, replicated state machines cannot tolerate more than a third of their replica population being Byzantine. In this paper, we investigate how minimal trusted abstractions can push through these hard limits in practical ways. We propose Attested Append-Only Memory (A2M), a trusted system facility that is small, easy to implement and easy to verify formally. A2M provides the programming abstraction of a trusted log, which leads to protocol designs immune to equivocation – the ability of a faulty host to lie in different ways to different clients or servers – which is a common source of Byzantine headaches. Using A2M, we improve upon the state of the art in Byzantine-fault tolerant replicated state machines, producing A2M-enabled protocols (variants of Castro and Liskov's PBFT) that remain correct (linearizable) and keep making progress (live) even when half the replicas are faulty, in contrast to the previous upper bound. We also present an A2M-enabled single-server shared storage protocol that guarantees linearizability despite server faults. We implement A2M and our protocols, evaluate them experimentally through micro- and macro-benchmarks, and argue that the improved fault tolerance is cost-effective for a broad range of uses, opening up new avenues for practical, more reliable services.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chun2007attested.html</link><guid isPermaLink="false">Literature Notes/chun2007attested.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Column-stores vs. Row-stores: How different are they really?]]></title><description><![CDATA[ 
 <br><br>Daniel J Abadi, Samuel R Madden, Nabil Hachem (2008)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel" class="tag" target="_blank" rel="noopener nofollow">#Daniel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Abadi" class="tag" target="_blank" rel="noopener nofollow">#J-Abadi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Samuel" class="tag" target="_blank" rel="noopener nofollow">#Samuel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:R-Madden" class="tag" target="_blank" rel="noopener nofollow">#R-Madden</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nabil-Hachem" class="tag" target="_blank" rel="noopener nofollow">#Nabil-Hachem</a><br>Abstract
There has been a significant amount of excitement and recent work on column-oriented database systems ("column-stores"). These database systems have been shown to perform more than an order of magnitude better than traditional row-oriented database systems ("row-stores") on analytical workloads such as those found in data warehouses, decision support, and business intelligence applications. The elevator pitch behind this performance difference is straightforward: column-stores are more I/O efficient for read-only queries since they only have to read from disk (or from memory) those attributes accessed by a query. This simplistic view leads to the assumption that one can obtain the performance benefits of a column-store using a row-store: either by vertically partitioning the schema, or by indexing every column so that columns can be accessed independently. In this paper, we demonstrate that this assumption is false. We compare the performance of a commercial row-store under a variety of different configurations with a column-store and show that the row-store performance is significantly slower on a recently proposed data warehouse benchmark. We then analyze the performance difference and show that there are some important differences between the two systems at the query executor level (in addition to the obvious differences at the storage layer level). Using the column-store, we then tease apart these differences, demonstrating the impact on performance of a variety of column-oriented query execution techniques, including vectorized query processing, compression, and a new join algorithm we introduce in this paper. We conclude that while it is not impossible for a row-store to achieve some of the performance advantages of a column-store, changes must be made to both the storage layer and the query executor to fully obtain the benefits of a column-oriented approach.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abadi2008column.html</link><guid isPermaLink="false">Literature Notes/abadi2008column.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Composing parallel software efficiently with lithe]]></title><description><![CDATA[ 
 <br><br>Heidi Pan, Benjamin Hindman, Krste Asanović (2010)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Heidi-Pan" class="tag" target="_blank" rel="noopener nofollow">#Heidi-Pan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Benjamin-Hindman" class="tag" target="_blank" rel="noopener nofollow">#Benjamin-Hindman</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Krste-Asanović" class="tag" target="_blank" rel="noopener nofollow">#Krste-Asanović</a><br>Abstract
Applications composed of multiple parallel libraries perform poorly when those libraries interfere with one another by obliviously using the same physical cores, leading to destructive resource oversubscription. This paper presents the design and implementation of Lithe, a low-level substrate that provides the basic primitives and a standard interface for composing parallel codes efficiently. Lithe can be inserted underneath the runtimes of legacy parallel libraries to provide bolt-on composability without needing to change existing application code. Lithe can also serve as the foundation for building new parallel abstractions and libraries that automatically interoperate with one another. In this paper, we show versions of Threading Building Blocks (TBB) and OpenMP perform competitively with their original implementations when ported to Lithe. Furthermore, for two applications composed of multiple parallel libraries, we show that leveraging our substrate outperforms their original, even expertly tuned, implementations.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/pan2010composing.html</link><guid isPermaLink="false">Literature Notes/pan2010composing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Comprehensive formal verification of an OS microkernel]]></title><description><![CDATA[ 
 <br><br>Gerwin Klein, June Andronick, Kevin Elphinstone, Toby Murray, Thomas Sewell, Rafal Kolanski, Gernot Heiser (2014)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gerwin-Klein" class="tag" target="_blank" rel="noopener nofollow">#Gerwin-Klein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:June-Andronick" class="tag" target="_blank" rel="noopener nofollow">#June-Andronick</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kevin-Elphinstone" class="tag" target="_blank" rel="noopener nofollow">#Kevin-Elphinstone</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Toby-Murray" class="tag" target="_blank" rel="noopener nofollow">#Toby-Murray</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Sewell" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Sewell</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Rafal-Kolanski" class="tag" target="_blank" rel="noopener nofollow">#Rafal-Kolanski</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gernot-Heiser" class="tag" target="_blank" rel="noopener nofollow">#Gernot-Heiser</a><br>Abstract
We present an in-depth coverage of the comprehensive machine-checked formal verification of seL4, a general-purpose operating system microkernel. We discuss the kernel design we used to make its verification tractable. We then describe the functional correctness proof of the kernel's C implementation and we cover further steps that transform this result into a comprehensive formal verification of the kernel: a formally verified IPC fastpath, a proof that the binary code of the kernel correctly implements the C semantics, a proof of correct access-control enforcement, a proof of information-flow noninterference, a sound worst-case execution time analysis of the binary, and an automatic initialiser for user-level systems that connects kernel-level access-control enforcement with reasoning about system behaviour. We summarise these results and show how they integrate to form a coherent overall analysis, backed by machine-checked, end-to-end theorems. The seL4 microkernel is currently not just the only general-purpose operating system kernel that is fully formally verified to this degree. It is also the only example of formal proof of this scale that is kept current as the requirements, design and implementation of the system evolve over almost a decade. We report on our experience in maintaining this evolving formally verified code base.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/klein2014comprehensive.html</link><guid isPermaLink="false">Literature Notes/klein2014comprehensive.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Concurrency and recovery in generalized search trees]]></title><description><![CDATA[ 
 <br><br>Marcel Kornacker, C Mohan, Joseph M Hellerstein (1997)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Marcel-Kornacker" class="tag" target="_blank" rel="noopener nofollow">#Marcel-Kornacker</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Mohan" class="tag" target="_blank" rel="noopener nofollow">#C-Mohan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a><br>Abstract
This paper presents general algorithms for concurrency control in tree-based access methods as well as a recovery protocol and a mechanism for ensuring repeatable read. The algorithms are developed in the context of the Generalized Search Tree (GiST) data structure, an index structure supporting an extensible set of queries and data types. Although developed in a GiST context, the algorithms are generally applicable to many tree-based access methods. The concurrency control protocol is based on an extension of the link technique originally developed for B-trees, and completely avoids holding node locks during I/Os. Repeatable read isolation is achieved with a novel combination of predicate locks and two-phase locking of data records. To our knowledge, this is the first time that isolation issues have been addressed outside the context of B-trees. A discussion of the fundamental structural differences between B-trees and more general tree structures like GiSTs explains why the algorithms developed here deviate from their B-tree counterparts. An implementation of GiSTs emulating B-trees in DB2/Common Server is underway.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kornacker1997concurrency.html</link><guid isPermaLink="false">Literature Notes/kornacker1997concurrency.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Concurrency control in distributed database systems]]></title><description><![CDATA[ 
 <br><br>Philip A Bernstein, Nathan Goodman (1981)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Philip" class="tag" target="_blank" rel="noopener nofollow">#Philip</a> <a href="https://www.jayitha.github.io/Notes?query=tag:A-Bernstein" class="tag" target="_blank" rel="noopener nofollow">#A-Bernstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nathan-Goodman" class="tag" target="_blank" rel="noopener nofollow">#Nathan-Goodman</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bernstein1981concurrency.html</link><guid isPermaLink="false">Literature Notes/bernstein1981concurrency.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Conflict-free replicated data types]]></title><description><![CDATA[ 
 <br><br>Marc Shapiro, Nuno Preguiça, Carlos Baquero, Marek Zawirski (2011)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Marc-Shapiro" class="tag" target="_blank" rel="noopener nofollow">#Marc-Shapiro</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nuno-Preguiça" class="tag" target="_blank" rel="noopener nofollow">#Nuno-Preguiça</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Carlos-Baquero" class="tag" target="_blank" rel="noopener nofollow">#Carlos-Baquero</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Marek-Zawirski" class="tag" target="_blank" rel="noopener nofollow">#Marek-Zawirski</a><br>Abstract
Replicating data under Eventual Consistency (EC) allows any replica to accept updates without remote synchronisation. This ensures performance and scalability in large-scale distributed systems (e.g., clouds). However, published EC approaches are ad-hoc and error-prone. Under a formal Strong Eventual Consistency (SEC) model, we study sufficient conditions for convergence. A data type that satisfies these conditions is called a Conflict-free Replicated Data Type (CRDT). Replicas of any CRDT are guaranteed to converge in a self-stabilising manner, despite any number of failures. This paper formalises two popular approaches (state- and operation-based) and their relevant sufficient conditions. We study a number of useful CRDTs, such as sets with clean semantics, supporting both add and remove operations, and consider in depth the more complex Graph data type. CRDT types can be composed to develop large-scale distributed applications, and have interesting theoretical properties.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/shapiro2011conflict.html</link><guid isPermaLink="false">Literature Notes/shapiro2011conflict.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Conjunctive queries with comparisons]]></title><description><![CDATA[ 
 <br><br>Qichen Wang, Ke Yi (2022)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Qichen-Wang" class="tag" target="_blank" rel="noopener nofollow">#Qichen-Wang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ke-Yi" class="tag" target="_blank" rel="noopener nofollow">#Ke-Yi</a><br>Abstract
Conjunctive queries with predicates in the form of comparisons that span multiple relations have regained interest recently, due to their relevance in OLAP queries, spatiotemporal databases, and machine learning over relational data. The standard technique, predicate pushdown, has limited efficacy on such comparisons. A technique by Willard can be used to process short comparisons that are adjacent in the join tree in time linear in the input size plus output size. In this paper, we describe a new algorithm for evaluating conjunctive queries with both short and long comparisons, and identify an acyclic condition under which linear time can be achieved. We have also implemented the new algorithm on top of Spark, and our experimental results demonstrate order-of-magnitude speedups over SparkSQL on a variety of graph pattern and analytical queries.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/wang2022conjunctive.html</link><guid isPermaLink="false">Literature Notes/wang2022conjunctive.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Coordination avoidance in database systems (Extended version)]]></title><description><![CDATA[ 
 <br><br>Peter Bailis, Alan Fekete, Michael J Franklin, Ali Ghodsi, Joseph M Hellerstein, Ion Stoica (2014)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Bailis" class="tag" target="_blank" rel="noopener nofollow">#Peter-Bailis</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alan-Fekete" class="tag" target="_blank" rel="noopener nofollow">#Alan-Fekete</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael" class="tag" target="_blank" rel="noopener nofollow">#Michael</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Franklin" class="tag" target="_blank" rel="noopener nofollow">#J-Franklin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ali-Ghodsi" class="tag" target="_blank" rel="noopener nofollow">#Ali-Ghodsi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ion-Stoica" class="tag" target="_blank" rel="noopener nofollow">#Ion-Stoica</a><br>Abstract
Minimizing coordination, or blocking communication between concurrently executing operations, is key to maximizing scalability, availability, and high performance in database systems. However, uninhibited coordination-free execution can compromise application correctness, or consistency. When is coordination necessary for correctness? The classic use of serializable transactions is sufficient to maintain correctness but is not necessary for all applications, sacrificing potential scalability. In this paper, we develop a formal framework, invariant confluence, that determines whether an application requires coordination for correct execution. By operating on application-level invariants over database states (e.g., integrity constraints), invariant confluence analysis provides a necessary and sufficient condition for safe, coordination-free execution. When programmers specify their application invariants, this analysis allows databases to coordinate only when anomalies that might violate invariants are possible. We analyze the invariant confluence of common invariants and operations from real-world database systems (i.e., integrity constraints) and applications and show that many are invariant confluent and therefore achievable without coordination. We apply these results to a proof-of-concept coordination-avoiding database prototype and demonstrate sizable performance gains compared to serializable execution, notably a 25-fold improvement over prior TPC-C New-Order performance on a 200 server cluster.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bailis2014coordination.html</link><guid isPermaLink="false">Literature Notes/bailis2014coordination.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Seeing is believing: A client-centric specification of database isolation]]></title><description><![CDATA[ 
 <br><br>Natacha Crooks, Youer Pu, Lorenzo Alvisi, Allen Clement (2017)<br>Tags: <br>Abstract
This paper introduces the first state-based formalization of isolation guarantees. Our approach is premised on a simple observation: applications view storage systems as black-boxes that transition through a series of states, a subset of which are observed by applications. Defining isolation guarantees in terms of these states frees definitions from implementation-specific assumptions. It makes immediately clear what anomalies, if any, applications can expect to observe, thus bridging the gap that exists today between how isolation guarantees are defined and how they are perceived. The clarity that results from definitions based on client-observable states brings forth several benefits. First, it allows us to easily compare the guarantees of distinct, but semantically close, isolation guarantees. We find that several well-known guarantees, previously thought to be distinct, are in fact equivalent, and that many previously incomparable flavors of snapshot isolation can be organized in a clean hierarchy. Second, freeing definitions from implementation-specific artefacts can suggest more efficient implementations of the same isolation guarantee. We show how a client-centric implementation of parallel snapshot isolation can be more resilient to slowdown cascades, a common phenomenon in large-scale datacenters.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/crooks2017seeing.html</link><guid isPermaLink="false">Literature Notes/crooks2017seeing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Data base task group report to the CODASYL programming language committee, October 1969]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bachman1969database.html</link><guid isPermaLink="false">Literature Notes/bachman1969database.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Data sketching]]></title><description><![CDATA[ 
 <br><br>Graham Cormode (2017)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Graham-Cormode" class="tag" target="_blank" rel="noopener nofollow">#Graham-Cormode</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/cormode2017data.html</link><guid isPermaLink="false">Literature Notes/cormode2017data.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Data Structure Diagrams]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bachman1969data.html</link><guid isPermaLink="false">Literature Notes/bachman1969data.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database cracking.]]></title><description><![CDATA[ 
 <br><br>Stratos Idreos, Martin L Kersten, Stefan Manegold, others (2007)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Stratos-Idreos" class="tag" target="_blank" rel="noopener nofollow">#Stratos-Idreos</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Martin" class="tag" target="_blank" rel="noopener nofollow">#Martin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:L-Kersten" class="tag" target="_blank" rel="noopener nofollow">#L-Kersten</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Stefan-Manegold" class="tag" target="_blank" rel="noopener nofollow">#Stefan-Manegold</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/idreos2007database.html</link><guid isPermaLink="false">Literature Notes/idreos2007database.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database Internals: A deep dive into how distributed data systems work]]></title><description><![CDATA[ 
 <br><br>Alex Petrov (2019)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Alex-Petrov" class="tag" target="_blank" rel="noopener nofollow">#Alex-Petrov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/petrov2019database.html</link><guid isPermaLink="false">Literature Notes/petrov2019database.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database management systems]]></title><description><![CDATA[ 
 <br><br>Raghu Ramakrishnan, Johannes Gehrke (2002)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Raghu-Ramakrishnan" class="tag" target="_blank" rel="noopener nofollow">#Raghu-Ramakrishnan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Johannes-Gehrke" class="tag" target="_blank" rel="noopener nofollow">#Johannes-Gehrke</a><br>Abstract<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ramakrishnan2002database.html</link><guid isPermaLink="false">Literature Notes/ramakrishnan2002database.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database systems concepts]]></title><description><![CDATA[ 
 <br><br>Abraham Silberschatz, Henry Korth, Shashank Sudarshan (2005)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Abraham-Silberschatz" class="tag" target="_blank" rel="noopener nofollow">#Abraham-Silberschatz</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Henry-Korth" class="tag" target="_blank" rel="noopener nofollow">#Henry-Korth</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shashank-Sudarshan" class="tag" target="_blank" rel="noopener nofollow">#Shashank-Sudarshan</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/silberschatz2005database.html</link><guid isPermaLink="false">Literature Notes/silberschatz2005database.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Database systems: The complete book]]></title><description><![CDATA[ 
 <br><br>Hector Garcia-Molina (2008)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Hector-Garcia-Molina" class="tag" target="_blank" rel="noopener nofollow">#Hector-Garcia-Molina</a><br>Abstract<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/garcia2008database.html</link><guid isPermaLink="false">Literature Notes/garcia2008database.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[MapReduce: Simplified data processing on large clusters]]></title><description><![CDATA[ 
 <br><br>Jeffrey Dean, Sanjay Ghemawat (2008)<br>Tags: <br>Abstract
MapReduce is a programming model and an associated implementation for processing and generating large datasets that is amenable to a broad variety of real-world tasks. Users specify the computation in terms of a map and a reduce function, and the underlying runtime system automatically parallelizes the computation across large-scale clusters of machines, handles machine failures, and schedules inter-machine communication to make efficient use of the network and disks. Programmers find the system easy to use: more than ten thousand distinct MapReduce programs have been implemented internally at Google over the past four years, and an average of one hundred thousand MapReduce jobs are executed on Google's clusters every day, processing a total of more than twenty petabytes of data per day.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/dean2008mapreduce.html</link><guid isPermaLink="false">Literature Notes/dean2008mapreduce.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Dynamo: Amazon's highly available key-value store]]></title><description><![CDATA[ 
 <br><br>Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, Gunavardhan Kakulapati, Avinash Lakshman, Alex Pilchin, Swaminathan Sivasubramanian, Peter Vosshall, Werner Vogels (2007)<br>Tags: <br>Abstract
Reliability at massive scale is one of the biggest challenges we face at Amazon.com, one of the largest e-commerce operations in the world; even the slightest outage has significant financial consequences and impacts customer trust. The Amazon.com platform, which provides services for many web sites worldwide, is implemented on top of an infrastructure of tens of thousands of servers and network components located in many datacenters around the world. At this scale, small and large components fail continuously and the way persistent state is managed in the face of these failures drives the reliability and scalability of the software systems. This paper presents the design and implementation of Dynamo, a highly available key-value storage system that some of Amazon's core services use to provide an "always-on" experience. To achieve this level of availability, Dynamo sacrifices consistency under certain failure scenarios. It makes extensive use of object versioning and application-assisted conflict resolution in a manner that provides a novel interface for developers to use.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/decandia2007dynamo.html</link><guid isPermaLink="false">Literature Notes/decandia2007dynamo.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Deep unsupervised cardinality estimation]]></title><description><![CDATA[ 
 <br><br>Zongheng Yang, Eric Liang, Amog Kamsetty, Chenggang Wu, Yan Duan, Xi Chen, Pieter Abbeel, Joseph M Hellerstein, Sanjay Krishnan, Ion Stoica (2019)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Zongheng-Yang" class="tag" target="_blank" rel="noopener nofollow">#Zongheng-Yang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eric-Liang" class="tag" target="_blank" rel="noopener nofollow">#Eric-Liang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Amog-Kamsetty" class="tag" target="_blank" rel="noopener nofollow">#Amog-Kamsetty</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Chenggang-Wu" class="tag" target="_blank" rel="noopener nofollow">#Chenggang-Wu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Yan-Duan" class="tag" target="_blank" rel="noopener nofollow">#Yan-Duan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Xi-Chen" class="tag" target="_blank" rel="noopener nofollow">#Xi-Chen</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Pieter-Abbeel" class="tag" target="_blank" rel="noopener nofollow">#Pieter-Abbeel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanjay-Krishnan" class="tag" target="_blank" rel="noopener nofollow">#Sanjay-Krishnan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ion-Stoica" class="tag" target="_blank" rel="noopener nofollow">#Ion-Stoica</a><br>Abstract
Cardinality estimation has long been grounded in statistical tools for density estimation. To capture the rich multivariate distributions of relational tables, we propose the use of a new type of high-capacity statistical model: deep autoregressive models. However, direct application of these models leads to a limited estimator that is prohibitively expensive to evaluate for range or wildcard predicates. To produce a truly usable estimator, we develop a Monte Carlo integration scheme on top of autoregressive models that can efficiently handle range queries with dozens of dimensions or more. Like classical synopses, our estimator summarizes the data without supervision. Unlike previous solutions, we approximate the joint data distribution without any independence assumptions. Evaluated on real-world datasets and compared against real systems and dominant families of techniques, our estimator achieves single-digit multiplicative error at tail, an up to 90[Math Processing Error] accuracy improvement over the second best method, and is space- and runtime-efficient.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/yang2019deep.html</link><guid isPermaLink="false">Literature Notes/yang2019deep.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Designing data-intensive applications: The big ideas behind reliable, scalable, and maintainable systems]]></title><description><![CDATA[ 
 <br><br>Martin Kleppmann (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Martin-Kleppmann" class="tag" target="_blank" rel="noopener nofollow">#Martin-Kleppmann</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract<br><br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kleppmann2014designing.html</link><guid isPermaLink="false">Literature Notes/kleppmann2014designing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Differential dataflow]]></title><description><![CDATA[ 
 <br><br>Frank McSherry, Derek Gordon Murray, Rebecca Isaacs, Michael Isard (2013)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Frank-McSherry" class="tag" target="_blank" rel="noopener nofollow">#Frank-McSherry</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Derek" class="tag" target="_blank" rel="noopener nofollow">#Derek</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gordon-Murray" class="tag" target="_blank" rel="noopener nofollow">#Gordon-Murray</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Rebecca-Isaacs" class="tag" target="_blank" rel="noopener nofollow">#Rebecca-Isaacs</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Isard" class="tag" target="_blank" rel="noopener nofollow">#Michael-Isard</a><br>Abstract<br>Notes<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mcsherry2013differential.html</link><guid isPermaLink="false">Literature Notes/mcsherry2013differential.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Distributed Computing through Combinatorial Topology]]></title><description><![CDATA[ 
 <br><br><a data-href="Graph" href="https://www.jayitha.github.io/Notes/Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Graph</a><a data-href="Graph" href="https://www.jayitha.github.io/Notes/glossary/graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Graph</a><br>
<a data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/Isolated Vertex" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Isolated Vertex</a><a data-href="Isolated Vertex" href="https://www.jayitha.github.io/Notes/glossary/isolated-vertex.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Isolated Vertex</a><br>
<a data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/Pure Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pure Graph</a><a data-href="Pure Graph" href="https://www.jayitha.github.io/Notes/glossary/pure-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pure Graph</a><br>
<a data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/Connected Graph" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Connected Graph</a><a data-href="Connected Graph" href="https://www.jayitha.github.io/Notes/glossary/connected-graph.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Connected Graph</a><br>
<a data-href="Simplex" href="https://www.jayitha.github.io/Notes/Simplex" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Simplex</a><a data-href="Simplex" href="https://www.jayitha.github.io/Notes/glossary/simplex.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Simplex</a><br>
<a data-href="Labeling" href="https://www.jayitha.github.io/Notes/Labeling" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Labeling</a><a data-href="Labeling" href="https://www.jayitha.github.io/Notes/glossary/labeling.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Labeling</a><br>
<a data-href="Coloring" href="https://www.jayitha.github.io/Notes/Coloring" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Coloring</a><a data-href="Coloring" href="https://www.jayitha.github.io/Notes/glossary/coloring.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Coloring</a><br>
<a data-href="Labeled Chromatic Graph (LCG)" href="https://www.jayitha.github.io/Notes/Labeled Chromatic Graph (LCG)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Labeled Chromatic Graph (LCG)</a><a data-href="Labeled Chromatic Graph (LCG)" href="https://www.jayitha.github.io/Notes/glossary/labeled-chromatic-graph-(lcg).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Labeled Chromatic Graph (LCG)</a><br>
<a data-href="Vertex Map" href="https://www.jayitha.github.io/Notes/Vertex Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Vertex Map</a><a data-href="Vertex Map" href="https://www.jayitha.github.io/Notes/glossary/vertex-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Vertex Map</a><br>
<a data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Simplical Map</a><a data-href="Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Simplical Map</a><br>
<a data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/Rigid Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rigid Simplical Map</a><a data-href="Rigid Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rigid Simplical Map</a><br>
<a data-href="Chromatic Simplical Map" href="https://www.jayitha.github.io/Notes/Chromatic Simplical Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chromatic Simplical Map</a><a data-href="Chromatic Simplical Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-simplical-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chromatic Simplical Map</a><br>
<a data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Carrier Map</a><a data-href="Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Carrier Map</a><br>
<a data-href="Strict Carrier Map" href="https://www.jayitha.github.io/Notes/Strict Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Strict Carrier Map</a><a data-href="Strict Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/strict-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Strict Carrier Map</a><br>
<a data-href="Rigid Carrier Map" href="https://www.jayitha.github.io/Notes/Rigid Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rigid Carrier Map</a><a data-href="Rigid Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/rigid-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rigid Carrier Map</a><br>
<a data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/Connected Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Connected Carrier Map</a><a data-href="Connected Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/connected-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Connected Carrier Map</a><br>
<a data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/Chromatic Carrier Map" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Chromatic Carrier Map</a><a data-href="Chromatic Carrier Map" href="https://www.jayitha.github.io/Notes/glossary/chromatic-carrier-map.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Chromatic Carrier Map</a><br>
<a data-href="Composition of Maps" href="https://www.jayitha.github.io/Notes/Composition of Maps" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Composition of Maps</a><a data-href="Composition of Maps" href="https://www.jayitha.github.io/Notes/glossary/composition-of-maps.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Composition of Maps</a><br>
<a data-href="Task" href="https://www.jayitha.github.io/Notes/Task" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Task</a><a data-href="Task" href="https://www.jayitha.github.io/Notes/glossary/task.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Task</a><br>
<a data-href="Coordinated Attack" href="https://www.jayitha.github.io/Notes/Coordinated Attack" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Coordinated Attack</a><a data-href="Coordinated Attack" href="https://www.jayitha.github.io/Notes/glossary/coordinated-attack.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Coordinated Attack</a><br>
<a data-href="Consensus" href="https://www.jayitha.github.io/Notes/Consensus" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Consensus</a><a data-href="Consensus" href="https://www.jayitha.github.io/Notes/glossary/consensus.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Consensus</a><br>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rajsbaum2014distributed.html</link><guid isPermaLink="false">Literature Notes/rajsbaum2014distributed.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Distributed Computing Through Combinatorial Topology]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://cs.brown.edu/courses/csci2951-s/" rel="noopener nofollow" class="external-link" href="https://cs.brown.edu/courses/csci2951-s/" target="_blank">Related Course</a>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/herlihy2013distributed.html</link><guid isPermaLink="false">Literature Notes/herlihy2013distributed.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[ReVirt: Enabling intrusion analysis through virtual-machine logging and replay]]></title><description><![CDATA[ 
 <br><br>George W Dunlap, Samuel T King, Sukru Cinar, Murtaza A Basrai, Peter M Chen (2002)<br>Tags: <br>Abstract
Current system loggers have two problems: they depend on the integrity of the operating system being logged, and they do not save sufficient information to replay and analyze attacks that include any non-deterministic events. ReVirt removes the dependency on the target operating system by moving it into a virtual machine and logging below the virtual machine. This allows ReVirt to replay the system's execution before, during, and after an intruder compromises the system, even if the intruder replaces the target operating system. ReVirt logs enough information to replay a long-term execution of the virtual machine instruction-by-instruction. This enables it to provide arbitrarily detailed observations about what transpired on the system, even in the presence of non-deterministic attacks and executions. ReVirt adds reasonable time and space overhead. Overheads due to virtualization are imperceptible for interactive use and CPU-bound workloads, and 13–58% for kernel-intensive workloads. Logging adds 0–8% overhead, and logging traffic for our workloads can be stored on a single disk for several months.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/dunlap2002revirt.html</link><guid isPermaLink="false">Literature Notes/dunlap2002revirt.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Efficient locking for concurrent operations on B-trees]]></title><description><![CDATA[ 
 <br><br>Philip L Lehman, S Bing Yao (1981)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Philip" class="tag" target="_blank" rel="noopener nofollow">#Philip</a> <a href="https://www.jayitha.github.io/Notes?query=tag:L-Lehman" class="tag" target="_blank" rel="noopener nofollow">#L-Lehman</a> <a href="https://www.jayitha.github.io/Notes?query=tag:S" class="tag" target="_blank" rel="noopener nofollow">#S</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Bing-Yao" class="tag" target="_blank" rel="noopener nofollow">#Bing-Yao</a><br>Abstract
The B-tree and its variants have been found to be highly useful (both theoretically and in practice) for storing large amounts of information, especially on secondary storage devices. We examine the problem of overcoming the inherent difficulty of concurrent operations on such structures, using a practical storage model. A single additional “link” pointer in each node allows a process to easily recover from tree modifications performed by other concurrent processes. Our solution compares favorably with earlier solutions in that the locking scheme is simpler (no read-locks are used) and only a (small) constant number of nodes are locked by any update process at any given time. An informal correctness proof for our system is given.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lehman1981efficient.html</link><guid isPermaLink="false">Literature Notes/lehman1981efficient.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Efficient optimistic concurrency control using loosely synchronized clocks]]></title><description><![CDATA[ 
 <br><br>Atul Adya, Robert Gruber, Barbara Liskov, Umesh Maheshwari (1995)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Atul-Adya" class="tag" target="_blank" rel="noopener nofollow">#Atul-Adya</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Robert-Gruber" class="tag" target="_blank" rel="noopener nofollow">#Robert-Gruber</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Barbara-Liskov" class="tag" target="_blank" rel="noopener nofollow">#Barbara-Liskov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Umesh-Maheshwari" class="tag" target="_blank" rel="noopener nofollow">#Umesh-Maheshwari</a><br>Abstract
This paper describes an efficient optimistic concurrency control scheme for use in distributed database systems in which objects are cached and manipulated at client machines while persistent storage and transactional support are provided by servers. The scheme provides both serializability and external consistency for committed transactions; it uses loosely synchronized clocks to achieve global serialization. It stores only a single version of each object, and avoids maintaining any concurrency control information on a per-object basis; instead, it tracks recent invalidations on a per-client basis, an approach that has low in-memory space overhead and no per-object disk overhead. In addition to its low space overheads, the scheme also performs well. The paper presents a simulation study that compares the scheme to adaptive callback locking, the best concurrency control scheme for client-server object-oriented database systems studied to date. The study shows that our scheme outperforms adaptive callback locking for low to moderate contention workloads, and scales better with the number of clients. For high contention workloads, optimism can result in a high abort rate; the scheme presented here is a first step toward a hybrid scheme that we expect to perform well across the full range of workloads.
<br>ksjkdjksjdk]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/adya1995efficient.html</link><guid isPermaLink="false">Literature Notes/adya1995efficient.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Efficiently compiling efficient query plans for modern hardware]]></title><description><![CDATA[ 
 <br><br>Thomas Neumann (2011)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a><br>Abstract
As main memory grows, query performance is more and more determined by the raw CPU costs of query processing itself. The classical iterator style query processing technique is very simple and exible, but shows poor performance on modern CPUs due to lack of locality and frequent instruction mispredictions. Several techniques like batch oriented processing or vectorized tuple processing have been proposed in the past to improve this situation, but even these techniques are frequently out-performed by hand-written execution plans. In this work we present a novel compilation strategy that translates a query into compact and efficient machine code using the LLVM compiler framework. By aiming at good code and data locality and predictable branch layout the resulting code frequently rivals the performance of hand-written C++ code. We integrated these techniques into the HyPer main memory database system and show that this results in excellent query performance while requiring only modest compilation time.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/neumann2011efficiently.html</link><guid isPermaLink="false">Literature Notes/neumann2011efficiently.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[End-to-end arguments in system design]]></title><description><![CDATA[ 
 <br><br>Jerome H Saltzer, David P Reed, David D Clark (1984)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jerome" class="tag" target="_blank" rel="noopener nofollow">#Jerome</a> <a href="https://www.jayitha.github.io/Notes?query=tag:H-Saltzer" class="tag" target="_blank" rel="noopener nofollow">#H-Saltzer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David" class="tag" target="_blank" rel="noopener nofollow">#David</a> <a href="https://www.jayitha.github.io/Notes?query=tag:P-Reed" class="tag" target="_blank" rel="noopener nofollow">#P-Reed</a> <a href="https://www.jayitha.github.io/Notes?query=tag:D-Clark" class="tag" target="_blank" rel="noopener nofollow">#D-Clark</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/saltzer1984end.html</link><guid isPermaLink="false">Literature Notes/saltzer1984end.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Exokernel: An operating system architecture for application-level resource management]]></title><description><![CDATA[ 
 <br><br>Dawson R Engler, M Frans Kaashoek, James O'Toole Jr (1995)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/engler1995exokernel.html</link><guid isPermaLink="false">Literature Notes/engler1995exokernel.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Everything you always wanted to know about compiled and vectorized queries but were afraid to ask]]></title><description><![CDATA[ 
 <br><br>Timo Kersten, Viktor Leis, Alfons Kemper, Thomas Neumann, Andrew Pavlo, Peter Boncz (2018)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Timo-Kersten" class="tag" target="_blank" rel="noopener nofollow">#Timo-Kersten</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Viktor-Leis" class="tag" target="_blank" rel="noopener nofollow">#Viktor-Leis</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Pavlo" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Pavlo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Boncz" class="tag" target="_blank" rel="noopener nofollow">#Peter-Boncz</a><br>Abstract
The query engines of most modern database systems are either based on vectorization or data-centric code generation. These two state-of-the-art query processing paradigms are fundamentally different in terms of system structure and query execution code. Both paradigms were used to build fast systems. However, until today it is not clear which paradigm yields faster query execution, as many implementation-specific choices obstruct a direct comparison of architectures. In this paper, we experimentally compare the two models by implementing both within the same test system. This allows us to use for both models the same query processing algorithms, the same data structures, and the same parallelization framework to ultimately create an apples-to-apples comparison. We find that both are efficient, but have different strengths and weaknesses. Vectorization is better at hiding cache miss latency, whereas data-centric compilation requires fewer CPU instructions, which benefits cache-resident workloads. Besides raw, single-threaded performance, we also investigate SIMD as well as multi-core parallelization and different hardware architectures. Finally, we analyze qualitative differences as a guide for system architects.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kersten2018everything.html</link><guid isPermaLink="false">Literature Notes/kersten2018everything.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Fast serializable multi-version concurrency control for main-memory database systems]]></title><description><![CDATA[ 
 <br><br>Thomas Neumann, Tobias Mühlbauer, Alfons Kemper (2015)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tobias-Mühlbauer" class="tag" target="_blank" rel="noopener nofollow">#Tobias-Mühlbauer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a><br>Abstract
Multi-Version Concurrency Control (MVCC) is a widely employed concurrency control mechanism, as it allows for execution modes where readers never block writers. However, most systems implement only snapshot isolation (SI) instead of full serializability. Adding serializability guarantees to existing SI implementations tends to be prohibitively expensive. We present a novel MVCC implementation for main-memory database systems that has very little overhead compared to serial execution with single-version concurrency control, even when maintaining serializability guarantees. Updating data in-place and storing versions as before-image deltas in undo buffers not only allows us to retain the high scan performance of single-version systems but also forms the basis of our cheap and fine-grained serializability validation mechanism. The novel idea is based on an adaptation of precision locking and verifies that the (extensional) writes of recently committed transactions do not intersect with the (intensional) read predicate space of a committing transaction. We experimentally show that our MVCC model allows very fast processing of transactions with point accesses as well as read-heavy transactions and that there is little need to prefer SI over full serializability any longer.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/neumann2015fast.html</link><guid isPermaLink="false">Literature Notes/neumann2015fast.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Feasibility of a set-theoretic data structure: A general structure based on a reconstituted definition of relation]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/childs1968feasibility.html</link><guid isPermaLink="false">Literature Notes/childs1968feasibility.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Foundations of Databases]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations.html</link><guid isPermaLink="false">Literature Notes/abiteboul1995foundations.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Fundamentals of database systems 7th ed.]]></title><description><![CDATA[ 
 <br><br>Ramez Elmasri, Shamkant B Navathe (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ramez-Elmasri" class="tag" target="_blank" rel="noopener nofollow">#Ramez-Elmasri</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shamkant" class="tag" target="_blank" rel="noopener nofollow">#Shamkant</a> <a href="https://www.jayitha.github.io/Notes?query=tag:B-Navathe" class="tag" target="_blank" rel="noopener nofollow">#B-Navathe</a><br>Abstract<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/elmasri2016fundamentals.html</link><guid isPermaLink="false">Literature Notes/elmasri2016fundamentals.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Generalized isolation level definitions]]></title><description><![CDATA[ 
 <br><br>Atul Adya, Barbara Liskov, Patrick O'Neil (2000)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Atul-Adya" class="tag" target="_blank" rel="noopener nofollow">#Atul-Adya</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Barbara-Liskov" class="tag" target="_blank" rel="noopener nofollow">#Barbara-Liskov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Patrick-O" class="tag" target="_blank" rel="noopener nofollow">#Patrick-O</a>'Neil<br>Abstract
Commercial databases support different isolation levels to allow programmers to trade off consistency for a potential gain in performance. The isolation levels are defined in the current ANSI standard, but the definitions are ambiguous and revised definitions proposed to correct the problem are too constrained since they allow only pessimistic (locking) implementations. This paper presents new specifications for the ANSI levels. Our specifications are portable: they apply not only to locking implementations, but also to optimistic and multi-version concurrency control schemes. Furthermore, unlike earlier definitions, our new specifications handle predicates in a correct and flexible manner at all levels.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/adya2000generalized.html</link><guid isPermaLink="false">Literature Notes/adya2000generalized.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Dominant resource fairness: Fair allocation of multiple resource types]]></title><description><![CDATA[ 
 <br><br>Ali Ghodsi, Matei Zaharia, Benjamin Hindman, Andy Konwinski, Scott Shenker, Ion Stoica (2011)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ghodsi2011dominant.html</link><guid isPermaLink="false">Literature Notes/ghodsi2011dominant.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Granularity of locks and degrees of consistency]]></title><description><![CDATA[ 
 <br><br>R Lorie J Gray, GF Putzolu, IL Traiger (1976)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:R-Lorie" class="tag" target="_blank" rel="noopener nofollow">#R-Lorie</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Gray" class="tag" target="_blank" rel="noopener nofollow">#J-Gray</a> <a href="https://www.jayitha.github.io/Notes?query=tag:GF-Putzolu" class="tag" target="_blank" rel="noopener nofollow">#GF-Putzolu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:IL-Traiger" class="tag" target="_blank" rel="noopener nofollow">#IL-Traiger</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gray1976granularity.html</link><guid isPermaLink="false">Literature Notes/gray1976granularity.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The transaction concept: Virtues and limitations]]></title><description><![CDATA[ 
 <br><br>Jim Gray, others (1981)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gray1981transaction.html</link><guid isPermaLink="false">Literature Notes/gray1981transaction.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[SBFT: A scalable and decentralized trust infrastructure]]></title><description><![CDATA[ 
 <br><br>Guy Golan Gueta, Ittai Abraham, Shelly Grossman, Dahlia Malkhi, Benny Pinkas, Michael Reiter, Dragos-Adrian Seredinschi, Orr Tamir, Alin Tomescu (2019)<br>Tags: <br>Abstract
SBFT is a state of the art Byzantine fault tolerant state machine replication system that addresses the challenges of scalability, decentralization and global geo-replication. SBFT is optimized for decentralization and is experimentally evaluated on a deployment of more than 200 active replicas withstanding a malicious adversary controlling f=64 replicas. Our experiments show how the different algorithmic ingredients of SBFT contribute to its performance and scalability. The results show that SBFT simultaneously provides almost 2x better throughput and about 1.5x better latency relative to a highly optimized system that implements the PBFT protocol. To achieve this performance improvement, SBFT uses a combination of four ingredients: using collectors and threshold signatures to reduce communication to linear, using an optimistic fast path, reducing client communication and utilizing redundant servers for the fast path. SBFT is the first system to implement a correct dual-mode view change protocol that allows to efficiently run either an optimistic fast path or a fallback slow path without incurring a view change to switch between modes.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gueta2019sbft.html</link><guid isPermaLink="false">Literature Notes/gueta2019sbft.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[You can teach elephants to dance: Agile VM handoff for edge computing]]></title><description><![CDATA[ 
 <br><br>Kiryong Ha, Yoshihisa Abe, Thomas Eiszler, Zhuo Chen, Wenlu Hu, Brandon Amos, Rohit Upadhyaya, Padmanabhan Pillai, Mahadev Satyanarayanan (2017)<br>Tags: <br>Abstract
M handoff enables rapid and transparent placement changes to executing code in edge computing use cases where the safety and management attributes of VM encapsulation are important. This versatile primitive offers the functionality of classic live migration but is highly optimized for the edge. Over WAN bandwidths ranging from 5 to 25 Mbps, VM handoff migrates a running 8 GB VM in about a minute, with a downtime of a few tens of seconds. By dynamically adapting to varying network bandwidth and processing load, VM handoff is more than an order of magnitude faster than live migration at those bandwidths.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ha2017you.html</link><guid isPermaLink="false">Literature Notes/ha2017you.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Handling churn in a DHT]]></title><description><![CDATA[ 
 <br><br>Sean Rhea, Dennis Geels, Timothy Roscoe, John Kubiatowicz, others (2004)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sean-Rhea" class="tag" target="_blank" rel="noopener nofollow">#Sean-Rhea</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Dennis-Geels" class="tag" target="_blank" rel="noopener nofollow">#Dennis-Geels</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Timothy-Roscoe" class="tag" target="_blank" rel="noopener nofollow">#Timothy-Roscoe</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John-Kubiatowicz" class="tag" target="_blank" rel="noopener nofollow">#John-Kubiatowicz</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rhea2004handling.html</link><guid isPermaLink="false">Literature Notes/rhea2004handling.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Interactive data analysis: The Control project]]></title><description><![CDATA[ 
 <br><br>J.M. Hellerstein, R. Avnur, A. Chou, C. Hidber, C. Olston, V. Raman, T. Roth, P.J. Haas (1999)<br>Tags: <br>Abstract
Data analysis is fundamentally an iterative process in which you issue a query, receive a response, formulate the next query based on the response, and repeat. You usually don't issue a single, perfectly chosen query and get the information you want from a database; indeed, the purpose of data analysis is to extract unknown information, and in most situations, there is no one perfect query. People naturally start by asking broad, big-picture questions and then continually refine their questions based on feedback and domain knowledge. In the Control (Continuous Output and Navigation Technology with Refinement Online) project at the University of California, Berkeley, the authors are working with collaborators at IBM, Informix, and elsewhere to explore ways to improve human-computer interaction during data analysis. The Control project's goal is to develop interactive, intuitive techniques for analyzing massive data sets.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hellerstein1999interactive.html</link><guid isPermaLink="false">Literature Notes/hellerstein1999interactive.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Keeping CALM: When distributed consistency is easy]]></title><description><![CDATA[ 
 <br><br>Joseph M Hellerstein, Peter Alvaro (2020)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hellerstein2020keeping.html</link><guid isPermaLink="false">Literature Notes/hellerstein2020keeping.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[XFS: The big storage file system for Linux]]></title><description><![CDATA[ 
 <br><br>Christoph Hellwig (2009)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hellwig2009xfs.html</link><guid isPermaLink="false">Literature Notes/hellwig2009xfs.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Column sketches: A scan accelerator for rapid and robust predicate evaluation]]></title><description><![CDATA[ 
 <br><br>Brian Hentschel, Michael S Kester, Stratos Idreos (2018)<br>Tags: <br>Abstract
While numerous indexing and storage schemes have been developed to address the core functionality of predicate evaluation in data systems, they all require specific workload properties (query selectivity, data distribution, data clustering) to provide good performance and fail in other cases. We present a new class of indexing scheme, termed a Column Sketch, which improves the performance of predicate evaluation independently of workload properties. Column Sketches work primarily through the use of lossy compression schemes which are designed so that the index ingests data quickly, evaluates any query performantly, and has small memory footprint. A Column Sketch works by applying this lossy compression on a value-by-value basis, mapping base data to a representation of smaller fixed width codes. Queries are evaluated affirmatively or negatively for the vast majority of values using the compressed data, and only if needed check the base data for the remaining values. Column Sketches work over column, row, and hybrid storage layouts. We demonstrate that by using a Column Sketch, the select operator in modern analytic systems attains better CPU efficiency and less data movement than state-of-the-art storage and indexing schemes. Compared to standard scans, Column Sketches provide an improvement of 3x-6x for numerical attributes and 2.7x for categorical attributes. Compared to state-of-the-art scan accelerators such as Column Imprints and BitWeaving, Column Sketches perform 1.4 - 4.8× better.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hentschel2018column.html</link><guid isPermaLink="false">Literature Notes/hentschel2018column.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[High-performance concurrency control mechanisms for main-memory databases]]></title><description><![CDATA[ 
 <br><br>Per-Åke Larson, Spyros Blanas, Cristian Diaconu, Craig Freedman, Jignesh M Patel, Mike Zwilling (2011)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Per-Åke-Larson" class="tag" target="_blank" rel="noopener nofollow">#Per-Åke-Larson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Spyros-Blanas" class="tag" target="_blank" rel="noopener nofollow">#Spyros-Blanas</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Cristian-Diaconu" class="tag" target="_blank" rel="noopener nofollow">#Cristian-Diaconu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Craig-Freedman" class="tag" target="_blank" rel="noopener nofollow">#Craig-Freedman</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jignesh" class="tag" target="_blank" rel="noopener nofollow">#Jignesh</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Patel" class="tag" target="_blank" rel="noopener nofollow">#M-Patel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mike-Zwilling" class="tag" target="_blank" rel="noopener nofollow">#Mike-Zwilling</a><br>Abstract
A database system optimized for in-memory storage can support much higher transaction rates than current systems. However, standard concurrency control methods used today do not scale to the high transaction rates achievable by such systems. In this paper we introduce two efficient concurrency control methods specifically designed for main-memory databases. Both use multiversioning to isolate read-only transactions from updates but differ in how atomicity is ensured: one is optimistic and one is pessimistic. To avoid expensive context switching, transactions never block during normal processing but they may have to wait before commit to ensure correct serialization ordering. We also implemented a main-memory optimized version of single-version locking. Experimental results show that while single-version locking works well when transactions are short and contention is low performance degrades under more demanding conditions. The multiversion schemes have higher overhead but are much less sensitive to hotspots and the presence of long-running transactions.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/larson2011high.html</link><guid isPermaLink="false">Literature Notes/larson2011high.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[How good are query optimizers, really?]]></title><description><![CDATA[ 
 <br><br>Viktor Leis, Andrey Gubichev, Atanas Mirchev, Peter Boncz, Alfons Kemper, Thomas Neumann (2015)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Viktor-Leis" class="tag" target="_blank" rel="noopener nofollow">#Viktor-Leis</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrey-Gubichev" class="tag" target="_blank" rel="noopener nofollow">#Andrey-Gubichev</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Atanas-Mirchev" class="tag" target="_blank" rel="noopener nofollow">#Atanas-Mirchev</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Boncz" class="tag" target="_blank" rel="noopener nofollow">#Peter-Boncz</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a><br>Abstract
Finding a good join order is crucial for query performance. In this paper, we introduce the Join Order Benchmark (JOB) and experimentally revisit the main components in the classic query optimizer architecture using a complex, real-world data set and realistic multi-join queries. We investigate the quality of industrial-strength cardinality estimators and find that all estimators routinely produce large errors. We further show that while estimates are essential for finding a good join order, query performance is unsatisfactory if the query engine relies too heavily on these estimates. Using another set of experiments that measure the impact of the cost model, we find that it has much less influence on query performance than the cardinality estimates. Finally, we investigate plan enumeration techniques comparing exhaustive dynamic programming with heuristic algorithms and find that exhaustive enumeration improves performance despite the sub-optimal cardinality estimates.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/leis2015good.html</link><guid isPermaLink="false">Literature Notes/leis2015good.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[How to read a paper]]></title><description><![CDATA[ 
 <br><br>Srinivasan Keshav (2007)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Srinivasan-Keshav" class="tag" target="_blank" rel="noopener nofollow">#Srinivasan-Keshav</a> <a href="https://www.jayitha.github.io/Notes?query=tag:read" class="tag" target="_blank" rel="noopener nofollow">#read</a><br>Abstract
Researchers spend a great deal of time reading research papers. However, this skill is rarely taught, leading to much wasted effort. This article outlines a practical and efficient three-pass method for reading research papers. I also describe how to use this method to do a literature survey.
<br>
<br>Three-pass method for reading research papers

<br>The First Pass

<br>Quick scan to get bird's eye view of paper
<br>Should take upto 5-10 mins
<br>Consists of the following steps

<br>Carefully read title, abstract and introduction (and related work if writing a survey)
<br>Read section and sub-section headings only
<br>Skim math to see if you have the theoretical foundations
<br>Read conclusion
<br>Skim references to take stock of which ones you've read


<br>After first pass you should be able to answer the five Cs

<br>Category - type of paper
<br>Context - related papers
<br>Correctness
<br>Contributions
<br>Clarity


<br>If a reviewer cannot understand your paper after the first pass, it is likely to be rejected; advocates graphical abstracts (summarize paper with a single figure)


<br>The Second Pass

<br>Read paper ignoring details like proofs
<br>Should take upto an hour (for an exp. reader)
<br>Jot down key points
<br>Note down terms you don't understand
<br>Note down questions you might want to ask the author
<br>If you're reviewing, pay special attention to the figures, diagrams, illustrations and plots

<br>Make sure conclusions are drawn from statistically significant plots


<br>Mark unread references for future reading


<br>The Third Pass

<br>Attempt to virtually re-implement the paper
<br>Can take many hours for a beginner and 2 or more for an exp. reader
<br>By re-creating the work you may better understand where the work fails and if invalid (or implicit) assumptions were made
<br>Challenge every assumption in every statement
<br>Jot down ideas for future work
<br>You should be able to reconstruct the entire paper from memory and identify weak and strong points
<br>You should also be able to point out missing citations and issues with experimental and analytical content




<br>Literature Survey

<br>Use GoogleScholar and some key words to find 5 recent highly-cited papers
<br>Do the first pass over these papers and the related work section
<br>If a survey exists, read the survey
<br>Else, find shared citations and repeated authors. Track down important conferences and journals
<br>Go through these venues to find high quality related work
<br>Make two passes through these papers, generating the first version of your survey
<br>Identify unread key papers from set and iterate as necessary


<br><img alt="Pasted image 20231226173413.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20231226173413.png"><br>
Source: From Paper<br>Resources<br>
<br>
<a data-tooltip-position="top" aria-label="roscoe2007writing" data-href="roscoe2007writing" href="https://www.jayitha.github.io/Notes/roscoe2007writing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Writing reviews for systems conferences</a><a data-tooltip-position="top" aria-label="roscoe2007writing" data-href="roscoe2007writing" href="https://www.jayitha.github.io/Notes/literature-notes/roscoe2007writing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Writing reviews for systems conferences</a>

<br>
<a data-tooltip-position="top" aria-label="http://www.cs.columbia.edu/%E2%88%BChgs/etc/writing-style.html" rel="noopener nofollow" class="external-link" href="http://www.cs.columbia.edu/%E2%88%BChgs/etc/writing-style.html" target="_blank">H. Schulzrinne, “Writing Technical Articles”</a>

<br>
[G.M. Whitesides, “Whitesides’ Group: Writing a Paper”](<a data-tooltip-position="top" aria-label="http://www.ee.ucr.edu/%E2%88%BCrlake/Whitesides" rel="noopener nofollow" class="external-link" href="http://www.ee.ucr.edu/%E2%88%BCrlake/Whitesides" target="_blank">http://www.ee.ucr.edu/∼rlake/Whitesides</a> writing res paper.pdf)

<br>
[S. Peyton Jones, “Research Skills”](<a rel="noopener nofollow" class="external-link" href="http://research.microsoft.com/en-" target="_blank">http://research.microsoft.com/en-</a> us/um/people/simonpj/papers/giving-a-talk/giving-a- talk.htm)

<br>
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/keshav2007read.html</link><guid isPermaLink="false">Literature Notes/keshav2007read.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20231226173413.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20231226173413.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Hydroflow: A model and runtime for distributed systems programming]]></title><description><![CDATA[ 
 <br><br>Mingwei Samuel, Joseph M Hellerstein, Alvin Cheung (2021)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mingwei-Samuel" class="tag" target="_blank" rel="noopener nofollow">#Mingwei-Samuel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alvin-Cheung" class="tag" target="_blank" rel="noopener nofollow">#Alvin-Cheung</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/samuel2021hydroflow.html</link><guid isPermaLink="false">Literature Notes/samuel2021hydroflow.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Hyper: Hybrid OLTP&OLAP high performance database system]]></title><description><![CDATA[ 
 <br><br>Alfons Kemper, Thomas Neumann (2010)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
The two areas of online transaction processing (OLTP) and online analytical processing (OLAP) present different challenges for database architectures. Currently, customers with high rates of mission-critical transactions have split their data into two separate systems, one database for OLTP and one so-called data warehouse for OLAP. While allowing for decent transaction rates, this separation has many disadvantages including data freshness issues due to the delay caused by only periodically initiating the Extract Transform Load-data staging and excessive resource consumption due to maintaining two separate information systems. We present an efficient hybrid system, called HyPer, that can handle both OLTP and OLAP simultaneously by using hardware-assisted replication mechanisms to maintain consistent snapshots of the transactional data. HyPer is a main-memory database system that guarantees the ACID properties of OLTP transactions and executes OLAP query sessions (multiple queries) on the same, arbitrarily current and consistent snapshot. The utilization of the processor-inherent support for virtual memory management (address transalation, caching, copy on update) yields both at the same time: unprecedented high transaction rates as high as several 100000 per second and ultra-low OLAP query response times of as low as 10 ms  all on a commodity desktop server. Even the creation of a fresh, transaction-consistent snapshot can be achieved in 10 ms.
<br>OLTP<br>
<br>Online transaction processing
<br>transactions access and process only a small portion of the entire data
<br>OLAP<br>
<br>Online Analytical Processing
<br>Brought about from BI-applications (Business Intelligence)
<br>Process substantial portions of the data to generate reports for BI
<br>Initial approaches to perform OLAP on OLTP databases were dismissed since OLAP query processing led to resource contentions hurting transaction processing<br>A separate Data Warehouse system is installed for BI. Periodically, OLTP database changes are Extracted, Transformed and Loaded (ETL) into the data warehouse. <br><img alt="Pasted image 20240202140825.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240202140825.png"><br>This approach has several drawbacks:<br>
<br>stale data - ETL is only executed periodically
<br>redundancy - cost of maintaining redundant copies of two systems. However, two systems enables customized models for execution - normalized tables for OLTP and star-schema for OLAP
<br>high investments - maintaining two systems has economic penalty (hardware, software...)
<br>Strong arguments for real time business intelligence advocates for removing the separation (from this point, simply dubbed "the gap") between OLTP and OLAP systems.<br>Paper argues that the performance improvements needed to bridge the gap can be achieved through main memory database.<br>Paper argues that critical transactional database volume is limited is size. Furthermore, the size of the main memory is expected to grow faster than the largest business customer's requirements.<br>HyPer uses a main-memory architecture for transaction processing using a single-threading (cite:[15]) approach where OLTP transactions are executed sequentially.<br>Hyper Features

<br>Main-Memory Architecture for transaction processing
<br>Single-threaded processing

<br>Obviates the need for locking and latching



<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kemper2010hyper.html</link><guid isPermaLink="false">Literature Notes/kemper2010hyper.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240202140825.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240202140825.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Implementing constant-bandwidth servers upon multiprocessor platforms]]></title><description><![CDATA[ 
 <br><br>Sanjoy Baruah, Joël Goossens, Giuseppe Lipari (2002)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanjoy-Baruah" class="tag" target="_blank" rel="noopener nofollow">#Sanjoy-Baruah</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joël-Goossens" class="tag" target="_blank" rel="noopener nofollow">#Joël-Goossens</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Giuseppe-Lipari" class="tag" target="_blank" rel="noopener nofollow">#Giuseppe-Lipari</a><br>Abstract
In constant-bandwidth server (CBS) systems, several different applications are executed upon a shared computing platform in such a manner that each application seems to be executing on a slower dedicated processor. CBS systems have thus far only been implemented upon uniprocessors; here, a multiprocessor extension, which can be implemented upon computing platforms comprised of several identical preemptable processors, is proposed and proven correct.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/baruah2002implementing.html</link><guid isPermaLink="false">Literature Notes/baruah2002implementing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Improved query performance with variant indexes]]></title><description><![CDATA[ 
 <br><br>Patrick O'Neil, Dallan Quass (1997)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Patrick-O" class="tag" target="_blank" rel="noopener nofollow">#Patrick-O</a>'Neil <a href="https://www.jayitha.github.io/Notes?query=tag:Dallan-Quass" class="tag" target="_blank" rel="noopener nofollow">#Dallan-Quass</a><br>Abstract
The read-mostly environment of data warehousing makes it possible to use more complex indexes to speed up queries than in situations where concurrent updates are present. The current paper presents a short review of current indexing technology, including row-set representation by Bitmaps, and then introduces two approaches we call Bit-Sliced indexing and Projection indexing. A Projection index materializes all values of a column in RID order, and a Bit-Sliced index essentially takes an orthogonal bit-by-bit view of the same data. While some of these concepts started with the MODEL 204 product, and both Bit-Sliced and Projection indexing are now fully realized in Sybase IQ, this is the first rigorous examination of such indexing capabilities in the literature. We compare algorithms that become feasible with these variant index types against algorithms using more conventional indexes. The analysis demonstrates important performance advantages for variant indexes in some types of SQL aggregation, predicate evaluation, and grouping. The paper concludes by introducing a new method whereby multi-dimensional group-by queries, reminiscent of OLAP/Datacube queries but with more flexibility, can be very efficiently performed.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/o1997improved.html</link><guid isPermaLink="false">Literature Notes/o1997improved.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[In search of an understandable consensus algorithm]]></title><description><![CDATA[ 
 <br><br>Diego Ongaro, John Ousterhout (2014)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Diego-Ongaro" class="tag" target="_blank" rel="noopener nofollow">#Diego-Ongaro</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John-Ousterhout" class="tag" target="_blank" rel="noopener nofollow">#John-Ousterhout</a><br>Abstract
Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efficient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems. In order to enhance understandability, Raft separates the key elements of consensus, such as leader election, log replication, and safety, and it enforces a stronger degree of coherency to reduce the number of states that must be considered. Results from a user study demonstrate that Raft is easier for students to learn than Paxos. Raft also includes a new mechanism for changing the cluster membership, which uses overlapping majorities to guarantee safety.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ongaro2014search.html</link><guid isPermaLink="false">Literature Notes/ongaro2014search.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Indexing the Edges—a simple and yet efficient approach to high-dimensional indexing]]></title><description><![CDATA[ 
 <br><br>Beng Chin Ooi, Kian-Lee Tan, Cui Yu, Stephane Bressan (2000)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
In this paper, we propose a new tunable index scheme, called iMinMax(O), that maps points in high dimensional spaces to single dimension values determined by their maximum or minimum values among all dimensions. By varying the tuning “knob” O, we can obtain different family of iMinMax structures that are optimized for different distributions of data sets. For a d-dimensional space, a range query need to be transformed into d subqueries. However, some of these subqueries can be pruned away without evaluation, further enhancing the efficiency of the scheme. Experimental results show that iMinMax(O) can outperform the more complex Pyramid technique by a wide margin.
<br>Proposes <a data-href="iMinMax" href="https://www.jayitha.github.io/Notes/iMinMax" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">iMinMax</a><a data-href="iMinMax" href="https://www.jayitha.github.io/Notes/glossary/iminmax.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">iMinMax</a><br>
The performance of hierarchical indexing structures like R-trees and R*-trees deteriorates rapidly with increasing dimensionality<br>
The curse of dimensionality is so severe that the performance of hierarchical indexing structures is worse than a linear scan cite:[4, 5]<br>
Some other approaches are the VA-file cite:[4] and the <a data-href="Pyramid Technique" href="https://www.jayitha.github.io/Notes/Pyramid Technique" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pyramid Technique</a><a data-href="Pyramid Technique" href="https://www.jayitha.github.io/Notes/glossary/pyramid-technique.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pyramid Technique</a> cite:[5]<br><br><br>: <br>: ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ooi2000indexing.html</link><guid isPermaLink="false">Literature Notes/ooi2000indexing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Integrating compression and execution in column-oriented database systems]]></title><description><![CDATA[ 
 <br><br>Daniel Abadi, Samuel Madden, Miguel Ferreira (2006)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel-Abadi" class="tag" target="_blank" rel="noopener nofollow">#Daniel-Abadi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Samuel-Madden" class="tag" target="_blank" rel="noopener nofollow">#Samuel-Madden</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Miguel-Ferreira" class="tag" target="_blank" rel="noopener nofollow">#Miguel-Ferreira</a><br>Abstract
Column-oriented database system architectures invite a re-evaluation of how and when data in databases is compressed. Storing data in a column-oriented fashion greatly increases the similarity of adjacent records on disk and thus opportunities for compression. The ability to compress many adjacent tuples at once lowers the per-tuple cost of compression, both in terms of CPU and space overheads.In this paper, we discuss how we extended C-Store (a column-oriented DBMS) with a compression sub-system. We show how compression schemes not traditionally used in row-oriented DBMSs can be applied to column-oriented systems. We then evaluate a set of compression schemes and show that the best scheme depends not only on the properties of the data but also on the nature of the query workload.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abadi2006integrating.html</link><guid isPermaLink="false">Literature Notes/abadi2006integrating.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Integrating multimedia applications in hard real-time systems]]></title><description><![CDATA[ 
 <br><br>Luca Abeni, Giorgio Buttazzo (1998)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Luca-Abeni" class="tag" target="_blank" rel="noopener nofollow">#Luca-Abeni</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Giorgio-Buttazzo" class="tag" target="_blank" rel="noopener nofollow">#Giorgio-Buttazzo</a><br>Abstract
This paper focuses on the problem of providing efficient run-time support to multimedia applications in a real-time system, where two types of tasks can coexist simultaneously: multimedia soft real-time tasks and hard real-time tasks. Hard tasks are guaranteed based on worst case execution times and minimum interarrival times, whereas multimedia and soft tasks are served based on mean parameters. The paper describes a server-based mechanism for scheduling soft and multimedia tasks without jeopardizing the a priori guarantee of hard real-time activities. The performance of the proposed method is compared with that of similar service mechanisms through extensive simulation experiments and several multimedia applications have been implemented on the HARTIK kerne
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abeni1998integrating.html</link><guid isPermaLink="false">Literature Notes/abeni1998integrating.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Introducing go: Build reliable, scalable programs]]></title><description><![CDATA[ 
 <br><br>Caleb Doxsey (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a><br>Abstract
Perfect for beginners familiar with programming basics, this hands-on guide provides an easy introduction to Go, the general-purpose programming language from Google. Author Caleb Doxsey covers the language's core features with step-by-step instructions and exercises in each chapter to help you practice what you learn. Go is a general-purpose programming language with a clean syntax and advanced features, including concurrency. This book provides the one-on-one support you need to get started with the language, with short, easily digestible chapters that build on one another. By the time you finish this book, not only will you be able to write real Go programs, you'll be ready to tackle advanced techniques. Jump into Go basics, including data types, variables, and control structures Learn complex types, such as slices, functions, structs, and interfaces Explore Go's core library and learn how to create your own package Write tests for your code by using the language's go test program Learn how to run programs concurrently with goroutines and channels Get suggestions to help you master the craft of programming
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/doxsey2016introducing.html</link><guid isPermaLink="false">Literature Notes/doxsey2016introducing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Introduction to Probability]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br>Chapter 1 - Sample Space and Probability<br><a data-href="de Morgan's Laws" href="https://www.jayitha.github.io/Notes/de Morgan's Laws" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">de Morgan's Laws</a><a data-href="de Morgan's Laws" href="https://www.jayitha.github.io/Notes/glossary/de-morgan's-laws.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">de Morgan's Laws</a><br>
<a data-href="Probability Law" href="https://www.jayitha.github.io/Notes/Probability Law" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Law</a><a data-href="Probability Law" href="https://www.jayitha.github.io/Notes/glossary/probability-law.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Law</a><br>
<a data-href="Elements of a Probabilistic Model" href="https://www.jayitha.github.io/Notes/Elements of a Probabilistic Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Elements of a Probabilistic Model</a><a data-href="Elements of a Probabilistic Model" href="https://www.jayitha.github.io/Notes/glossary/elements-of-a-probabilistic-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Elements of a Probabilistic Model</a><br>
<a data-href="Probability Axioms" href="https://www.jayitha.github.io/Notes/Probability Axioms" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Axioms</a><a data-href="Probability Axioms" href="https://www.jayitha.github.io/Notes/glossary/probability-axioms.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Axioms</a><br>
<a data-href="Normalization Property" href="https://www.jayitha.github.io/Notes/Normalization Property" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Normalization Property</a><a data-href="Normalization Property" href="https://www.jayitha.github.io/Notes/glossary/normalization-property.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Normalization Property</a><br>
<a data-href="Discrete Probability Law" href="https://www.jayitha.github.io/Notes/Discrete Probability Law" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Probability Law</a><a data-href="Discrete Probability Law" href="https://www.jayitha.github.io/Notes/glossary/discrete-probability-law.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Probability Law</a><br>
<a data-href="Discrete Uniform Probability Law" href="https://www.jayitha.github.io/Notes/Discrete Uniform Probability Law" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Uniform Probability Law</a><a data-href="Discrete Uniform Probability Law" href="https://www.jayitha.github.io/Notes/glossary/discrete-uniform-probability-law.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Uniform Probability Law</a><br>
<a data-href="Properties of Probability Laws" href="https://www.jayitha.github.io/Notes/Properties of Probability Laws" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Properties of Probability Laws</a><a data-href="Properties of Probability Laws" href="https://www.jayitha.github.io/Notes/glossary/properties-of-probability-laws.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Properties of Probability Laws</a><br>
<a data-href="Bertrand's Paradox" href="https://www.jayitha.github.io/Notes/Bertrand's Paradox" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bertrand's Paradox</a><a data-href="Bertrand's Paradox" href="https://www.jayitha.github.io/Notes/glossary/bertrand's-paradox.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bertrand's Paradox</a><br>
<a data-href="Conditional Probability" href="https://www.jayitha.github.io/Notes/Conditional Probability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Conditional Probability</a><a data-href="Conditional Probability" href="https://www.jayitha.github.io/Notes/glossary/conditional-probability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Conditional Probability</a><br>
<a data-href="Multiplication Rule" href="https://www.jayitha.github.io/Notes/Multiplication Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Multiplication Rule</a><a data-href="Multiplication Rule" href="https://www.jayitha.github.io/Notes/glossary/multiplication-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Multiplication Rule</a><br>
<a data-href="The Monty Hall Problem" href="https://www.jayitha.github.io/Notes/The Monty Hall Problem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Monty Hall Problem</a><a data-href="The Monty Hall Problem" href="https://www.jayitha.github.io/Notes/glossary/the-monty-hall-problem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Monty Hall Problem</a><br>
<a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/Total Probability Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Probability Theorem</a><a data-href="Total Probability Theorem" href="https://www.jayitha.github.io/Notes/glossary/total-probability-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Probability Theorem</a><br>
<a data-href="Bayes' Rule" href="https://www.jayitha.github.io/Notes/Bayes' Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bayes' Rule</a><a data-href="Bayes' Rule" href="https://www.jayitha.github.io/Notes/glossary/bayes'-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bayes' Rule</a><br>
<a data-href="The False-Positive Puzzle" href="https://www.jayitha.github.io/Notes/The False-Positive Puzzle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The False-Positive Puzzle</a><a data-href="The False-Positive Puzzle" href="https://www.jayitha.github.io/Notes/glossary/the-false-positive-puzzle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The False-Positive Puzzle</a><br>
<a data-href="Independence" href="https://www.jayitha.github.io/Notes/Independence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Independence</a><a data-href="Independence" href="https://www.jayitha.github.io/Notes/glossary/independence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Independence</a><br>
<a data-href="Conditional Independence" href="https://www.jayitha.github.io/Notes/Conditional Independence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Conditional Independence</a><a data-href="Conditional Independence" href="https://www.jayitha.github.io/Notes/glossary/conditional-independence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Conditional Independence</a><br>
<a data-href="Properties of Independence" href="https://www.jayitha.github.io/Notes/Properties of Independence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Properties of Independence</a><a data-href="Properties of Independence" href="https://www.jayitha.github.io/Notes/glossary/properties-of-independence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Properties of Independence</a><br>
<a data-href="Independent Trials" href="https://www.jayitha.github.io/Notes/Independent Trials" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Independent Trials</a><a data-href="Independent Trials" href="https://www.jayitha.github.io/Notes/glossary/independent-trials.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Independent Trials</a><br>
<a data-href="Bernoulli Trials" href="https://www.jayitha.github.io/Notes/Bernoulli Trials" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bernoulli Trials</a><a data-href="Bernoulli Trials" href="https://www.jayitha.github.io/Notes/glossary/bernoulli-trials.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bernoulli Trials</a><br>
<a data-href="The Counting Principle" href="https://www.jayitha.github.io/Notes/The Counting Principle" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Counting Principle</a><a data-href="The Counting Principle" href="https://www.jayitha.github.io/Notes/glossary/the-counting-principle.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Counting Principle</a><br>
<a data-href="Counting Results" href="https://www.jayitha.github.io/Notes/Counting Results" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Counting Results</a><a data-href="Counting Results" href="https://www.jayitha.github.io/Notes/glossary/counting-results.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Counting Results</a><br>
<a data-href="Three Methods for Calculating Probabilities" href="https://www.jayitha.github.io/Notes/Three Methods for Calculating Probabilities" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Three Methods for Calculating Probabilities</a><a data-href="Three Methods for Calculating Probabilities" href="https://www.jayitha.github.io/Notes/glossary/three-methods-for-calculating-probabilities.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Three Methods for Calculating Probabilities</a><br>
<a data-href="Bonferroni's Inequality" href="https://www.jayitha.github.io/Notes/Bonferroni's Inequality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bonferroni's Inequality</a><a data-href="Bonferroni's Inequality" href="https://www.jayitha.github.io/Notes/glossary/bonferroni's-inequality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bonferroni's Inequality</a><br>
<a data-href="Inclusion-Exclusion Formula" href="https://www.jayitha.github.io/Notes/Inclusion-Exclusion Formula" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Inclusion-Exclusion Formula</a><a data-href="Inclusion-Exclusion Formula" href="https://www.jayitha.github.io/Notes/glossary/inclusion-exclusion-formula.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Inclusion-Exclusion Formula</a><br>
<a data-href="Continuity Property of Probabilities" href="https://www.jayitha.github.io/Notes/Continuity Property of Probabilities" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Continuity Property of Probabilities</a><a data-href="Continuity Property of Probabilities" href="https://www.jayitha.github.io/Notes/glossary/continuity-property-of-probabilities.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Continuity Property of Probabilities</a><br>
<a data-href="Unbiased Coin from Biased Coin" href="https://www.jayitha.github.io/Notes/Unbiased Coin from Biased Coin" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unbiased Coin from Biased Coin</a><a data-href="Unbiased Coin from Biased Coin" href="https://www.jayitha.github.io/Notes/glossary/unbiased-coin-from-biased-coin.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unbiased Coin from Biased Coin</a><br>
<a data-href="Problem of Points" href="https://www.jayitha.github.io/Notes/Problem of Points" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Problem of Points</a><a data-href="Problem of Points" href="https://www.jayitha.github.io/Notes/glossary/problem-of-points.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Problem of Points</a><br>
<a data-href="The Borel-Cantelli Lemma" href="https://www.jayitha.github.io/Notes/The Borel-Cantelli Lemma" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Borel-Cantelli Lemma</a><a data-href="The Borel-Cantelli Lemma" href="https://www.jayitha.github.io/Notes/glossary/the-borel-cantelli-lemma.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Borel-Cantelli Lemma</a><br>
<br>Get properties for independence and conditional independence from exercises <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br>Chapter 2 - Discrete Random Variables<br>
<a data-href="Random Variable" href="https://www.jayitha.github.io/Notes/Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Random Variable</a><a data-href="Random Variable" href="https://www.jayitha.github.io/Notes/glossary/random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Random Variable</a><br>
<a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Random Variable</a><a data-href="Discrete Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Random Variable</a><br>
<a data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/Probability Mass Function" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Mass Function</a><a data-href="Probability Mass Function" href="https://www.jayitha.github.io/Notes/glossary/probability-mass-function.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Mass Function</a><br>
<a data-href="Bernoulli Random Variable" href="https://www.jayitha.github.io/Notes/Bernoulli Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bernoulli Random Variable</a><a data-href="Bernoulli Random Variable" href="https://www.jayitha.github.io/Notes/glossary/bernoulli-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bernoulli Random Variable</a><br>
<a data-href="Binomial Random Variable" href="https://www.jayitha.github.io/Notes/Binomial Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Binomial Random Variable</a><a data-href="Binomial Random Variable" href="https://www.jayitha.github.io/Notes/glossary/binomial-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Binomial Random Variable</a><br>
<a data-href="Geometric Random Variable" href="https://www.jayitha.github.io/Notes/Geometric Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Geometric Random Variable</a><a data-href="Geometric Random Variable" href="https://www.jayitha.github.io/Notes/glossary/geometric-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Geometric Random Variable</a><br>
<a data-href="Poisson Random Variable" href="https://www.jayitha.github.io/Notes/Poisson Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Poisson Random Variable</a><a data-href="Poisson Random Variable" href="https://www.jayitha.github.io/Notes/glossary/poisson-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Poisson Random Variable</a><br>
<a data-href="Discrete Uniform Random Variable" href="https://www.jayitha.github.io/Notes/Discrete Uniform Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Discrete Uniform Random Variable</a><a data-href="Discrete Uniform Random Variable" href="https://www.jayitha.github.io/Notes/glossary/discrete-uniform-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Discrete Uniform Random Variable</a><br>
<a data-href="Expectation" href="https://www.jayitha.github.io/Notes/Expectation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Expectation</a><a data-href="Expectation" href="https://www.jayitha.github.io/Notes/glossary/expectation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Expectation</a><br>
<a data-href="Variance" href="https://www.jayitha.github.io/Notes/Variance" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Variance</a><a data-href="Variance" href="https://www.jayitha.github.io/Notes/glossary/variance.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Variance</a><br>
<a data-href="Standard Deviation" href="https://www.jayitha.github.io/Notes/Standard Deviation" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Standard Deviation</a><a data-href="Standard Deviation" href="https://www.jayitha.github.io/Notes/glossary/standard-deviation.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Standard Deviation</a><br>
<a data-href="Moments" href="https://www.jayitha.github.io/Notes/Moments" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Moments</a><a data-href="Moments" href="https://www.jayitha.github.io/Notes/glossary/moments.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Moments</a><br>
<a data-href="Expected Value Rule" href="https://www.jayitha.github.io/Notes/Expected Value Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Expected Value Rule</a><a data-href="Expected Value Rule" href="https://www.jayitha.github.io/Notes/glossary/expected-value-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Expected Value Rule</a><br>
<a data-href="Total Expectation Theorem" href="https://www.jayitha.github.io/Notes/Total Expectation Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Total Expectation Theorem</a><a data-href="Total Expectation Theorem" href="https://www.jayitha.github.io/Notes/glossary/total-expectation-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Total Expectation Theorem</a><br>
<a data-href="The Two-Envelope Paradox" href="https://www.jayitha.github.io/Notes/The Two-Envelope Paradox" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Two-Envelope Paradox</a><a data-href="The Two-Envelope Paradox" href="https://www.jayitha.github.io/Notes/glossary/the-two-envelope-paradox.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Two-Envelope Paradox</a><br>Chapter 3 - General Random Variables<br><a data-href="Continuous Random Variable" href="https://www.jayitha.github.io/Notes/Continuous Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Continuous Random Variable</a><a data-href="Continuous Random Variable" href="https://www.jayitha.github.io/Notes/glossary/continuous-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Continuous Random Variable</a><br>
<a data-href="Probability Density Function (PDF)" href="https://www.jayitha.github.io/Notes/Probability Density Function (PDF)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Probability Density Function (PDF)</a><a data-href="Probability Density Function (PDF)" href="https://www.jayitha.github.io/Notes/glossary/probability-density-function-(pdf).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Probability Density Function (PDF)</a><br>
<a data-href="Continuous Uniform Random Variable" href="https://www.jayitha.github.io/Notes/Continuous Uniform Random Variable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Continuous Uniform Random Variable</a><a data-href="Continuous Uniform Random Variable" href="https://www.jayitha.github.io/Notes/glossary/continuous-uniform-random-variable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Continuous Uniform Random Variable</a><br>
<a data-href="Piecewise Constant PDF" href="https://www.jayitha.github.io/Notes/Piecewise Constant PDF" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Piecewise Constant PDF</a><a data-href="Piecewise Constant PDF" href="https://www.jayitha.github.io/Notes/glossary/piecewise-constant-pdf.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Piecewise Constant PDF</a>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html</link><guid isPermaLink="false">Literature Notes/bertsekas2008introduction.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Wrangler: Interactive visual specification of data transformation scripts]]></title><description><![CDATA[ 
 <br><br>Sean Kandel, Andreas Paepcke, Joseph Hellerstein, Jeffrey Heer (2011)<br>Tags: <br>Abstract
Though data analysis tools continue to improve, analysts still expend an inordinate amount of time and effort manipulating data and assessing data quality issues. Such "data wrangling" regularly involves reformatting data values or layout, correcting erroneous or missing values, and integrating multiple data sources. These transforms are often difficult to specify and difficult to reuse across analysis tasks, teams, and tools. In response, we introduce Wrangler, an interactive system for creating data transformations. Wrangler combines direct manipulation of visualized data with automatic inference of relevant transforms, enabling analysts to iteratively explore the space of applicable operations and preview their effects. Wrangler leverages semantic data types (e.g., geographic locations, dates, classification codes) to aid validation and type conversion. Interactive histories support review, refinement, and annotation of transformation scripts. User study results show that Wrangler significantly reduces specification time and promotes the use of robust, auditable transforms instead of manual editing.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kandel2011wrangler.html</link><guid isPermaLink="false">Literature Notes/kandel2011wrangler.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Keep CALM and CRDT on]]></title><description><![CDATA[ 
 <br><br>Shadaj Laddad, Conor Power, Mae Milano, Alvin Cheung, Natacha Crooks, Joseph M Hellerstein (2022)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shadaj-Laddad" class="tag" target="_blank" rel="noopener nofollow">#Shadaj-Laddad</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Conor-Power" class="tag" target="_blank" rel="noopener nofollow">#Conor-Power</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mae-Milano" class="tag" target="_blank" rel="noopener nofollow">#Mae-Milano</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alvin-Cheung" class="tag" target="_blank" rel="noopener nofollow">#Alvin-Cheung</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Natacha-Crooks" class="tag" target="_blank" rel="noopener nofollow">#Natacha-Crooks</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a><br>Abstract
Despite decades of research and practical experience, developers have few tools for programming reliable distributed applications without resorting to expensive coordination techniques. Conflict-free replicated datatypes (CRDTs) are a promising line of work that enable coordination-free replication and offer certain eventual consistency guarantees in a relatively simple object-oriented API. Yet CRDT guarantees extend only to data updates; observations of CRDT state are unconstrained and unsafe. We propose an agenda that embraces the simplicity of CRDTs, but provides richer, more uniform guarantees. We extend CRDTs with a query model that reasons about which queries are safe without coordination by applying monotonicity results from the CALM Theorem, and lay out a larger agenda for developing CRDT data stores that let developers safely and efficiently interact with replicated application state.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/laddad2022keep.html</link><guid isPermaLink="false">Literature Notes/laddad2022keep.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Kepler: Robust learning for parametric query optimization]]></title><description><![CDATA[ 
 <br><br>Lyric Doshi, Vincent Zhuang, Gaurav Jain, Ryan Marcus, Haoyu Huang, Deniz Altinbüken, Eugene Brevdo, Campbell Fraser (2023)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Lyric-Doshi" class="tag" target="_blank" rel="noopener nofollow">#Lyric-Doshi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Vincent-Zhuang" class="tag" target="_blank" rel="noopener nofollow">#Vincent-Zhuang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gaurav-Jain" class="tag" target="_blank" rel="noopener nofollow">#Gaurav-Jain</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ryan-Marcus" class="tag" target="_blank" rel="noopener nofollow">#Ryan-Marcus</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Haoyu-Huang" class="tag" target="_blank" rel="noopener nofollow">#Haoyu-Huang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Deniz-Altinbüken" class="tag" target="_blank" rel="noopener nofollow">#Deniz-Altinbüken</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eugene-Brevdo" class="tag" target="_blank" rel="noopener nofollow">#Eugene-Brevdo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Campbell-Fraser" class="tag" target="_blank" rel="noopener nofollow">#Campbell-Fraser</a><br>Abstract
Most existing parametric query optimization (PQO) techniques rely on traditional query optimizer cost models, which are often inaccurate and result in suboptimal query performance. We propose Kepler, an end-to-end learning-based approach to PQO that demonstrates significant speedups in query latency over a traditional query optimizer. Central to our method is Row Count Evolution (RCE), a novel plan generation algorithm based on perturbations in the sub-plan cardinality space. While previous approaches require accurate cost models, we bypass this requirement by evaluating candidate plans via actual execution data and training anML model to predict the fastest plan given parameter binding values. Our models leverage recent advances in neural network uncertainty in order to robustly predict faster plans while avoiding regressions in query performance. Experimentally, we show that Kepler achieves significant improvements in query runtime on multiple datasets on PostgreSQL.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/doshi2023kepler.html</link><guid isPermaLink="false">Literature Notes/doshi2023kepler.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Learned cardinalities: Estimating correlated joins with deep learning]]></title><description><![CDATA[ 
 <br><br>Andreas Kipf, Thomas Kipf, Bernhard Radke, Viktor Leis, Peter Boncz, Alfons Kemper (2018)<br>Tags: <br>Abstract
We describe a new deep learning approach to cardinality estimation. MSCN is a multi-set convolutional network, tailored to representing relational query plans, that employs set semantics to capture query features and true cardinalities. MSCN builds on sampling-based estimation, addressing its weaknesses when no sampled tuples qualify a predicate, and in capturing join-crossing correlations. Our evaluation of MSCN using a real-world dataset shows that deep learning significantly enhances the quality of cardinality estimation, which is the core problem in query optimization.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kipf2018learned.html</link><guid isPermaLink="false">Literature Notes/kipf2018learned.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[seL4: Formal verification of an OS kernel]]></title><description><![CDATA[ 
 <br><br>Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick, David Cock, Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal Kolanski, Michael Norrish, others (2009)<br>Tags: <br>Abstract
Complete formal verification is the only known way to guarantee that a system is free of programming errors. We present our experience in performing the formal, machine-checked verification of the seL4 microkernel from an abstract specification down to its C implementation. We assume correctness of compiler, assembly code, and hardware, and we used a unique design approach that fuses formal and operating systems techniques. To our knowledge, this is the first formal proof of functional correctness of a complete, general-purpose operating-system kernel. Functional correctness means here that the implementation always strictly follows our high-level abstract specification of kernel behaviour. This encompasses traditional design and implementation safety properties such as the kernel will never crash, and it will never perform an unsafe operation. It also proves much more: we can predict precisely how the kernel will behave in every possible situation. seL4, a third-generation microkernel of L4 provenance, comprises 8,700 lines of C code and 600 lines of assembler. Its performance is comparable to other high-performance L4 kernels.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/klein2009sel4.html</link><guid isPermaLink="false">Literature Notes/klein2009sel4.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Spectre attacks: Exploiting speculative execution]]></title><description><![CDATA[ 
 <br><br>Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, others (2020)<br>Tags: <br>Abstract
Modern processors use branch prediction and speculative execution to maximize performance. For example, if the destination of a branch depends on a memory value that is in the process of being read, CPUs will try to guess the destination and attempt to execute ahead. When the memory value finally arrives, the CPU either discards or commits the speculative computation. Speculative logic is unfaithful in how it executes, can access the victim's memory and registers, and can perform operations with measurable side effects. Spectre attacks involve inducing a victim to speculatively perform operations that would not occur during correct program execution and which leak the victim's confidential information via a side channel to the adversary. This paper describes practical attacks that combine methodology from side-channel attacks, fault attacks, and return-oriented programming that can read arbitrary memory from the victim's process. More broadly, the paper shows that speculative execution implementations violate the security assumptions underpinning numerous software security mechanisms, such as operating system process separation, containerization, just-in-time (JIT) compilation, and countermeasures to cache timing and side-channel attacks. These attacks represent a serious threat to actual systems because vulnerable speculative execution capabilities are found in microprocessors from Intel, AMD, and ARM that are used in billions of devices. Although makeshift processor-specific countermeasures are possible in some cases, sound solutions will require fixes to processor designs as well as updates to instruction set architectures (ISAs) to give hardware architects and software developers a common understanding as to what computation state CPU implementations are (and are not) permitted to leak.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kocher2020spectre.html</link><guid isPermaLink="false">Literature Notes/kocher2020spectre.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Activeclean: Interactive data cleaning for statistical modeling]]></title><description><![CDATA[ 
 <br><br>Sanjay Krishnan, Jiannan Wang, Eugene Wu, Michael J Franklin, Ken Goldberg (2016)<br>Tags: <br>Abstract
Analysts often clean dirty data iteratively–cleaning some data, executing the analysis, and then cleaning more data based on the results. We explore the iterative cleaning process in the context of statistical model training, which is an increasingly popular form of data analytics. We propose ActiveClean, which allows for progressive and iterative cleaning in statistical modeling problems while preserving convergence guarantees. ActiveClean supports an important class of models called convex loss models (e.g., linear regression and SVMs), and prioritizes cleaning those records likely to affect the results. We evaluate ActiveClean on five real-world datasets UCI Adult, UCI EEG, MNIST, IMDB, and Dollars For Docs with both real and synthetic errors. The results show that our proposed optimizations can improve model accuracy by up-to 2.5x for the same amount of data cleaned. Furthermore for a fixed cleaning budget and on all real dirty datasets, ActiveClean returns more accurate models than uniform sampling and Active Learning.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/krishnan2016activeclean.html</link><guid isPermaLink="false">Literature Notes/krishnan2016activeclean.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Oceanstore: An architecture for global-scale persistent storage]]></title><description><![CDATA[ 
 <br><br>John Kubiatowicz, David Bindel, Yan Chen, Steven Czerwinski, Patrick Eaton, Dennis Geels, Ramakrishna Gummadi, Sean Rhea, Hakim Weatherspoon, Westley Weimer, others (2000)<br>Tags: <br>Abstract
OceanStore is a utility infrastructure designed to span the globe and provide continuous access to persistent information. Since this infrastructure is comprised of untrusted servers, data is protected through redundancy and cryptographic techniques. To improve performance, data is allowed to be cached anywhere, anytime. Additionally, monitoring of usage patterns allows adaptation to regional outages and denial of service attacks; monitoring also enhances performance through pro-active movement of data. A prototype implementation is currently under development.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kubiatowicz2000oceanstore.html</link><guid isPermaLink="false">Literature Notes/kubiatowicz2000oceanstore.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Labels and event processes in the Asbestos operating system]]></title><description><![CDATA[ 
 <br><br>Petros Efstathopoulos, Maxwell Krohn, Steve VanDeBogart, Cliff Frey, David Ziegler, Eddie Kohler, David Mazieres, Frans Kaashoek, Robert Morris (2005)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Petros-Efstathopoulos" class="tag" target="_blank" rel="noopener nofollow">#Petros-Efstathopoulos</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Maxwell-Krohn" class="tag" target="_blank" rel="noopener nofollow">#Maxwell-Krohn</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Steve-VanDeBogart" class="tag" target="_blank" rel="noopener nofollow">#Steve-VanDeBogart</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Cliff-Frey" class="tag" target="_blank" rel="noopener nofollow">#Cliff-Frey</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David-Ziegler" class="tag" target="_blank" rel="noopener nofollow">#David-Ziegler</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eddie-Kohler" class="tag" target="_blank" rel="noopener nofollow">#Eddie-Kohler</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David-Mazieres" class="tag" target="_blank" rel="noopener nofollow">#David-Mazieres</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Frans-Kaashoek" class="tag" target="_blank" rel="noopener nofollow">#Frans-Kaashoek</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Robert-Morris" class="tag" target="_blank" rel="noopener nofollow">#Robert-Morris</a><br>Abstract
Asbestos, a new prototype operating system, provides novel labeling and isolation mechanisms that help contain the effects of exploitable software flaws. Applications can express a wide range of policies with Asbestos's kernel-enforced label mechanism, including controls on inter-process communication and system-wide information flow. A new event process abstraction provides lightweight, isolated contexts within a single process, allowing the same process to act on behalf of multiple users while preventing it from leaking any single user's data to any other user. A Web server that uses Asbestos labels to isolate user data requires about 1.5 memory pages per user, demonstrating that additional security can come at an acceptable cost.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/efstathopoulos2005labels.html</link><guid isPermaLink="false">Literature Notes/efstathopoulos2005labels.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Snowflock: Rapid virtual machine cloning for cloud computing]]></title><description><![CDATA[ 
 <br><br>Horacio Andrés Lagar-Cavilla, Joseph Andrew Whitney, Adin Matthew Scannell, Philip Patchin, Stephen M Rumble, Eyal De Lara, Michael Brudno, Mahadev Satyanarayanan (2009)<br>Tags: <br>Abstract
Virtual Machine (VM) fork is a new cloud computing abstraction that instantaneously clones a VM into multiple replicas running on different hosts. All replicas share the same initial state, matching the intuitive semantics of stateful worker creation. VM fork thus enables the straightforward creation and efficient deployment of many tasks demanding swift instantiation of stateful workers in a cloud environment, e.g. excess load handling, opportunistic job placement, or parallel computing. Lack of instantaneous stateful cloning forces users of cloud computing into ad hoc practices to manage application state and cycle provisioning. We present SnowFlock, our implementation of the VM fork abstraction. To evaluate SnowFlock, we focus on the demanding scenario of services requiring on-the-fly creation of hundreds of parallel workers in order to solve computationally-intensive queries in seconds. These services are prominent in fields such as bioinformatics, finance, and rendering. SnowFlock provides sub-second VM cloning, scales to hundreds of workers, consumes few cloud I/O resources, and has negligible runtime overhead.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lagar2009snowflock.html</link><guid isPermaLink="false">Literature Notes/lagar2009snowflock.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The vertica analytic database: C-store 7 years later]]></title><description><![CDATA[ 
 <br><br>Andrew Lamb, Matt Fuller, Ramakrishna Varadarajan, Nga Tran, Ben Vandier, Lyric Doshi, Chuck Bear (2012)<br>Tags: <br>Abstract
This paper describes the system architecture of the Vertica Analytic Database (Vertica), a commercialization of the design of the C-Store research prototype. Vertica demonstrates a modern commercial RDBMS system that presents a classical relational interface while at the same time achieving the high performance expected from modern "web scale" analytic systems by making appropriate architectural choices. Vertica is also an instructive lesson in how academic systems research can be directly commercialized into a successful product.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lamb2012vertica.html</link><guid isPermaLink="false">Literature Notes/lamb2012vertica.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Learning multi-dimensional indexes]]></title><description><![CDATA[ 
 <br><br>Vikram Nathan, Jialin Ding, Mohammad Alizadeh, Tim Kraska (2020)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Vikram-Nathan" class="tag" target="_blank" rel="noopener nofollow">#Vikram-Nathan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jialin-Ding" class="tag" target="_blank" rel="noopener nofollow">#Jialin-Ding</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mohammad-Alizadeh" class="tag" target="_blank" rel="noopener nofollow">#Mohammad-Alizadeh</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Kraska" class="tag" target="_blank" rel="noopener nofollow">#Tim-Kraska</a><br>Abstract
Scanning and filtering over multi-dimensional tables are key operations in modern analytical database engines. To optimize the performance of these operations, databases often create clustered indexes over a single dimension or multi-dimensional indexes such as R-Trees, or use complex sort orders (e.g., Z-ordering). However, these schemes are often hard to tune and their performance is inconsistent across different datasets and queries. In this paper, we introduce Flood, a multi-dimensional in-memory read-optimized index that automatically adapts itself to a particular dataset and workload by jointly optimizing the index structure and data storage layout. Flood achieves up to three orders of magnitude faster performance for range scans with predicates than state-of-the-art multi-dimensional indexes or sort orders on real-world datasets and workloads. Our work serves as a building block towards an end-to-end learned database system.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/nathan2020learning.html</link><guid isPermaLink="false">Literature Notes/nathan2020learning.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Morsel-driven parallelism: A NUMA-aware query evaluation framework for the many-core age]]></title><description><![CDATA[ 
 <br><br>Viktor Leis, Peter Boncz, Alfons Kemper, Thomas Neumann (2014)<br>Tags: <br>Abstract
With modern computer architecture evolving, two problems conspire against the state-of-the-art approaches in parallel query execution: (i) to take advantage of many-cores, all query work must be distributed evenly among (soon) hundreds of threads in order to achieve good speedup, yet (ii) dividing the work evenly is difficult even with accurate data statistics due to the complexity of modern out-of-order cores. As a result, the existing approaches for plan-driven parallelism run into load balancing and context-switching bottlenecks, and therefore no longer scale. A third problem faced by many-core architectures is the decentralization of memory controllers, which leads to Non-Uniform Memory Access (NUMA). In response, we present the morsel-driven query execution framework, where scheduling becomes a fine-grained run-time task that is NUMA-aware. Morsel-driven query processing takes small fragments of input data (morsels) and schedules these to worker threads that run entire operator pipelines until the next pipeline breaker. The degree of parallelism is not baked into the plan but can elastically change during query execution, so the dispatcher can react to execution speed of different morsels but also adjust resources dynamically in response to newly arriving queries in the workload. Further, the dispatcher is aware of data locality of the NUMA-local morsels and operator state, such that the great majority of executions takes place on NUMA-local memory. Our evaluation on the TPC-H and SSB benchmarks shows extremely high absolute performance and an average speedup of over 30 with 32 cores.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/leis2014morsel.html</link><guid isPermaLink="false">Literature Notes/leis2014morsel.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[LeanStore: In-memory data management beyond main memory]]></title><description><![CDATA[ 
 <br><br>Viktor Leis, Michael Haubenschild, Alfons Kemper, Thomas Neumann (2018)<br>Tags: <br>Abstract
Disk-based database systems use buffer managers in order to transparently manage data sets larger than main memory. This traditional approach is effective at minimizing the number of I/O operations, but is also the major source of overhead in comparison with in-memory systems. To avoid this overhead, in-memory database systems therefore abandon buffer management altogether, which makes handling data sets larger than main memory very difficult. In this work, we revisit this fundamental dichotomy and design a novel storage manager that is optimized for modern hardware. Our evaluation, which is based on TPC-C and micro benchmarks, shows that our approach has little overhead in comparison with a pure in-memory system when all data resides in main memory. At the same time, like a traditional buffer manager, it is fully transparent and can manage very large data sets effectively. Furthermore, due to low-overhead synchronization, our implementation is also highly scalable on multi-core CPUs.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/leis2018leanstore.html</link><guid isPermaLink="false">Literature Notes/leis2018leanstore.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[CRDTs: Consistency without concurrency control]]></title><description><![CDATA[ 
 <br><br>Mihai Letia, Nuno Preguiça, Marc Shapiro (2009)<br>Tags: <br>Abstract
A CRDT is a data type whose operations commute when they are concurrent. Replicas of a CRDT eventually converge without any complex concurrency control. As an existence proof, we exhibit a non-trivial CRDT: a shared edit buffer called Treedoc. We outline the design, implementation and performance of Treedoc. We discuss how the CRDT concept can be generalised, and its limitations.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/letia2009crdts.html</link><guid isPermaLink="false">Literature Notes/letia2009crdts.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Wander join: Online aggregation via random walks]]></title><description><![CDATA[ 
 <br><br>Feifei Li, Bin Wu, Ke Yi, Zhuoyue Zhao (2016)<br>Tags: <br>Abstract
Joins are expensive, and online aggregation over joins was proposed to mitigate the cost, which offers users a nice and flexible tradeoff between query efficiency and accuracy in a continuous, online fashion. However, the state-of-the-art approach, in both internal and external memory, is based on ripple join, which is still very expensive and even needs unrealistic assumptions (e.g., tuples in a table are stored in random order). This paper proposes a new approach, the wander join algorithm, to the online aggregation problem by performing random walks over the underlying join graph. We also design an optimizer that chooses the optimal plan for conducting the random walks without having to collect any statistics a priori. Compared with ripple join, wander join is particularly efficient for equality joins involving multiple tables, but also supports θ-joins. Selection predicates and group-by clauses can be handled as well. Extensive experiments using the TPC-H benchmark have demonstrated the superior performance of wander join over ripple join. In particular, we have integrated and tested wander join in the latest version of PostgreSQL, demonstrating its practicality in a full-fledged database system.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/li2016wander.html</link><guid isPermaLink="false">Literature Notes/li2016wander.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Lifting the burden of history from adaptive query processing]]></title><description><![CDATA[ 
 <br><br>Amol Deshpande, Joseph M Hellerstein, others (2004)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Amol-Deshpande" class="tag" target="_blank" rel="noopener nofollow">#Amol-Deshpande</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/deshpande2004lifting.html</link><guid isPermaLink="false">Literature Notes/deshpande2004lifting.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Lightweight recoverable virtual memory]]></title><description><![CDATA[ 
 <br><br>Mahadev Satyanarayanan, Henry H Mashburn, Puneet Kumar, David C Steere, James J Kistler (1994)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mahadev-Satyanarayanan" class="tag" target="_blank" rel="noopener nofollow">#Mahadev-Satyanarayanan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Henry" class="tag" target="_blank" rel="noopener nofollow">#Henry</a> <a href="https://www.jayitha.github.io/Notes?query=tag:H-Mashburn" class="tag" target="_blank" rel="noopener nofollow">#H-Mashburn</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Puneet-Kumar" class="tag" target="_blank" rel="noopener nofollow">#Puneet-Kumar</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David" class="tag" target="_blank" rel="noopener nofollow">#David</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Steere" class="tag" target="_blank" rel="noopener nofollow">#C-Steere</a> <a href="https://www.jayitha.github.io/Notes?query=tag:James" class="tag" target="_blank" rel="noopener nofollow">#James</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Kistler" class="tag" target="_blank" rel="noopener nofollow">#J-Kistler</a><br>Abstract
Recoverable virtual memoryrefers to regions of a virtual address space on which transactional guarantees are offered. This article describes RVM, an efficient, portable, and easily used implementation of recoverable virtual memory for Unix environments. A unique characteristic of RVM is that it allows independent control over the transactional properties of atomicity, permanence, and serializability. This leads to considerable flexibility in the use of RVM, potentially enlarging the range of applications that can benefit from transactions. It also simplifies the layering of functionality such as nesting and distribution. The article shows that RVM performs well over its intended range of usage even though it does not benefit from specialized operating system support. It also demonstrates the importance of intra- and inter-transaction optimizations.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/satyanarayanan1994lightweight.html</link><guid isPermaLink="false">Literature Notes/satyanarayanan1994lightweight.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Meltdown: Reading kernel memory from user space]]></title><description><![CDATA[ 
 <br><br>Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, others (2020)<br>Tags: <br>Abstract
Lessons learned from Meltdown's exploitation of the weaknesses in today's processors.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lipp2020meltdown.html</link><guid isPermaLink="false">Literature Notes/lipp2020meltdown.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Live migration of virtual machines]]></title><description><![CDATA[ 
 <br><br>Christopher Clark, Keir Fraser, Steven Hand, Jacob Gorm Hansen, Eric Jul, Christian Limpach, Ian Pratt, Andrew Warfield (2005)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Christopher-Clark" class="tag" target="_blank" rel="noopener nofollow">#Christopher-Clark</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Keir-Fraser" class="tag" target="_blank" rel="noopener nofollow">#Keir-Fraser</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Steven-Hand" class="tag" target="_blank" rel="noopener nofollow">#Steven-Hand</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jacob" class="tag" target="_blank" rel="noopener nofollow">#Jacob</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gorm-Hansen" class="tag" target="_blank" rel="noopener nofollow">#Gorm-Hansen</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eric-Jul" class="tag" target="_blank" rel="noopener nofollow">#Eric-Jul</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Christian-Limpach" class="tag" target="_blank" rel="noopener nofollow">#Christian-Limpach</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ian-Pratt" class="tag" target="_blank" rel="noopener nofollow">#Ian-Pratt</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Warfield" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Warfield</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/clark2005live.html</link><guid isPermaLink="false">Literature Notes/clark2005live.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Locality-sensitive hashing for finding nearest neighbors [Lecture notes]]]></title><description><![CDATA[ 
 <br><br>Malcolm Slaney, Michael Casey (2008)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a><br>Abstract
This lecture note describes a technique known as locality-sensitive hashing (LSH) that allows one to quickly find similar entries in large databases. This approach belongs to a novel and interesting class of algorithms that are known as randomized algorithms. A randomized algorithm does not guarantee an exact answer but instead provides a high probability guarantee that it will return the correct answer or one close to it. By investing additional computational effort, the probability can be pushed as high as desired.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/slaney2008locality.html</link><guid isPermaLink="false">Literature Notes/slaney2008locality.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Logic and lattices for distributed programming]]></title><description><![CDATA[ 
 <br><br>Neil Conway, William R Marczak, Peter Alvaro, Joseph M Hellerstein, David Maier (2012)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Neil-Conway" class="tag" target="_blank" rel="noopener nofollow">#Neil-Conway</a> <a href="https://www.jayitha.github.io/Notes?query=tag:William" class="tag" target="_blank" rel="noopener nofollow">#William</a> <a href="https://www.jayitha.github.io/Notes?query=tag:R-Marczak" class="tag" target="_blank" rel="noopener nofollow">#R-Marczak</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Alvaro" class="tag" target="_blank" rel="noopener nofollow">#Peter-Alvaro</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David-Maier" class="tag" target="_blank" rel="noopener nofollow">#David-Maier</a><br>Abstract
In recent years there has been interest in achieving application-level consistency criteria without the latency and availability costs of strongly consistent storage infrastructure. A standard technique is to adopt a vocabulary of commutative operations; this avoids the risk of inconsistency due to message reordering. Another approach was recently captured by the CALM theorem, which proves that logically monotonic programs are guaranteed to be eventually consistent. In logic languages such as Bloom, CALM analysis can automatically verify that programs achieve consistency without coordination. In this paper we present BloomL, an extension to Bloom that takes inspiration from both of these traditions. BloomL generalizes Bloom to support lattices and extends the power of CALM analysis to whole programs containing arbitrary lattices. We show how the Bloom interpreter can be generalized to support efficient evaluation of lattice-based code using well-known strategies from logic programming. Finally, we use BloomL to develop several practical distributed programs, including a key-value store similar to Amazon Dynamo, and show how BloomL encourages the safe composition of small, easy-to-analyze lattices into larger programs.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/conway2012logic.html</link><guid isPermaLink="false">Literature Notes/conway2012logic.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Logic, algebra and databases]]></title><description><![CDATA[ 
 <br><br>Peter Gray (1984)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract<br>I have this nagging feeling there's something very fundamental in database systems that I don't seem to understand.<br><br>I'll skim through most of the first two chapters since I mostly know the content.<br>
<br>Rules of inference - chain rule and Modus Ponens (or mod pons)
<br>Modus Ponens

Given truth of   A
and of           A -&gt; B
deduce           B

Chain Rule

Given truth of   A -&gt; B
and of           B -&gt; C
deduce           A -&gt; C
<br>
<br>
 (it is true that) ()

<br>
 (it is universally true that) () - for tautologies

<br>
The problem of proofs is to prove a formula  given the truth of formulae  to 

<br>There are two ways of proving<br>
<br>Generate a long truth table for each boolean variable - impractical
<br>Write down premises and use rules of inference to deduce other true formulae
<br>Three different proof strategies<br>
<br>Proof by adopting a premise - to prove an implication of form , assume  is true by adopting  as a premise and prove . This is equivalent to 
<br>Reductio Ad Absurdum (reduce to an absurdity) - When applying a chains of inference to a premise, it is possible to get sidetracked and prove irrelevant statements. This is called forward chaining. Instead, you can alternatively try proving the contrapositive () called backward chaining. You can also use both, i.e. assume both  and  are true i.e. both forward and backward chaining until you reach a contradiction.
<br>Proof by Resolution - 
<br>Proof by Resolution

1. Convert the Reductio Ad Absurdum premise to Conjunctive Normal Form (CNF)
2. Take two clauses which contain the same atom with opposite signs and apply resolution to combine the two clauses and eliminate the atom
3. Continue till you get the conjunction of the same atom with different signs
<br>Let's try an exercise<br>
STEP 1<br>
Converting the premise<br>
Converting conclusion to normal form<br>STEP 2<br>
So far we have<br>
The statement can be reduced by resolution <br>STEP 3<br>
We end up with  which is a contradiction ()<br>Advantages of the resolution method are<br>
<br>Do not have to use equivalences to rearrange atoms as all clauses are in normal form and resolution rule doesn't care about the position
<br>Only one rule to remember
<br>Easy to mechanize
<br>However, it is possible to go round in circles and the normal form makes all the clauses look alike(?)<br><br>
<br>A usual rule of thumb is that the existential quantifier () goes with conjunction and the universal quantifier () goes with implication
<br>A unary predicate (taking only one argument) is true for a subset of the universe of discourse (). This subset is called the extension of the predicate and the predicate is called the Characteristic Function of the subset
<br>To negate a quantified expression, change the quantifier, change the signs and change the operators
<br>Predicate calculus can be used to form queries about stored data i.e. we want the extension of the predicate. Predicates are also used to "encode" integrity constraints
<br>You can convert quantified expressions to Conjunctive Normal Form as well (CNF)

<br>Remove equivalences ( =&gt; )
<br>Remove implications ( =&gt; )
<br>Move negation signs from outside to in front of the atoms using De Morgan's laws
<br>Remove existential quantifiers using Skolemisation - If a variable x is existentially quantified and not nested below a universal quantifier, every occurrence of x is replaced by an unknown Skolem Constant (say ) denoting one value of x for which the statement is true. If  is nested under a universal quantifier (), you replace all instances of  with a Skolem Function  
<br>Pull out universal quantifiers
<br>Multiply out bracketed conjunctions - 


<br>You can use this CNF form to again use the Resolution method from the first chapter. However, there are some formulae that are "undecidable" and can trick computers to go in circles
<br>When using resolution, you can use an answer clause along with the conclusion to keep track of the solution 
<br>To avoid circles, we provide computer programs with heuristics

<br>Unit Preference - It is best to use at least one unit clause in resolution
<br>Set of support - You must use specific facts from the problem not just general axioms
<br>Choose unique literals - Attempt to resolve with literals that appear less frequently and appears in the conclusion
<br>Planning - A human will usually plan out the proof first, providing meta-information about which axioms are important to drive the proof


<br>In the resolution method, the process of finding a substitution which makes two literals clash is called Unification
<br>
<br><br>
<br>One class of database languages is based on predicate calculus (SQL), others are based on 'Applicative' or 'Functional' languages
<br>Partial functions - Functions not defined over their whole domain
<br>Restriction and Union of functions

G(x) = if P(x) then F1(x) else F2(x)

Translates to 

G = (F1 restrict P) union (F2 restrict not P)

Where (F1 restrict P) translates to function P defined on the intersection between the domain of F1 and the extension of P
<br>
<br>When evaluating restrictions, the extension of the predicate  is evaluated first since  can be a partial function
<br>In Lambda Calculus, Constructor of new functions is done using the greek symbol  and the process is called function abstraction
<br><br>
<br>A lambda expression denotes an unnamed function
<br>In the functional model, iteration is done using recursion
<br>fac = lambda n. if n = 0 then 1 else n * fac(n - 1)*
<br>
<br>There are two version of recursion

<br>Down-going - Breaks the problem down into smaller problems where the result of the smaller problem is needed to build the answer from the answer from the smaller problems
<br>Up-going - Intermediate results are computed and passed down to the smaller subproblems using a workspace parameter where the final answer is built and is simply passed back through the call chain (for instance, you can do tail-call elimination maybe from <a data-tooltip-position="top" aria-label="ierusalimschy2006programming" data-href="ierusalimschy2006programming" href="https://www.jayitha.github.io/Notes/ierusalimschy2006programming" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Programming in Lua</a><a data-tooltip-position="top" aria-label="ierusalimschy2006programming" data-href="ierusalimschy2006programming" href="https://www.jayitha.github.io/Notes/literature-notes/ierusalimschy2006programming.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Programming in Lua</a>)


<br>A list is a sequence of items that are accessed sequentially. There are two functions used to access lists

<br>car(list): list -&gt; element - returns the first element of the list
<br>cdr(list): list -&gt; list - returns a list of all but the first element of the list


<br>car([2, 3, 4]) = 2
cdr([2, 3, 4]) = [3, 4]
car(cdr([2, 3, 4])) = 3

-- suppose you want to get the nth element of the list
select(n, l) = lambda n,l. if n = 1 then car(s) else select(n-1, cdr(s))
<br>
<br>You can represent trees using nested lists - used for indices like B-Trees
<br>To construct a list you can use the cons(&lt;element&gt;, &lt;list&gt;) function which prepends element to the list
<br>cons(paste, [jam, butter]) = [paste, jam, butter]
<br>
<br>The abstract Lists concept is usually implemented using a linked representation, with a pointer to a list node containing the first item, which has a pointer pointing to the next node and so on
<br>It's possible to prepend a list with more than one item using the cons function. Therefore, it's important to copy the original list before cons if you want to create two different lists
<br>There are two versions of recursion - down-going and up-going
<br>--- function to copy list
-- down-going
dcopy = lambda s. if s = [] then []
				  else cons(car(s), dcopy(cdr(s)))
dcopy([2, 5, 7]) = [2, 5, 7]
-- up-going
ucopy = lambda s. ucop(s, [])
ucop = lambda s,w. if s = [] then w
				   else ucop(cdr(s), cons(car(s), w))
ucopy([2, 5, 7]) = [7, 5, 2]
--- intuitively, the down-going version has access to the last element before it constructs the final list which is not the case with the up-going version
<br>
<br>Predicate atom(l) returns true if l is atomic i.e. not a list or the empty list [] and false otherwise ex. atom(2) = atom([]) = true; atom([2]) = false
<br>The book goes on to discuss how down-going recursion might be slower to execute because of all the space occupied on the stack. In fact, up-going recursion functions can be compiled into iteration + assignment programs ==&gt; removing tail recursion
<br>-- Other list and set processing operators
member(x, s) -&gt; checks if x is in s or is a subset of s
A orelse B -&gt; if A then true else B
A andif B -&gt; if not A then false else B
intsec(la, lb) -&gt; intersection
subset(la, lb)
equal(la, lb)
<br><br><br><br><a data-tooltip-position="top" aria-label="Literature Notes/ierusalimschy2006programming.md" data-href="Literature Notes/ierusalimschy2006programming.md" href="https://www.jayitha.github.io/Notes/Literature Notes/ierusalimschy2006programming" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ierusalimschy2006programming</a><a data-tooltip-position="top" aria-label="Literature Notes/ierusalimschy2006programming.md" data-href="Literature Notes/ierusalimschy2006programming.md" href="https://www.jayitha.github.io/Notes/literature-notes/ierusalimschy2006programming.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ierusalimschy2006programming</a>: Programming in lua]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gray1984logic.html</link><guid isPermaLink="false">Literature Notes/gray1984logic.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Extensions to Starburst: Objects, types, functions, and rules]]></title><description><![CDATA[ 
 <br><br>Guy M Lohman, Bruce Lindsay, Hamid Pirahesh, K Bernhard Schiefer (1991)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lohman1991extensions.html</link><guid isPermaLink="false">Literature Notes/lohman1991extensions.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Looking back at postgres]]></title><description><![CDATA[ 
 <br><br>Joseph M Hellerstein (2018)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a><br>Abstract
This is a recollection of the UC Berkeley Postgres project, which was led by Mike Stonebraker from the mid-1980's to the mid-1990's. The article was solicited for Stonebraker's Turing Award book, as one of many personal/historical recollections. As a result it focuses on Stonebraker's design ideas and leadership. But Stonebraker was never a coder, and he stayed out of the way of his development team. The Postgres codebase was the work of a team of brilliant students and the occasional university "staff programmers" who had little more experience (and only slightly more compensation) than the students. I was lucky to join that team as a student during the latter years of the project. I got helpful input on this writeup from some of the more senior students on the project, but any errors or omissions are mine. If you spot any such, please contact me and I will try to fix them.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hellerstein2018looking.html</link><guid isPermaLink="false">Literature Notes/hellerstein2018looking.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Raha: A configuration-free error detection system]]></title><description><![CDATA[ 
 <br><br>Mohammad Mahdavi, Ziawasch Abedjan, Raul Castro Fernandez, Samuel Madden, Mourad Ouzzani, Michael Stonebraker, Nan Tang (2019)<br>Tags: <br>Abstract
Detecting erroneous values is a key step in data cleaning. Error detection algorithms usually require a user to provide input configurations in the form of rules or statistical parameters. However, providing a complete, yet correct, set of configurations for each new dataset is not trivial, as the user has to know about both the dataset and the error detection algorithms upfront. In this paper, we present Raha, a new configuration-free error detection system. By generating a limited number of configurations for error detection algorithms that cover various types of data errors, we can generate an expressive feature vector for each tuple value. Leveraging these feature vectors, we propose a novel sampling and classification scheme that effectively chooses the most representative values for training. Furthermore, our system can exploit historical data to filter out irrelevant error detection algorithms and configurations. In our experiments, Raha outperforms the state-of-the-art error detection techniques with no more than 20 labeled tuples on each dataset.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mahdavi2019raha.html</link><guid isPermaLink="false">Literature Notes/mahdavi2019raha.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Making B+-Trees cache conscious in main memory]]></title><description><![CDATA[ 
 <br><br>Jun Rao, Kenneth A Ross (2000)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jun-Rao" class="tag" target="_blank" rel="noopener nofollow">#Jun-Rao</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kenneth" class="tag" target="_blank" rel="noopener nofollow">#Kenneth</a> <a href="https://www.jayitha.github.io/Notes?query=tag:A-Ross" class="tag" target="_blank" rel="noopener nofollow">#A-Ross</a><br>Abstract
Previous research has shown that cache behavior is important for main memory index structures. Cache conscious index structures such as Cache Sensitive Search Trees (CSS-Trees) perform lookups much faster than binary search and T-Trees. However, CSS-Trees are designed for decision support workloads with relatively static data. Although B+-Trees are more cache conscious than binary search and T-Trees, their utilization of a cache line is low since half of the space is used to store child pointers. Nevertheless, for applications that require incremental updates, traditional B+-Trees perform well. Our goal is to make B+-Trees as cache conscious as CSS-Trees without increasing their update cost too much. We propose a new indexing technique called “Cache Sensitive B+-Trees” (CSB+-Trees). It is a variant of B+-Trees that stores all the child nodes of any given node contiguously, and keeps only the address of the first child in each node. The rest of the children can be found by adding an offset to that address. Since only one child pointer is stored explicitly, the utilization of a cache line is high. CSB+-Trees support incremental updates in a way similar to B+-Trees. We also introduce two variants of CSB+-Trees. Segmented CSB+-Trees divide the child nodes into segments. Nodes within the same segment are stored contiguously and only pointers to the beginning of each segment are stored explicitly in each node. Segmented CSB+-Trees can reduce the copying cost when there is a split since only one segment needs to be moved. Full CSB+-Trees preallocate space for the full node group and thus reduce the split cost. Our performance studies show that CSB+-Trees are useful for a wide range of applications.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rao2000making.html</link><guid isPermaLink="false">Literature Notes/rao2000making.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Making databases work: The pragmatic wisdom of Michael Stonebraker]]></title><description><![CDATA[ 
 <br><br>Michael L Brodie (2018)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael" class="tag" target="_blank" rel="noopener nofollow">#Michael</a> <a href="https://www.jayitha.github.io/Notes?query=tag:L-Brodie" class="tag" target="_blank" rel="noopener nofollow">#L-Brodie</a><br>Abstract
At the ACM Awards banquet in June 2017, during the 50th anniversary celebration of the A.M. Turing Award, ACM announced the launch of the ACM A.M. Turing Book Series, a sub-series of ACM Books, to celebrate the winners of the A.M. Turing Award, computing's highest honor, the "Nobel Prize" for computing. This series aims to highlight the accomplishments of awardees, explaining their major contributions of lasting importance in computing. "Making Databases Work: The Pragmatic Wisdom of Michael Stonebraker," the first book in the series, celebrates Mike's contributions and impact. What accomplishments warranted computing's highest honor? How did Stonebraker do it? Who is Mike Stonebraker—researcher, professor, CTO, lecturer, innovative product developer, serial entrepreneur, and decades-long leader, and research evangelist for the database community. This book describes Mike's many contributions and evaluates them in light of the Turing Award. The book describes, in 36 chapters, the unique nature, significance, and impact of Mike's achievements in advancing modern database systems over more than 40 years. The stories involve technical concepts, projects, people, prototype systems, failures, lucky accidents, crazy risks, startups, products, venture capital, and lots of applications that drove Mike Stonebraker's achievements and career. Even if you have no interest in databases at all, you'll gain insights into the birth and evolution of Turing Award-worthy achievements from the perspectives of 39 remarkable computer scientists and professionals. Today, data is considered the world's most valuable resource ("The Economist," May 6, 2017), whether it is in the tens of millions of databases used to manage the world's businesses and governments, in the billions of databases in our smartphones and watches, or residing elsewhere, as yet unmanaged, awaiting the elusive next generation of database systems. Every one of the millions or billions of databases includes features that are celebrated by the 2014 A.M. Turing Award and are described in this book.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/brodie2018making.html</link><guid isPermaLink="false">Literature Notes/brodie2018making.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Making information flow explicit in HiStar]]></title><description><![CDATA[ 
 <br><br>Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, David Mazieres (2011)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nickolai-Zeldovich" class="tag" target="_blank" rel="noopener nofollow">#Nickolai-Zeldovich</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Silas-Boyd-Wickizer" class="tag" target="_blank" rel="noopener nofollow">#Silas-Boyd-Wickizer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eddie-Kohler" class="tag" target="_blank" rel="noopener nofollow">#Eddie-Kohler</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David-Mazieres" class="tag" target="_blank" rel="noopener nofollow">#David-Mazieres</a><br>Abstract
HiStar is a new operating system designed to minimize the amount of code that must be trusted. HiStar provides strict information flow control, which allows users to specify precise data security policies without unduly limiting the structure of applications. HiStar's security features make it possible to implement a Unix-like environment with acceptable performance almost entirely in an untrusted user-level library. The system has no notion of superuser and no fully trusted code other than the kernel. HiStar's features permit several novel applications, including privacy-preserving, untrusted virus scanners and a dynamic Web server with only a few thousand lines of trusted code.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/zeldovich2011making.html</link><guid isPermaLink="false">Literature Notes/zeldovich2011making.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Neo: A learned query optimizer]]></title><description><![CDATA[ 
 <br><br>Ryan Marcus, Parimarjan Negi, Hongzi Mao, Chi Zhang, Mohammad Alizadeh, Tim Kraska, Olga Papaemmanouil, Nesime Tatbul (2019)<br>Tags: <br>Abstract
Query optimization is one of the most challenging problems in database systems. Despite the progress made over the past decades, query optimizers remain extremely complex components that require a great deal of hand-tuning for specific workloads and datasets. Motivated by this shortcoming and inspired by recent advances in applying machine learning to data management challenges, we introduce Neo (Neural Optimizer), a novel learning-based query optimizer that relies on deep neural networks to generate query executions plans. Neo bootstraps its query optimization model from existing optimizers and continues to learn from incoming queries, building upon its successes and learning from its failures. Furthermore, Neo naturally adapts to underlying data patterns and is robust to estimation errors. Experimental results demonstrate that Neo, even when bootstrapped from a simple optimizer like PostgreSQL, can learn a model that offers similar performance to state-of-the-art commercial optimizers, and in some cases even surpass them.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/marcus2019neo.html</link><guid isPermaLink="false">Literature Notes/marcus2019neo.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Bao: Making learned query optimization practical]]></title><description><![CDATA[ 
 <br><br>Ryan Marcus, Parimarjan Negi, Hongzi Mao, Nesime Tatbul, Mohammad Alizadeh, Tim Kraska (2021)<br>Tags: <br>Abstract
Recent efforts applying machine learning techniques to query optimization have shown few practical gains due to substantive training overhead, inability to adapt to changes, and poor tail performance. Motivated by these difficulties, we introduce Bao (the \underlineBa ndit \underlineo ptimizer). Bao takes advantage of the wisdom built into existing query optimizers by providing per-query optimization hints. Bao combines modern tree convolutional neural networks with Thompson sampling, a well-studied reinforcement learning algorithm. As a result, Bao automatically learns from its mistakes and adapts to changes in query workloads, data, and schema. Experimentally, we demonstrate that Bao can quickly learn strategies that improve end-to-end query execution performance, including tail latency, for several workloads containing long-running queries. In cloud environments, we show that Bao can offer both reduced costs and better performance compared with a commercial system.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/marcus2021bao.html</link><guid isPermaLink="false">Literature Notes/marcus2021bao.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Massively parallel sort-merge joins in main memory multi-core database systems]]></title><description><![CDATA[ 
 <br><br>Martina-Cezara Albutiu, Alfons Kemper, Thomas Neumann (2012)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Martina-Cezara-Albutiu" class="tag" target="_blank" rel="noopener nofollow">#Martina-Cezara-Albutiu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a><br>Abstract
Two emerging hardware trends will dominate the database system technology in the near future: increasing main memory capacities of several TB per server and massively parallel multi-core processing. Many algorithmic and control techniques in current database technology were devised for disk-based systems where I/O dominated the performance. In this work we take a new look at the well-known sort-merge join which, so far, has not been in the focus of research in scalable massively parallel multi-core data processing as it was deemed inferior to hash joins. We devise a suite of new massively parallel sort-merge (MPSM) join algorithms that are based on partial partition-based sorting. Contrary to classical sort-merge joins, our MPSM algorithms do not rely on a hard to parallelize final merge step to create one complete sort order. Rather they work on the independently created runs in parallel. This way our MPSM algorithms are NUMA-affine as all the sorting is carried out on local memory partitions. An extensive experimental evaluation on a modern 32-core machine with one TB of main memory proves the competitive performance of MPSM on large main memory databases with billions of objects. It scales (almost) linearly in the number of employed cores and clearly outperforms competing hash join proposals - in particular it outperforms the "cutting-edge" Vectorwise parallel query engine by a factor of four.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/albutiu2012massively.html</link><guid isPermaLink="false">Literature Notes/albutiu2012massively.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Microkernel operating system architecture and mach]]></title><description><![CDATA[ 
 <br><br>RICHARD F RAsHD, RıcARD P DRAvEs, RANDALL W DEAN (1991)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:RICHARD" class="tag" target="_blank" rel="noopener nofollow">#RICHARD</a> <a href="https://www.jayitha.github.io/Notes?query=tag:F-RAsHD" class="tag" target="_blank" rel="noopener nofollow">#F-RAsHD</a> <a href="https://www.jayitha.github.io/Notes?query=tag:RıcARD" class="tag" target="_blank" rel="noopener nofollow">#RıcARD</a> <a href="https://www.jayitha.github.io/Notes?query=tag:P-DRAvEs" class="tag" target="_blank" rel="noopener nofollow">#P-DRAvEs</a> <a href="https://www.jayitha.github.io/Notes?query=tag:RANDALL" class="tag" target="_blank" rel="noopener nofollow">#RANDALL</a> <a href="https://www.jayitha.github.io/Notes?query=tag:W-DEAN" class="tag" target="_blank" rel="noopener nofollow">#W-DEAN</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rashd1991microkernel.html</link><guid isPermaLink="false">Literature Notes/rashd1991microkernel.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Model and verification of a data manager based on ARIES]]></title><description><![CDATA[ 
 <br><br>Dean Kuo (1996)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Dean-Kuo" class="tag" target="_blank" rel="noopener nofollow">#Dean-Kuo</a><br>Abstract
In this article, we model and verify a data manager whose algorithm is based on ARIES. The work uses the I/O automata method as the formal model and the definition of correctness is defined on the interface between the scheduler and the data manager.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kuo1996model.html</link><guid isPermaLink="false">Literature Notes/kuo1996model.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[ARIES: A transaction recovery method supporting fine-granularity locking and partial rollbacks using write-ahead logging]]></title><description><![CDATA[ 
 <br><br>Chandrasekaran Mohan, Don Haderle, Bruce Lindsay, Hamid Pirahesh, Peter Schwarz (1992)<br>Tags: <br>Abstract
DB2TM, IMS, and TandemTM systems. ARIES is applicable not only to database management systems but also to persistent object-oriented languages, recoverable file systems and transaction-based operating systems. ARIES has been implemented, to varying degrees, in IBM's OS/2TM Extended Edition Database Manager, DB2, Workstation Data Save Facility/VM, Starburst and QuickSilver, and in the University of Wisconsin's EXODUS and Gamma database machine.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mohan1992aries.html</link><guid isPermaLink="false">Literature Notes/mohan1992aries.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Global data plane: A federated vision for secure data in edge computing]]></title><description><![CDATA[ 
 <br><br>Nitesh Mor, Richard Pratt, Eric Allman, Kenneth Lutz, John Kubiatowicz (2019)<br>Tags: <br>Abstract
We propose a federated edge-computing architecture for management of data. Our vision is to enable a service provider model for "data-services", where a user can enter into economic agreements with an infrastructure maintainer to provide storage and communication of data, without necessarily trusting the infrastructure provider. Toward this vision, we present cryptographically hardened cohesive collections of data items called DataCapsules, and an overview of the underlying federated architecture, called Global Data Plane.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mor2019global.html</link><guid isPermaLink="false">Literature Notes/mor2019global.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Approximate query engines: Commercial challenges and research opportunities]]></title><description><![CDATA[ 
 <br><br>Barzan Mozafari (2017)<br>Tags: <br>Abstract
Recent years have witnessed a surge of interest in Approximate Query Processing (AQP) solutions, both in academia and the commercial world. In addition to well-known open problems in this area, there are many new research challenges that have surfaced as a result of the first interaction of AQP technology with commercial and real-world customers. We categorize these into deployment, planning, and interface challenges. At the same time, AQP settings introduce many interesting opportunities that would not be possible in a database with precise answers. These opportunities create hopes for overcoming some of the major limitations of traditional database systems. For example, we discuss how a database can reuse its past work in a generic way, and become smarter as it answers new queries. Our goal in this talk is to suggest some of the exciting research directions in this field that are worth pursuing.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mozafari2017approximate.html</link><guid isPermaLink="false">Literature Notes/mozafari2017approximate.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Deep learning for entity matching: A design space exploration]]></title><description><![CDATA[ 
 <br><br>Sidharth Mudgal, Han Li, Theodoros Rekatsinas, AnHai Doan, Youngchoon Park, Ganesh Krishnan, Rohit Deep, Esteban Arcaute, Vijay Raghavendra (2018)<br>Tags: <br>Abstract
Entity matching (EM) finds data instances that refer to the same real-world entity. In this paper we examine applying deep learning (DL) to EM, to understand DL's benefits and limitations. We review many DL solutions that have been developed for related matching tasks in text processing (e.g., entity linking, textual entailment, etc.). We categorize these solutions and define a space of DL solutions for EM, as embodied by four solutions with varying representational power: SIF, RNN, Attention, and Hybrid. Next, we investigate the types of EM problems for which DL can be helpful. We consider three such problem types, which match structured data instances, textual instances, and dirty instances, respectively. We empirically compare the above four DL solutions with Magellan, a state-of-the-art learning-based EM solution. The results show that DL does not outperform current solutions on structured EM, but it can significantly outperform them on textual and dirty EM. For practitioners, this suggests that they should seriously consider using DL for textual and dirty EM problems. Finally, we analyze DL's performance and discuss future research directions.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mudgal2018deep.html</link><guid isPermaLink="false">Literature Notes/mudgal2018deep.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Notes on data base operating systems]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gray1978notes.html</link><guid isPermaLink="false">Literature Notes/gray1978notes.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[On the reasonable effectiveness of relational diagrams: Explaining relational query patterns and the pattern expressiveness of relational languages]]></title><description><![CDATA[ 
 <br><br>Wolfgang Gatterbauer, Cody Dunne (2024)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wolfgang-Gatterbauer" class="tag" target="_blank" rel="noopener nofollow">#Wolfgang-Gatterbauer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Cody-Dunne" class="tag" target="_blank" rel="noopener nofollow">#Cody-Dunne</a><br>Abstract
Comparing relational languages by their logical expressiveness is well understood. Less well understood is how to compare relational languages by their ability to represent relational query patterns. Indeed, what are query patterns other than "a certain way of writing a query"? And how can query patterns be defined across procedural and declarative languages, irrespective of their syntax? To the best of our knowledge, we provide the first semantic definition of relational query patterns by using a variant of structure-preserving mappings between the relational tables of queries. This formalism allows us to analyze the relative pattern expressiveness of relational language fragments and create a hierarchy of languages with equal logical expressiveness yet different pattern expressiveness. Notably, for the non-disjunctive language fragment, we show that relational calculus can express a larger class of patterns than the basic operators of relational algebra. Our language-independent definition of query patterns opens novel paths for assisting database users. For example, these patterns could be leveraged to create visual query representations that faithfully represent query patterns, speed up interpretation, and provide visual feedback during query editing. As a concrete example, we propose Relational Diagrams, a complete and sound diagrammatic representation of safe relational calculus that is provably (i) unambiguous, (ii) relationally complete, and (iii) able to represent all query patterns for unions of non-disjunctive queries. Among all diagrammatic representations for relational queries that we are aware of, ours is the only one with these three properties. Furthermore, our anonymously preregistered user study shows that Relational Diagrams allow users to recognize patterns meaningfully faster and more accurately than SQL.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gatterbauer2024reasonable.html</link><guid isPermaLink="false">Literature Notes/gatterbauer2024reasonable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Online aggregation]]></title><description><![CDATA[ 
 <br><br>Joseph M Hellerstein, Peter J Haas, Helen J Wang (1997)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter" class="tag" target="_blank" rel="noopener nofollow">#Peter</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Haas" class="tag" target="_blank" rel="noopener nofollow">#J-Haas</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Helen" class="tag" target="_blank" rel="noopener nofollow">#Helen</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Wang" class="tag" target="_blank" rel="noopener nofollow">#J-Wang</a><br>Abstract
Aggregation in traditional database systems is performed in batch mode: a query is submitted, the system processes a large volume of data over a long period of time, and, eventually, the final answer is returned. This archaic approach is frustrating to users and has been abandoned in most other areas of computing. In this paper we propose a new online aggregation interface that permits users to both observe the progress of their aggregation queries and control execution on the fly. After outlining usability and performance requirements for a system supporting online aggregation, we present a suite of techniques that extend a database system to meet these requirements. These include methods for returning the output in random order, for providing control over the relative rate at which different aggregates are computed, and for computing running confidence intervals. Finally, we report on an initial implementation of online aggregation in POSTGRES.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hellerstein1997online.html</link><guid isPermaLink="false">Literature Notes/hellerstein1997online.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Operating systems: Three easy pieces]]></title><description><![CDATA[ 
 <br><br>Remzi H. Arpaci-Dusseau, Andrea C. Arpaci-Dusseau (2018)<br>
Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract<br>URL - <a rel="noopener nofollow" class="external-link" href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank">https://pages.cs.wisc.edu/~remzi/OSTEP/</a><br><br>
<br>Read "Surely You're Joking, Mr. Feynman"
<br>The three pieces are virtualization, concurrency and persistence
<br>Other names for an OS<br>
<br>a virtual machine
<br>provides a standard library to applications
<br>resource manager
<br>Role of OS

<br>Takes physical resources, like CPU, memory, or disk and virtualizes them
<br>IT handles concurrency issues
<br>Stores files persistently

<br>Design Goals<br>
<br>Performance - minimize time and space for features like virtualization
<br>Protection - isolating one application from the others and the OS
<br>Reliability - OS cannot fail
<br>History<br>
<br>Early OS simply consisted of a set of libraries for commonly-used functions
<br>Next, system calls were invented - they realized you should treat code that runs on behalf of the OS differently (it should have superior access) from a user's
<br>Aside
User applications run in user mode  OS processes are run in kernel mode
<br>
The key difference between a system call and a procedure call is that a system call transfers control (i.e. jumps) into the OS while simultaneously raising the hardware privilege level
In user mode, the program cannot initialize I/O request to the disk or access physical memory or send a packet on the network. 
A system call is initiated through a trap, control is passed to a trap handler entering the kernel mode. When the request has been serviced, control is passed back to the user via a return-from-trap instruction
<br>
<br>Shift from mainframe to minicomputers
<br>Introduction of multiprogramming - instead of running one job at a time, run multiple jobs switching rapidly between them.

<br>Switching was important because I/O devices were slow


<br>Shortly after, the UNIX OS was developed by Bell Labs
<br>From minicomputers to PCs
<br><br><a data-href="Virtualization" href="https://www.jayitha.github.io/Notes/Virtualization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Virtualization</a><a data-href="Virtualization" href="https://www.jayitha.github.io/Notes/glossary/virtualization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Virtualization</a><br>
<br>the OS takes a physical resource and transforms it into a more general, powerful and easy-to-use virtual form of itself
<br>Virtualizing the CPU enables you to, say, run multiple programs on a single processor as if they were running on multiple processors
<br>Each running program has its own private memory - virtualizing memory

<br>Each process accesses its own private virtual address space


<br><br>
<br>A program itself is just lifeless data. A process is a running program.
<br>Virtualizing the CPU by stopping one process to run another is called time sharing the CPU
<br>To implement time-sharing, you need both low-level machinery mechanisms like context switches and high-level intelligence policies like scheduling
<br>Note
Separating mechanisms (low-level) and policies (high-level) is a way of achieving modularity i.e. you can change low-level mechanisms without having to change (high-level) policies.
<br>
<br>To characterize a process we need to take stock of its machine state

<br>What it can read or update
<br>What parts of the machine is it using 
<br>memory (its address space)
<br>registers 

<br>special registers include - Program Counter (PC) (or Instruction Pointer (IP)), stack pointer and associated frame pointer


<br>I/O


<br>Process APIs should include<br>
<br>Create
<br>Destroy
<br>Wait
<br>Miscellaneous Control - e.g. suspend and resume 
<br>Status
<br>Process Creation<br>
<br>Load code and any static data into the address space of the process (usually onto the heap)

<br>Old OS' load eagerly whereas modern ones load lazily


<br>Allocate program's run-time stack ans heap

<br>the heap is initially small, but grows as the program requests for more space


<br>Initialize I/O file descriptors - e.g. stdin, stdout, stderr
<br>Start the process by jumping to the main()
<br>Process States<br>
<br>
Running - executing instructions on a processor

<br>
Ready

<br>
Blocked - e.g. initiated I/O request to disk, blocked. Some other process can use the processor

<br>
Does there need to be any processor involvement as I/O is taking place?

<br>Data Structures<br>
<br>The OS has data structures to track information such as - the process list
<br>The process list will for instance track the following information about each process (called a Process Control Block (PCB))<br><img alt="Pasted image 20240203110534.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240203110534.png"><br><br><a data-href="Concurrency" href="https://www.jayitha.github.io/Notes/Concurrency" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Concurrency</a><a data-href="Concurrency" href="https://www.jayitha.github.io/Notes/glossary/concurrency.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Concurrency</a><br>
<br>A thread is a function that is running within the same memory space as other functions with more than one active at a time
<br>A program that uses threads to increment a shared counter but doesn't force atomicity will see different outputs for the same number of specified increments
<br><br><a data-href="Persistence" href="https://www.jayitha.github.io/Notes/Persistence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Persistence</a><a data-href="Persistence" href="https://www.jayitha.github.io/Notes/glossary/persistence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Persistence</a><br>
<br>The software that manages the disk is called the file system
<br>Unlike CPU or memory, disks aren't typically virtualized
<br>For performance, file systems delay write for a while hoping to batch them using intricate write protocols like journaling or copy-on-write
<br><br><br><br>: <br>: <br>: ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/arpacidusseau2018operating.html</link><guid isPermaLink="false">Literature Notes/arpacidusseau2018operating.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240203110534.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240203110534.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Opportunities for optimism in contended main-memory multicore transactions]]></title><description><![CDATA[ 
 <br><br>Yihe Huang, William Qian, Eddie Kohler, Barbara Liskov, Liuba Shrira (2020)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Yihe-Huang" class="tag" target="_blank" rel="noopener nofollow">#Yihe-Huang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:William-Qian" class="tag" target="_blank" rel="noopener nofollow">#William-Qian</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eddie-Kohler" class="tag" target="_blank" rel="noopener nofollow">#Eddie-Kohler</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Barbara-Liskov" class="tag" target="_blank" rel="noopener nofollow">#Barbara-Liskov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Liuba-Shrira" class="tag" target="_blank" rel="noopener nofollow">#Liuba-Shrira</a><br>Abstract
Optimistic concurrency control, or OCC, can achieve excellent performance on uncontended workloads for main-memory transactional databases. Contention causes OCC's performance to degrade, however, and recent concurrency control designs, such as hybrid OCC/locking systems and variations on multiversion concurrency control (MVCC), have claimed to outperform the best OCC systems. We evaluate several concurrency control designs under varying contention and varying workloads, including TPCC, and find that implementation choices unrelated to concurrency control may explain much of OCC's previously-reported degradation. When these implementation choices are made sensibly, OCC performance does not collapse on high-contention TPC-C. We also present two optimization techniques, commit-time updates and timestamp splitting, that can dramatically improve the highcontention performance of both OCC and MVCC. Though these techniques are known, we apply them in a new context and highlight their potency: when combined, they lead to performance gains of 3:4 for MVCC and 3:6 for OCC in a TPC-C workload.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/huang2020opportunities.html</link><guid isPermaLink="false">Literature Notes/huang2020opportunities.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Optimizing database-backed applications with query synthesis]]></title><description><![CDATA[ 
 <br><br>Alvin Cheung, Armando Solar-Lezama, Samuel Madden (2013)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alvin-Cheung" class="tag" target="_blank" rel="noopener nofollow">#Alvin-Cheung</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Armando-Solar-Lezama" class="tag" target="_blank" rel="noopener nofollow">#Armando-Solar-Lezama</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Samuel-Madden" class="tag" target="_blank" rel="noopener nofollow">#Samuel-Madden</a><br>Abstract
Object-relational mapping libraries are a popular way for applications to interact with databases because they provide transparent access to the database using the same language as the application. Unfortunately, using such frameworks often leads to poor performance, as modularity concerns encourage developers to implement relational operations in application code. Such application code does not take advantage of the optimized relational implementations that database systems provide, such as efficient implementations of joins or push down of selection predicates. In this paper we present QBS, a system that automatically transforms fragments of application logic into SQL queries. QBS differs from traditional compiler optimizations as it relies on synthesis technology to generate invariants and postconditions for a code fragment. The postconditions and invariants are expressed using a new theory of ordered relations that allows us to reason precisely about both the contents and order of the records produced complex code fragments that compute joins and aggregates. The theory is close in expressiveness to SQL, so the synthesized postconditions can be readily translated to SQL queries. Using 75 code fragments automatically extracted from over 120k lines of open-source code written using the Java Hibernate ORM, we demonstrate that our approach can convert a variety of imperative constructs into relational specifications and significantly improve application performance asymptotically by orders of magnitude.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/cheung2013optimizing.html</link><guid isPermaLink="false">Literature Notes/cheung2013optimizing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Out of the tar pit]]></title><description><![CDATA[ 
 <br><br>Ben Moseley, Peter Marks (2006)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Ben-Moseley" class="tag" target="_blank" rel="noopener nofollow">#Ben-Moseley</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Marks" class="tag" target="_blank" rel="noopener nofollow">#Peter-Marks</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
Complexity is the single major difficulty in the successful development of large-scale software systems. Following Brooks we distinguish accidental from essential difficulty, but disagree with his premise that most complexity remaining in contemporary systems is essential. We identify common causes of complexity and discuss general approaches which can be taken to eliminate them where they are accidental in nature. To make things more concrete we then give an outline for a potential complexity-minimizing approach based on functional programming and Codd’s relational model of data.
<br>Paper discusses common causes of large-scale system complexity (in understanding a system) and ways to avoid accidental complexity<br>The major contributor to the complexity in the development and maintenance of large-scale software systems is handling of the state. Other factors include code volume and flow of control through the system<br>The State problem is usually handled either using object-oriented programming (which couples state with behavior) or functional programming (does away with state and side effects)<br>Paper proposes combining both approaches along with ideas from <a data-href="Relational Model" href="https://www.jayitha.github.io/Notes/Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relational Model</a><a data-href="Relational Model" href="https://www.jayitha.github.io/Notes/glossary/relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relational Model</a><br>While there are other factors that making building large-scale systems hard, the paper reasons that complexity is the root cause of all since understanding the system can fix most other problems but complexity makes understanding hard<br>
Simplicity is Hard
<br>Two approaches to understanding systems<br>
<br>Testing 

<br>Treat system as a blackbox and draw conclusions based on system's response to certain situations
<br>Tests on one input tells you nothing about the system's behavior on another input


<br>Informal Reasoning

<br>Understand system by examining the internals


<br>
<br>The latter is considered more important since it can lead to generating less errors whereas the former can only detect more errors
<br>Have you ever performed the right tests? Negative.
<br>Causes of Complexity - sometimes complexity is inherent in the problem, sometimes not<br>
<br>Complexity caused by State (a stateful system)

<br>"try it again", "reload the document" ... the presence of state makes programs hard to understand
<br>Specifically, it is the number of possible states that makes it complex - The number of states grow exponentially; with each extra bit the number of states doubles


<br>State on Testing

<br>tests on one state tell you nothing about other states
<br>A common approach is to assume a clean initial state when testing - can't always get away with this
<br>The issues with testing, and the number of states compound


<br>State on Informal Reasoning

<br>As the number of states increase, informally reasoning by performing a mental case-by-case simulation gets out of hand
<br>Contamination - Even if a procedure is stateless on it's own, if it uses any other procedure that is even indirectly stateful, the procedure is contaminated and is again hard to reason




<br>Complexity caused by Control (Order in which things happen)

When a programmer is forced (through use of a language with implicit flow control) to specify the control, they are being forced to specify an aspect of how the system should work rather than simply what is desired, effectively over-specifying the problem


<br>When an artificial order is imposed, some compilers choose to ignore the order. However, when trying to informally reason through the code, the reader is forced to first assume the order is important, then upon further inspection, determine if it isn't (which is prone to mistakes)
<br>Another issue with control occurs with concurrency

<br>Concurrency makes it harder to reason when using shared-state concurrency (most common form) where the number of scenarios are too many
<br>Also testing is difficult since the system can exhibit different behavior on the same input and same initial state when run multiple times




<br>Complexity caused by Code Volume

<br>Mostly a side effect - managing state or specifying control
<br>Of interest because (1) easiest form of complexity to measure and (2) interacts badly with other causes of complexity

Complexity exhibits a nonlinear increase with size of code<br>
Dijkstra mused that there's some law of nature that the amount of intellectual effort needed grows with the square with the program length. He later argues that with powers of abstraction, the amount of intellectual effort needed need not grow more than proportional to program length


<br>Paper argues that with effective management of state and control, the non-linearity is uncertain


<br>Other causes include: duplicated code, dead code, unnecessary abstraction, missed abstraction, poor modularity, poor documentation...<br>
- Complexity breeds complexity (secondary causes, if you don't understand code, it is likely you'll write duplicate code),<br>
- Simplicity is Hard (effort is needed, first solution usually not simple) and<br>
- Power corrupts (the more power that a language gives the programmer, the more wary one should be of the produced code; argues that garbage collection is good)


<br>Classical approaches to manage complexity - Object-orientation, Functional Programming and Logic Programming<br>
<br>
Object-Orientation

<br>The dominant (imperative) method for general software development for traditional von-Neumann (state-based) computation
<br>In OOP, an object consists of a state with an associated set of methods that manipulate the state - encapsulation enforcing integrity constraints over an object's state
<br>Two issues with OOP

<br>If multiple methods access the object, a constraint may have to be enforced across all methods
<br>It's difficult to enforce constraints based on multiple objects and not just a single one


<br>Object Identity - In OOP, each object is a uniquely identifiable entity regardless of its attributes (intensional identity). In contrast, in relational algebra, objects have extensional identity where objects are the same if their attributes are the same

<br>Useful when using a mutable stateful abstraction - two distinct stateful objects can be mutated to contain different states even if their attributes happen to initially be the same (???????)
<br>Problematic otherwise, since now in OOPs we need procedures to check if two objects are equal based on attribute values


<br>All forms of OOPs rely on state and hence suffer from all problems associated with state
<br>Most OOPs language provide standard seq control and shared-state concurrency leading to all the pre-specified problems
<br>Some OOPs languages provide message-passing models (actor-style), however, not widespread


<br>
Functional Programming

<br>Completely stateless lambda calculus of Church
<br>Untyped lambda calculus is equivalent in power to the standard stateful abstraction of computation (the Turing machine)
<br>State

<br>Modern functional languages are either pure (no state or side-effects) or impure (discourage state and side-effects but permit use)
<br>By avoiding state - referential transparency (when providing a set of arguments, a function will always behave the same way) (testing becomes more effective)
<br>Informal reasoning is more effective as well


<br>Control

<br>Functional languages specify a left-to-right sequencing of calculation of function arguments (some implicit order) and hence, can face the same problems as with OOPs however, concurrent variants do exist


<br>In the functional style, to simulate implicit mutable states, we instead pass explicit mutable function arguments maintaining referential transparency. However, this approach soon impairs informal reasoning if the state being passed is large and complex, you end up passing irrelevant data. That being said, there are benefits to avoiding hidden, implicit, mutable state.


<br>State and Modularity<br>
<br>States can permit some forms of modularity. Within a stateful framework, you can add state to any component without adjusting the components that invoke it. In the functional framework, every component has to carry additional information
<br>The tradeoff lies in referential transparency
<br>One approach is apparently using the system of monads used by Haskell [@wadler1995monads]
<br>
<br>Logic Programming
<br>
<br>Declarative, not derived from stateful von-Neumann architecture
<br>In pure logic programming, you only make statements about the problem and desired solutions (by specifying axioms which describe the problem and the attributes satisfied by solutions)
<br>Running the system is equivalent to "constructing a valid proof for each solution"
<br>State - Pure logical programming (unlike it's extensions) makes no use of mutable state and hence has the same advantages in understandability as pure functional programming
<br>Control - pure Prolog specifies both an implicit ordering (left to right) and an implicit ordering of clause application (top down). This is not the case in ideal logic programming where there is no such order
<br>In theory, logic programming can escape from complexity problems caused by control
<br>Essential Complexity - Inherent in, and the essence of, the problem (as seen by the users)<br>
Accidental Complexity - all the rest; complexity with which the development team would not have to deal with in the ideal world<br>Ideal World<br>
<br>Not concerned with performance; language and infrastructure provide all general support
<br>State is accidental state if it can be omitted in the ideal world. Similarly for control
<br>Even in the ideal work, we need to derive formal requirements(processable by a computer) from informal requirements (from users)
<br>Informal Requirements -&gt; Formal Requirements
<br>The next step is to simply execute formal requirements directly - absolute simplicity and declarative programming
<br>State in Ideal World<br>
<br>Some data specified in the users informal requirements can give rise to state
<br>All data is either provided directly to the system (input) or derived. Further, derived data is either immutable (only intended for display) or mutable (explicitly asked to update data)

<br>Input data - included in the informal requirements and falls into one of two cases

<br>A possibility the system may need to refer to the data in the future - essential state
<br>No possibility - data need not be maintained, no state generated


<br>Essential Derived Data - Immutable

<br>Can always be re-derived from input (essential state) -&gt; Accidental State


<br>Essential Derived Data - Mutable

<br>Can be re-derived (accidental state)
<br>Mutability only makes sense when the mutating function has an inverse - otherwise it is not considered as derived data and is effectively input


<br>Accidental Derived Data

<br>State that is derived but not in requirements is accidental state




<br><img alt="Pasted image 20240105205838.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240105205838.png"><br>Control in the ideal world<br>
<br>Control is considered entirely accidental
<br>
How close is it possible to get to the ideal world in the real one?
<br>Theoretical and Practical Limitations<br>
<br>Formal specifications are categorized into two categories

<br>Property-based - focus on what is required (declarative)
<br>Model-based - Construct a potential model for the system (stateful)


<br>There are two reasons why we might be forced to include some accidental state

<br>Ease of expression - sometimes it's more natural to store some accidental (mutable derivable state) instead of deriving the state from the input using logic (the position of a player in a game)
<br>Performance - Using accidental state and control can improve efficiency


<br>It's important to keep in mind, that once we introduce accidental state, however required it may be, we expose ourselves to the same problems that were discussed before
<br>Recommendations for dealing with required accidental complexity - Avoid and Separate<br><br><img alt="Pasted image 20240108115831.png" src="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240108115831.png"><br>
<br>Paper advocates a high level separation into three components each specified by a different restricted language - Essential State, Essential Logic, Accidental State and Control
<br>Accidental State and Control are only there to improve performance; therefore, the system should work without this component, albeit slowly
<br>Discusses <a data-href="Relational Model" href="https://www.jayitha.github.io/Notes/Relational Model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Relational Model</a><a data-href="Relational Model" href="https://www.jayitha.github.io/Notes/glossary/relational-model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Relational Model</a><br><br><br>: ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/moseley2006out.html</link><guid isPermaLink="false">Literature Notes/moseley2006out.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate><enclosure url="https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240105205838.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://www.jayitha.github.io/Notes/lib/media/pasted-image-20240105205838.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Lithe: Enabling efficient composition of parallel libraries]]></title><description><![CDATA[ 
 <br><br>Heidi Pan, Benjamin Hindman, Krste Asanovic (2009)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/pan2009lithe.html</link><guid isPermaLink="false">Literature Notes/pan2009lithe.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Verdictdb: Universalizing approximate query processing]]></title><description><![CDATA[ 
 <br><br>Yongjoo Park, Barzan Mozafari, Joseph Sorenson, Junhao Wang (2018)<br>Tags: <br>Abstract
Despite 25 years of research in academia, approximate query processing (AQP) has had little industrial adoption. One of the major causes of this slow adoption is the reluctance of traditional vendors to make radical changes to their legacy codebases, and the preoccupation of newer vendors (e.g., SQL-on-Hadoop products) with implementing standard features. Additionally, the few AQP engines that are available are each tied to a specific platform and require users to completely abandon their existing databases—an unrealistic expectation given the infancy of the AQP technology. Therefore, we argue that a universal solution is needed: a database-agnostic approximation engine that will widen the reach of this emerging technology across various platforms. Our proposal, called VerdictDB, uses a middleware architecture that requires no changes to the backend database, and thus, can work with all off-the-shelf engines. Operating at the driver-level, VerdictDB intercepts analytical queries issued to the database and rewrites them into another query that, if executed by any standard relational engine, will yield sufficient information for computing an approximate answer. VerdictDB uses the returned result set to compute an approximate answer and error estimates, which are then passed on to the user or application. However, lack of access to the query execution layer introduces significant challenges in terms of generality, correctness, and efficiency. This paper shows how VerdictDB overcomes these challenges and delivers up to 171× speedup (18.45× on average) for a variety of existing engines, such as Impala, Spark SQL, and Amazon Redshift, while incurring less than 2.6% relative error. VerdictDB is open-sourced under Apache License.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/park2018verdictdb.html</link><guid isPermaLink="false">Literature Notes/park2018verdictdb.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Partial results for online query processing]]></title><description><![CDATA[ 
 <br><br>Vijayshankar Raman, Joseph M Hellerstein (2002)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Vijayshankar-Raman" class="tag" target="_blank" rel="noopener nofollow">#Vijayshankar-Raman</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a><br>Abstract
Traditional query processors generate full, accurate query results, either in batch or in pipelined fashion. We argue that this strict model is too rigid for exploratory queries over diverse and distributed data sources, such as sources on the Internet. Instead, we propose a looser model of querying in which a user submits a broad initial query outline, and the system continually generates partial result tuples that may contain values for only some of the output fields. The user can watch these partial results accumulate at the user interface, and accordingly refine the query by specifying their interest in different kinds of partial results.After describing our querying model and user interface, we present a query processing architecture for this model which is implemented in the Telegraph dataflow system. Our architecture is designed to generate partial results quickly, and to adapt query execution to changing user interests. The crux of this architecture is a dataflow operator that supports two kinds of reorderings: reordering of intermediate tuples within a dataflow, and reordering of query plan operators through which tuples flow. We study reordering policies that optimize for the quality of partial results delivered over time, and experimentally demonstrate the benefits of our architecture in this context.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/raman2002partial.html</link><guid isPermaLink="false">Literature Notes/raman2002partial.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Paxos made simple]]></title><description><![CDATA[ 
 <br><br>Leslie Lamport (2001)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Leslie-Lamport" class="tag" target="_blank" rel="noopener nofollow">#Leslie-Lamport</a><br>Abstract
At the PODC 2001 conference, I got tired of everyone saying how difficult it was to understand the Paxos algorithm, published in [122]. Although people got so hung up in the pseudo-Greek names that they found the paper hard to understand, the algorithm itself is very simple. So, I cornered a couple of people at the conference and explained the algorithm to them orally, with no paper. When I got home, I wrote down the explanation as a short note, which I later revised based on comments from Fred Schneider and Butler Lampson. The current version is 13 pages long, and contains no formula more complicated than n1 &gt; n2.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lamport2001paxos.html</link><guid isPermaLink="false">Literature Notes/lamport2001paxos.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Practical byzantine fault tolerance]]></title><description><![CDATA[ 
 <br><br>Miguel Castro, Barbara Liskov, others (1999)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Miguel-Castro" class="tag" target="_blank" rel="noopener nofollow">#Miguel-Castro</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Barbara-Liskov" class="tag" target="_blank" rel="noopener nofollow">#Barbara-Liskov</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/castro1999practical.html</link><guid isPermaLink="false">Literature Notes/castro1999practical.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Precisely serializable snapshot isolation (PSSI)]]></title><description><![CDATA[ 
 <br><br>Stephen Revilak, Patrick O'Neil, Elizabeth O'Neil (2011)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Stephen-Revilak" class="tag" target="_blank" rel="noopener nofollow">#Stephen-Revilak</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Patrick-O" class="tag" target="_blank" rel="noopener nofollow">#Patrick-O</a>'Neil <a href="https://www.jayitha.github.io/Notes?query=tag:Elizabeth-O" class="tag" target="_blank" rel="noopener nofollow">#Elizabeth-O</a>'Neil<br>Abstract
Many popular database management systems provide snapshot isolation (SI) for concurrency control, either in addition to or in place of full serializability based on locking. Snapshot isolation was introduced in 1995, with noted anomalies that can lead to serializability violations. Full serializability was provided in 2008 and improved in 2009 by aborting transactions in dangerous structures, which had been shown in 2005 to be precursors to potential SI anomalies. This approach resulted in a runtime environment guaranteeing a serializable form of snapshot isolation (which we call SSI or ESSI) for arbitrary applications. But transactions in a dangerous structure frequently do not cause true anomalies so, as the authors point out, their method is conservative: it can cause unnecessary aborts. In the current paper, we demonstrate our PSSI algorithm to detect cycles in a snapshot isolation dependency graph and abort transactions to break the cycle. This algorithm provides a much more precise criterion to perform aborts. We have implemented our algorithm in an open source production database system (MySQL/InnoDB), and our performance study shows that PSSI throughput improves on ESSI, with significantly fewer aborts.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/revilak2011precisely.html</link><guid isPermaLink="false">Literature Notes/revilak2011precisely.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Principles of Mathematical Analysis]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rudin1964principles.html</link><guid isPermaLink="false">Literature Notes/rudin1964principles.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Principles of query visualization]]></title><description><![CDATA[ 
 <br><br>Wolfgang Gatterbauer, Cody Dunne, HV Jagadish, Mirek Riedewald (2022)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wolfgang-Gatterbauer" class="tag" target="_blank" rel="noopener nofollow">#Wolfgang-Gatterbauer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Cody-Dunne" class="tag" target="_blank" rel="noopener nofollow">#Cody-Dunne</a> <a href="https://www.jayitha.github.io/Notes?query=tag:HV-Jagadish" class="tag" target="_blank" rel="noopener nofollow">#HV-Jagadish</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mirek-Riedewald" class="tag" target="_blank" rel="noopener nofollow">#Mirek-Riedewald</a><br>Abstract
Query Visualization (QV) is the problem of transforming a given query into a graphical representation that helps humans understand its meaning. This task is notably different from designing a Visual Query Language (VQL) that helps a user compose a query. This article discusses the principles of relational query visualization and its potential for simplifying user interactions with relational data.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gatterbauer2022principles.html</link><guid isPermaLink="false">Literature Notes/gatterbauer2022principles.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Principles of transaction-oriented database recovery]]></title><description><![CDATA[ 
 <br><br>Theo Haerder, Andreas Reuter (1983)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Theo-Haerder" class="tag" target="_blank" rel="noopener nofollow">#Theo-Haerder</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andreas-Reuter" class="tag" target="_blank" rel="noopener nofollow">#Andreas-Reuter</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/haerder1983principles.html</link><guid isPermaLink="false">Literature Notes/haerder1983principles.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Priority-driven scheduling of periodic task systems on multiprocessors]]></title><description><![CDATA[ 
 <br><br>Joël Goossens, Shelby Funk, Sanjoy Baruah (2003)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joël-Goossens" class="tag" target="_blank" rel="noopener nofollow">#Joël-Goossens</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shelby-Funk" class="tag" target="_blank" rel="noopener nofollow">#Shelby-Funk</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanjoy-Baruah" class="tag" target="_blank" rel="noopener nofollow">#Sanjoy-Baruah</a><br>Abstract
The scheduling of systems of periodic tasks upon multiprocessor platforms is considered. Utilization-based conditions are derived for determining whether a periodic task system meets all deadlines when scheduled using the earliest deadline first scheduling algorithm (EDF) upon a given multiprocessor platform. A new priority-driven algorithm is proposed for scheduling periodic task systems upon multiprocessor platforms: this algorithm is shown to successfully schedule some task systems for which EDF may fail to meet all deadlines.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/goossens2003priority.html</link><guid isPermaLink="false">Literature Notes/goossens2003priority.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Proactive recovery in a {byzantine-Fault-Tolerant} system]]></title><description><![CDATA[ 
 <br><br>Miguel Castro, Barbara Liskov (2000)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Miguel-Castro" class="tag" target="_blank" rel="noopener nofollow">#Miguel-Castro</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Barbara-Liskov" class="tag" target="_blank" rel="noopener nofollow">#Barbara-Liskov</a><br>Abstract
This paper describes an asynchronous state-machine replication system that tolerates Byzantine faults, which can be caused by malicious attacks or software errors. Our system is the first to recover Byzantine-faulty replicas proactively and it performs well because it uses symmetric rather than public-key cryptography for authentication. The recovery mechanism allows us to tolerate any number of faults over the lifetime of the system provided fewer than 1/3 of the replicas become faulty within a window of vulnerability that is small under normal conditions. The window may increase under a denial-of-service attack but we can detect and respond to such attacks. The paper presents results of experiments showing that overall performance is good and that even a small window of vulnerability has little impact on service latency.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/castro2000proactive.html</link><guid isPermaLink="false">Literature Notes/castro2000proactive.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Programming in lua]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><br>Roberto Ierusalimschy (2006)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:paused" class="tag" target="_blank" rel="noopener nofollow">#paused</a><br>Abstract<br><br>
<br>Tables are the only data structures in Lua. Even a function from a library like math.sin actually translates to "index table named math using string sin as key"
<br>Tables are not values or variables, they are objects. Variables reference tables, when a table has no references the garbage collector deletes the table
<br>&gt; a = {}
&gt; a["x"] = 10
&gt; b = a -- 'b' refers to the same table as 'a'
&gt; b["x"] --&gt; 10
&gt; b["x"] = 20
&gt; a["x"] --&gt; 20
&gt; a = nil
&gt; b = nil -- table dropped
<br>
<br>Structures are represented using field names as indices
<br>&gt; a = {}
&gt; a.x = 10 -- same as a["x"] = 10
&gt; a.x --&gt; 10
<br>
<br>When used as a key, any float value that can be converted to an integer is converted
<br>&gt; a = {}
&gt; a[2.0] = 10
&gt; a[2] --&gt; 10
<br>
<br>Creating a table with a proper constructor is more efficient because the table is created with the right size
<br>There is a general form constructor format where indices are written as expressions between square brackets
<br>opnames = {
["+"]  = "add",
["-"]  = "sub",
["*"]  = "mul",
["/"]  = "div",
}
<br>
<br>A sequence is a table where the positive numeric keys comprise a set  for some  i.e. none of the indices store nil values (a key with nil is technically not in the table)
<br>A table with no numeric keys is a sequence with length zero
<br>The length operator (#) behaves well for sequences but not tables with holes
<br>You can traverse all key-value pairs using the pairs iterator however the order is undefined
<br>-- for tables
t = {10, print, x = 12, k = "hi"}
for k, v in pairs(t) do
	print(k, v)
end
--[[
1 10
k hi
2 function: xxxx
x 12
--]]

-- for lists use ipairs, here order is preserved
t = {10, print, 12, "hi"}
for k, v in ipairs(t) do
	print(k, v)
end
--[[
1 10
2 function: xxxx
3 12
4 hi
--]]

-- for sequences
for k = 1,#t do
	print(k, t[k])
end
<br>
<br>Suppose you want to know if a given function exists in a given library (lib.foo) you can use lib and lib.foo. In C#, you can instead use the safe navigation operator (?). For a?.b if a is nil so is a?.b. You can emulate this behavior in Lua by generating an empty table if a is nil -- (a or {}).b
<br>zip = company and company.director and company.director.address and company.director.address.zipcode

-- In C#, you can instead use ? but not in Lua
zip = company?.director?.address?.zipcode

-- In Lua, you can emulate it
zip = (((company or {}).director or {}).address or {}).zipcode
<br>
<br>Table operations are not efficient since they involve moving i.e. copying elements to fill gaps
<br>table.insert(t, &lt;index&gt;, value) -- inserts value at index moving elements down, defaults to end

table.remove(t, &lt;index&gt;) -- removes element from position moving all elements up, defaults to end

table.move(t, start, end, position, &lt;table2&gt;) -- moves elements in table from index start until end (inclusive) to position

table.move(a, 1, #a, 1, {}) -- copies table a into provided table and returns table

table.move(a, 1, #a, #b + 1, b) -- appends all elements from list a to end of list b
<br><a data-tooltip-position="top" aria-label="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_5.lua" rel="noopener nofollow" class="external-link" href="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_5.lua" target="_blank">Exercises</a><br>
<br>Why does table.concat perform better? How is this function implemented?
<br><br>
<br>Parentheses are optional if function has only one argument that is either a string literal or a table constructor
<br>print "Hello World"
f{x=10, y=20}
type{}
<br>
<br>A Lua program can use functions in both Lua and C (or any other host language). Typically, C is used for better performance and to access facilities not easily accessible directly from Lua, like OS facilities
<br>All function arguments are optional, nils are tail-padded
<br>function incCount (n)
	n = n or 1 -- If n is nil, set n to 1, default
	globalCounter = globalCounter + n
end
<br>
<br>Lua functions can return multiple values which can be destructed using multiple assignments, arguments to function calls, table constructors or return statements. 
<br>function foo()
	return a, b, c
end

x, y = foo() -- x = a, y = b
x, y, z, w = foo() -- x, y, z, w = nil
x, y = foo(), 20 -- x = a, y = 20

-- when function is last or only call to another function, all results are passed

print(x, foo()) --&gt; x a b c
print(foo(), x) --&gt; a x

-- table constructor collects all results

t = {foo()} --&gt; {a, b, c}

-- return also returns all results

return foo() --&gt; a, b, c

-- you can force use of one single argument by using parentheses

print((foo())) --&gt; a
<br>
<br>Lua functions can be variadic i.e. take a variable number of arguments like print in C using the varag expression (...)
<br>--- three dots '...' (called varag expression) indicate the function is variadic

function add (...)
	local s = 0
	for _, v in ipairs{...} do
		s = s + v
	end
	return s
end

print(add(3, 4, 10, 25, 12)) --&gt; 54

--[[
local a, b = ... (truncates to first two arguments or uses nil)

function foo (a, b, c) == function foo (...) local a,b,c = ...
--]]

function fwrite(fmt, ...)
	return io.write(string.format(fmt, ...))
end
<br>
<br>You can use {...} to collect all the extra arguments, however, there's no way to know if explicit trailing {lua} nil were provided as some arguments -&gt; use table.pack which also has an extra field "n" with the total number of arguments
<br>function nonils(...)
	local arg = table.pack(...)
	for i = 1, arg.n do
		if arg[i] == nil then return false end
	end
	return true
end

print(nonils(2, 3, nil)) --&gt; false
print(nonils()) --&gt; true
<br>
<br>Another method to traverse extra arguments is to use the select function
<br>select(n, ...) --&gt; returns all arguments after the nth one
select("#", ...) --&gt; returns total number of extra arguments

select(1, "a", "b", "c") --&gt; a b c
select(3, "a", "b", "c") --&gt; c
select("#", "a", "b", "c") --&gt; 3

-- select typically used when number of results truncated to one
-- this version of add is faster when few arguments since it avoids creation of new table however cost of multiple selects adds up as the number increases 
-- this version has quadratic cost
function add (...)
	local s = 0
	for i = 1, select("#", ...) do
		s = s + select(i, ...) -- truncates to first argument
	end
	return s
end
<br>
<br>table.unpack takes a list and returns all elements as results. Important in generic call mechanism which allows us to call any function with any arguments dynamically. Function usually works on sequences since it uses length operator however you can provide explicit limits
<br>table.unpack{10, 20, 30} --&gt; 10 20 30

print(table.unpack({"Sun", "Mon", "Tue", "Wed"}, 2, 3)) --&gt; Mon    Tue
<br>
<br>Lua functions do tail-call elimination. A tail call is a goto dressed as a call. It happens when a function calls another as its last action and has nothing else to do after
<br>function f (x) x = x + 1; 
	return g(x)           -- tail call, without return it isn't a tail call since f has to discard g results
end 

--[[
The program does not need to keep any information about f on the stack once g is called. Lua eliminates f information from the stack and therefore tail calls use no stack space
]]

-- In Lua, you can use an infinite number of nested tail calls and the stack will never overflow

function foo (n)
	 if n &gt; 0 then return foo(n - 1) end
end
<br><a data-tooltip-position="top" aria-label="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_6.lua" rel="noopener nofollow" class="external-link" href="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_6.lua" target="_blank">Exercises</a><br>
<br>
<a data-tooltip-position="top" aria-label="https://lua-l.lua.narkive.com/IQTSNTjf/passing-parameters-by-reference#:~:text=Passing%20Parameters%20by%20Reference&amp;text=Lua%20forces%20copy%20semantics%20for,table%2C%20userdata" rel="noopener nofollow" class="external-link" href="https://lua-l.lua.narkive.com/IQTSNTjf/passing-parameters-by-reference#:~:text=Passing%20Parameters%20by%20Reference&amp;text=Lua%20forces%20copy%20semantics%20for,table%2C%20userdata" target="_blank">Passing Parameters by Reference. Lua forces copy semantics for simple value types (nil, boolean, number, string, light userdata) and&nbsp;reference semantics for complex types (function, table, userdata).</a>.)

<br>
Exercise 6.6

<br><br>
<br>Lua doesn't offer much to communicate with the external world. Like ISO C, it only offers basic file manipulation plus some extras. Most I/O is done either by the host application or through external libraries
<br>The I/O library uses two models for file manipulations<br>
<br>Simple Model<br>
- Assumes the existence of a current input and a current output streams set using the io.input and io.output functions resp and initialized to stdin and stdout resp<br>
- io.write takes an arbitrary number of strings or numbers and writes them to the output stream (avoid explicit concatenation and avoid using print unless for dirty debugging)<br>
- io.read reads strings controlled by the arguments passed to it<br>
- Can only read from (write to) a single file at a point
<br>-- to control the conversion of numbers to string, use string.format
io.write("sin(3) = ", math.sin(3), "\n") --&gt; sin(3) = 0.14112000805987
io.write(string.format("sin(3) = %.4f\n", math.sin(3))) --&gt; sin(3) = 0.1411

--[[
-- io.read reads strings based on the arguments passed to it

a - read whole file, return empty string if file is empty
l - default; read next line dropping newline, return nil if file is empty
L - read next line keeping newline, same as above
n - reads a number skipping whitespaces; if not number, return nil
num - reads st most num chars as string if eof, returns nil

io.read(0) returns nil if eof, else empty string ""
--]]

-- Lua handles strings well, filters can be written like
t = io.read("a") -- read whole file
t = string.gsub(t, "bad", "good") -- do job
io.write(t) -- write the file

-- copy input to output with line numbers
local count = 0
for line in io.lines() do 
	count = count + 1
	io.write(string.format("%6d ", count), line, "\n")
end

-- Sort a file
local lines = {}
-- read lines to table lines
for line in io.lines() do
	lines[#lines + 1] = line
end
-- sort
table.sort(lines)
-- write
for _,l in ipairs(lines) do
	io.write(l, "\n")
end

-- Efficient: Copy input to output in blocks
while true do
	local block = io.read(2^13)           -- block size = 8K
	if not block then break end
	io.write(block)
end

-- You can call read with multiple args
while true do
	local n1, n2, n3 = io.read("n", "n", "n")
	if not n1 then break end
	print(math.max(n1, n2, n3))
end
<br>
<br>Complete I/O Model 

<br>io.open(&lt;name&gt;, &lt;mode&gt;) opens file name (as a stream) in one of three modes (r - read, w - truncate and write, a - append, b - optional; binary)
<br>You can use methods  (on the stream objects) read and write to read from and write to the opened stream


<br>print(io.open("non-existent-file", "r")) --&gt; nil non-existent-file: No such file or directory 2
print(io.open("/etc/passwd", "w")) --&gt; nil /etc/passwd: Permission denied 13

-- idiomatic way
local f = assert(io.open(filename, mode)) -- error message goes to second arg of assert

-- Read whole file
local f = assert(io.open(filename, "r"))
local t = f:read("a")
f:close()

-- Accessing predefined C streams - io.stdin, io.stdout and io.stderr
io.stderr:write(message)

-- Mix both models by setting streams
local temp = io.input() -- save current input stream (which is returned when no args are passed)
io.input("newinput") -- open new current stream
-- do something with stream
io.input():close() -- close current stream
io.input(temp) -- restore original input stream

-- io.read(args) === io.input():read(args)
-- io.write(args) === io.output():write(args)

-- io.lines provides an iterator that reads from a stream
-- You can provide a file name to io.lines which will open a stream over the file in read mode and will close it after reachine eof
-- iterate over blocks
for block in io.input():lines(2^13) so -- lines accepts same args as read
	io.write(block)
end
<br>
<br>Other operations on files include

<br>io.tmpfile - returns stream over temporary file that gets deleted when program ends
<br>flush - executes all pending write to file
<br>setvbuf - sets buffering mode; accepts two arguments - 1. ("no" - no buffering, "full" - write when buffer is full and "line" - write when newline is output) 2. Size of buffer

<br>io.stderr is not buffered and io.stdout is line buffered


<br>f:seek(whence, offset) - seek can both get and set the current position of a stream; 

<br>whence: 

<br>"set" - offsets related to beginning of file, 
<br>"cur" - default; offsets relative to current position and 
<br>"end" - offsets relative to end of file)


<br>offset

<br>0 - default


<br>Returns current position of stream measured in bytes from the beginning of the file. 


<br>os.rename - changes name of file
<br>os.remove - deletes a file
<br>All functions return nil + error message in case of errors


<br>-- file:seek(whence, offset)
file:seek() --&gt; current stream position
file:seek("set") --&gt; resets position to beginning and returns 0
file:seek("end") --&gt; sets position to eof and returns its size

function fsize (file)
	local current = file:seek()   -- save current position
	local size = file:seek("end") -- get file size
	file:seek("set", current)     -- restore position
	return size
end
<br>Other system calls:<br>
<br>os.exit(status) - terminates execution of program

<br>status - (0/true - successful execution)


<br>os.getenv(var) - gets value of an environment variable; returns nil for undefined variables
<br>os.execute - runs a system command and returns command status; returns three results

<br>Boolean 

<br>true - program exited with no errors


<br>String 

<br>"exit" - terminated normally
<br>"signal" - interrupted by a signal


<br>return status if terminated normally or the number of the signal that terminated the program


<br>os.popen - also runs system command but also connects the command output (or input) to a new local stream and returns that stream
<br>For more extended capabilities, use libraries LuaFileSystem and luaposix<br>--- os.getenv
print(os.getenv("HOME")) --&gt; /home/lua

-- Create new directories
function createDir (dirname)
	os.execute("mkdir " .. disname)
end

-- Build table with entries in current directories
local f = io.popen("ls .", "r") -- "r" means to read; default
local dir = {}
for entry in f:lines() so
	dir[#dir + 1] = entry
end

-- Send email
local subject = "some news"
local address = "someone@somewhere.org"
local cmd = string.format("mail -s '%s' '%s'", subject, address)
local f = io.popen(cmd, "w") -- in write mode
f:write([[
Nothing important to say.
-- me
]])
f:close()
<br><a data-tooltip-position="top" aria-label="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_7.lua" rel="noopener nofollow" class="external-link" href="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_7.lua" target="_blank">Exercises</a><br>
<br>7.3 I'm not sure about the exact answer to the second part. This <a data-tooltip-position="top" aria-label="https://luajit.org/ext_buffer.html#:~:text=The%20maximum%20size%20of%20a,memory%20limit%20of%20your%20OS." rel="noopener nofollow" class="external-link" href="https://luajit.org/ext_buffer.html#:~:text=The%20maximum%20size%20of%20a,memory%20limit%20of%20your%20OS." target="_blank">Link</a> says the maximum size of the Lua string is just under 2GB 
<br><br>Local variables and blocks:<br>
<br>By default, variables are global in Lua.
<br>Local variables are scope-limited to the declaration block
<br>in interactive mode each line is a chunk, so if you were to use local a = 1, a goes out of scope immediately after
<br>To define blocks as in other languages using {}, you can use do ... end blocks in Lua
<br>It is good programming practice to use Local variables to avoid cluttering the global environment
<br>Book encourages declarations in the middle of blocks so we don't forget to initialize them
<br>-- blocks
do
	-- something
end

-- common idiom
local foo = foo -- done to preserve global foo
<br>Control Structures<br>
<br>if then else:

<br>Lua has no switch statement


<br>while
<br>repeat-until

<br>An interesting aspect of Lua's repeat clause is that local variables declared in the repeat block are accessible in the until condition


<br>Numerical for

<br>for var = expr1, expr2, expr3 where expr3 is the step size. 
<br>All three expressions are computed only once at the beginning of the loop
<br>expr3 is optional; default 1
<br>The control variable is local to the loop and should not be reassigned inside the loop; it'll lead to unexpected behavior


<br>Generic for

<br>Traverses all values returned by an iterator function
<br>Covered in detail in <a data-tooltip-position="top" aria-label="ierusalimschy2006programming > 18 Iterators and the Generic For" data-href="ierusalimschy2006programming#18 Iterators and the Generic For" href="https://www.jayitha.github.io/Notes/ierusalimschy2006programming#18 Iterators and the Generic For" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">18 Iterators and the Generic For</a><a data-tooltip-position="top" aria-label="ierusalimschy2006programming > 18 Iterators and the Generic For" data-href="ierusalimschy2006programming#18 Iterators and the Generic For" href="https://www.jayitha.github.io/Notes/literature-notes/ierusalimschy2006programming.html#18_Iterators_and_the_Generic_For" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">18 Iterators and the Generic For</a>


<br>break
<br>return

<br>Implicit return at end of every function
<br>return can only appear as the last statement of a block
<br>If you want to use return in the middle of a block, use a do ... end block


<br>goto

<br>Labels have a (intentionally) convoluted syntax ::label::
<br>Labels follow the usual visibility rules; cannot jump into a block because a label inside a block is not visible outside it
<br>Cannot jump out of a function (why?)
<br>Cannot jump into the scope of a local variable (labels are void statements). Scope of a local variable ends on the last non-void statement of the block where the label is defined
<br>Usually used to simulate programming constructs from other languages like redo and continue
<br>Good at directly translating state machines


<br>-- if then else
if op == '+' then
	r = a + b
elseif op == '-' then
	r = a - b
else -- optional
	error("invalid operation")

-- while
local i = 1
while a[i] do
	print(a[i])
	i = i + 1
end

-- repeat-until
-- computes square root of 'x' using Newton-Raphson method
local sqr = x / 2
repeat
	sqr = (sqr + x/sqr) / 2
	local error = math.abs(sqr^2 - x)
until error &lt; x / 10000                -- local 'error' 

-- Numerical for
-- syntax
for var = expr2, expr2, expr3 do
	-- something
end

-- when you want a loop without an upper limit, use math.huge
for i = 1, math.huge do                 -- what's the value of math.huge?
	-- something
end

--- goto
-- simulate redo and continue
while some_condition do
	::redo::
	if some_other_condition then goto continue
	else if yet_another_condition then goto redo
	end
	-- some code
	::continue::
end

-- labels are void statements
while some_condition do
	if some_other_condition then goto continue end
	local var = something
	::continue::                  -- scope of 'var' ends before continue
end

-- state machine to check if input has even number of zeros
::s1:: do                 -- does this not automatically start executing?
	local c = io.read(1)
	if c == '0' then goto s2
	elseif c == nil then print "ok"; return
	else goto s1
	end
end

::s2:: do
	local c = io.read(1)
	if c == '0' then goto s1
	elseif c == nil then print "not ok"; return
	else goto s2
	end
end

goto s1            -- not needed to start the program
<br><a data-tooltip-position="top" aria-label="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_8.lua" rel="noopener nofollow" class="external-link" href="https://github.com/Jayitha/Notes/blob/main/Misc/Lua/chapter_8.lua" target="_blank">Exercises</a><br>
<br>what's the value of math.huge ?
<br>The <a data-tooltip-position="top" aria-label="http://lua-users.org/wiki/MathLibraryTutorial" rel="noopener nofollow" class="external-link" href="http://lua-users.org/wiki/MathLibraryTutorial" target="_blank">Link</a> says math.huge is a constant and represents infinity
<br><br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a><br><br><br><a data-tooltip-position="top" aria-label="Literature Notes/ierusalimschy2006programming.md" data-href="Literature Notes/ierusalimschy2006programming.md" href="https://www.jayitha.github.io/Notes/Literature Notes/ierusalimschy2006programming" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ierusalimschy2006programming</a><a data-tooltip-position="top" aria-label="Literature Notes/ierusalimschy2006programming.md" data-href="Literature Notes/ierusalimschy2006programming.md" href="https://www.jayitha.github.io/Notes/literature-notes/ierusalimschy2006programming.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ierusalimschy2006programming</a>: Programming in lua]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ierusalimschy2006programming.html</link><guid isPermaLink="false">Literature Notes/ierusalimschy2006programming.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[QueryViz: Helping users understand SQL queries and their patterns]]></title><description><![CDATA[ 
 <br><br>Jonathan Danaparamita, Wolfgang Gatterbauer (2011)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jonathan-Danaparamita" class="tag" target="_blank" rel="noopener nofollow">#Jonathan-Danaparamita</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wolfgang-Gatterbauer" class="tag" target="_blank" rel="noopener nofollow">#Wolfgang-Gatterbauer</a><br>Abstract
We present QueryViz, a novel visualization tool for SQL queries that reduces the time needed to read and understand existing queries. It targets two principal audiences: (i) users who often issue the same or similar queries and who need to quickly browse through a repository of existing queries; and (ii) novices that try to familiarize themselves with the logic behind alternative patterns of SQL queries. QueryViz uses as input only two strings: the database schema and the SQL query. It can thus serve as light-weight add-on to existing database systems and is also available via an online interface at <a rel="noopener nofollow" class="external-link" href="http://queryviz.com." target="_blank">http://queryviz.com.</a> In this demonstration, we explain our visual alphabet, walk through the visualization algorithm, and let users experience the difference in understanding SQL queries from text or our graphical representation while browsing through repositories of well-known textbook SQL queries.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/danaparamita2011queryviz.html</link><guid isPermaLink="false">Literature Notes/danaparamita2011queryviz.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[R* optimizer validation and performance evaluation for local queries]]></title><description><![CDATA[ 
 <br><br>Lothar F Mackert, Guy M Lohman (1986)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Lothar" class="tag" target="_blank" rel="noopener nofollow">#Lothar</a> <a href="https://www.jayitha.github.io/Notes?query=tag:F-Mackert" class="tag" target="_blank" rel="noopener nofollow">#F-Mackert</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Guy" class="tag" target="_blank" rel="noopener nofollow">#Guy</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Lohman" class="tag" target="_blank" rel="noopener nofollow">#M-Lohman</a><br>Abstract
Few database query optimizer models have been validated against actual performance. This paper presents the methodology and results of a thorough validation of the optimizer and evaluation of the performance of the experimental distributed relational database management system R, which inherited and extended to a distributed environment the optimization algorithms of System R. Optimizer estimated costs and actual R resources consumed were written to database tables using new SQL commands, permitting automated control from SQL application programs of test data collection and reduction. A number of tests were run over a wide variety of dynamically-created test databases, SQL queries, and system parameters. The results for single-table access, sorting, and local 2-table joins are reported here. The tests confirmed the accuracy of the majority of the I/O cost model, the significant contribution of CPU cost to total cost, and the need to model CPU cost in more detail than was done in System R. The R* optimizer now retains cost components separately and estimates the number of CPU instructions, including those for applying different kinds of predicates. The sensitivity of I/O cost to buffer space motivated the development of more detailed models of buffer utilization unclustered index scans and nested-loop joins often benefit from pages remaining in the buffers, whereas concurrent scans of the data pages and the index pages for multiple tables during joins compete for buffer share. Without an index on the join column of the inner table, the optimizer correctly avoids the nested-loop join, confirming the need for merge-scan joins. When the join column of the inner is indexed, the optimizer overestimates the cost of the nested-loop join, whose actual performance is very sensitive to three parameters that are extremely difficult to estimate (1) the join (result) cardinality, (2) the outer table's cardinality, and (3) the number of buffer pages available to store the inner table. Suggestions are given for improved database statistics, prefetch and page replacement strategies for the buffer manager, and the use of temporary indexes and Bloom filters (hashed semijoins) to reduce access of unneeded data.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mackert1986r.html</link><guid isPermaLink="false">Literature Notes/mackert1986r.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[I've seen" Enough" incrementally improving visualizations to support rapid decision making]]></title><description><![CDATA[ 
 <br><br>Sajjadur Rahman, Maryam Aliakbarpour, Ha Kyung Kong, Eric Blais, Karrie Karahalios, Aditya Parameswaran, Ronitt Rubinfield (2017)<br>Tags: <br>Abstract
Data visualization is an effective mechanism for identifying trends, insights, and anomalies in data. On large datasets, however, generating visualizations can take a long time, delaying the extraction of insights, hampering decision making, and reducing exploration time. One solution is to use online sampling-based schemes to generate visualizations faster while improving the displayed estimates incrementally, eventually converging to the exact visualization computed on the entire data. However, the intermediate visualizations are approximate, and often fluctuate drastically, leading to potentially incorrect decisions. We propose sampling-based incremental visualization algorithms that reveal the "salient" features of the visualization quickly—with a 46× speedup relative to baselines—while minimizing error, thus enabling rapid and error-free decision making. We demonstrate that these algorithms are optimal in terms of sample complexity, in that given the level of interactivity, they generate approximations that take as few samples as possible. We have developed the algorithms in the context of an incremental visualization tool, titled IncVisage, for trendline and heatmap visualizations. We evaluate the usability of IncVisage via user studies and demonstrate that users are able to make effective decisions with incrementally improving visualizations, especially compared to vanilla online-sampling based schemes.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rahman2017ve.html</link><guid isPermaLink="false">Literature Notes/rahman2017ve.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Holoclean: Holistic data repairs with probabilistic inference]]></title><description><![CDATA[ 
 <br><br>Theodoros Rekatsinas, Xu Chu, Ihab F Ilyas, Christopher Ré (2017)<br>Tags: <br>Abstract
We introduce HoloClean, a framework for holistic data repairing driven by probabilistic inference. HoloClean unifies existing qualitative data repairing approaches, which rely on integrity constraints or external data sources, with quantitative data repairing methods, which leverage statistical properties of the input data. Given an inconsistent dataset as input, HoloClean automatically generates a probabilistic program that performs data repairing. Inspired by recent theoretical advances in probabilistic inference, we introduce a series of optimizations which ensure that inference over HoloClean's probabilistic model scales to instances with millions of tuples. We show that HoloClean scales to instances with millions of tuples and find data repairs with an average precision of ~90% and an average recall of above ~76% across a diverse array of datasets exhibiting different types of errors. This yields an average F1 improvement of more than 2x against state-of-the-art methods.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rekatsinas2017holoclean.html</link><guid isPermaLink="false">Literature Notes/rekatsinas2017holoclean.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Repeating history beyond ARIES]]></title><description><![CDATA[ 
 <br><br>C Mohan (1999)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Mohan" class="tag" target="_blank" rel="noopener nofollow">#C-Mohan</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mohan1999repeating.html</link><guid isPermaLink="false">Literature Notes/mohan1999repeating.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Pond: The {OceanStore} prototype]]></title><description><![CDATA[ 
 <br><br>Sean Rhea, Patrick Eaton, Dennis Geels, Hakim Weatherspoon, Ben Zhao, John Kubiatowicz (2003)<br>Tags: <br>Abstract
OceanStore is an Internet-scale, persistent data store designed for incremental scalability, secure sharing, and long-term durability. Pond is the OceanStore prototype; it contains many of the features of a complete system including location-independent routing, Byzantine update commitment, push-based update of cached copies through an overlay multicast network, and continuous archiving to erasure-coded form. In the wide area, Pond outperforms NFS by up to a factor of 4.6 on read-intensive phases of the Andrew benchmark, but underperforms NFS by as much as a factor of 7.3 on write-intensive phases. Microbenchmarks show that write performance is limited by the speed of erasure coding and threshold signature generation, two important areas of future research. Further microbenchmarks show that Pond manages replica consistency in a bandwidth-efficient manner and quantify the latency cost imposed by this bandwidth savings.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rhea2003pond.html</link><guid isPermaLink="false">Literature Notes/rhea2003pond.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Pastry: Scalable, decentralized object location, and routing for large-scale peer-to-peer systems]]></title><description><![CDATA[ 
 <br><br>Antony Rowstron, Peter Druschel (2001)<br>Tags: <br>Abstract
This paper presents the design and evaluation of Pastry, a scalable, distributed object location and routing substrate for wide-area peer-to-peer applications. Pastry performs application-level routing and object location in a potentially very large overlay network of nodes connected via the Internet. It can be used to support a variety of peer-to-peer applications, including global data storage, data sharing, group communication and naming. Each node in the Pastry network has a unique identifier (nodeId). When presented with a message and a key, a Pastry node efficiently routes the message to the node with a nodeId that is numerically closest to the key, among all currently live Pastry nodes. Each Pastry node keeps track of its immediate neighbors in the nodeId space, and notifies applications of new node arrivals, node failures and recoveries. Pastry takes into account network locality; it seeks to minimize the distance messages travel, according to a to scalar proximity metric like the number of IP routing hops Pastry is completely decentralized, scalable, and self-organizing; it automatically adapts to the arrival, departure and failure of nodes. Experimental results obtained with a prototype implementation on an emulated network of up to 100,000 nodes confirm Pastry's scalability and efficiency, its ability to self-organize and adapt to node failures, and its good network locality properties
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rowstron2001pastry.html</link><guid isPermaLink="false">Literature Notes/rowstron2001pastry.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Rust Atomics and Locks: Low-Level Concurrency in Practice]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bos2022rust.html</link><guid isPermaLink="false">Literature Notes/bos2022rust.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Rust for Rustaceans: Idiomatic Rrogramming for Experienced Developers]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br>
<br><a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a> Look up how Rust uses nonvolatile RAM during processing
<br><br>A value is the combination of a type and an element of that type’s domain<br>A value is stored in a place, the place can be on the stack or heap or any other location. The most common place to store a value is a variable which is a named slot on the stack<br>A pointer is a value that holds the address of a region in memory, it points to a place.<br>There are two variable mental models one can use to reason about what a piece of code is doing:<br>
<br>High-Level Model - Variables aren’t places that store bytes, instead they’re names given to values as they are instantiated and moved. Your program consists of flows. Two parallel flows can coexist only if they do not conflict.
<br>Low-Level Model - Variables are value slots that may or may not contain legal values. 
<br>The three most important memory regions are<br>
<br>The Stack - Used as scratch space for function calls. Each function call is assigned a contiguous chunk of memory called a frame. 
<br>The Heap - 
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gjengset2021rust.html</link><guid isPermaLink="false">Literature Notes/gjengset2021rust.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Rust temporary lifetimes and "Super Let"]]></title><description><![CDATA[ 
 <br><br>Mara Bos (2023)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:read" class="tag" target="_blank" rel="noopener nofollow">#read</a><br>Abstract
The lifetime of temporaries in Rust is a complicated but often ignored topic. In simple cases, Rust keeps temporaries around for exactly long enough, such that we don't have to think about them. However, there are plenty of cases were we might not get exactly what we want, right away. In this post, we (re)discover the rules for the lifetime of temporaries, go over a few use cases for temporary lifetime extension, and explore a new language idea, super let, to give us more control.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bos2023rust.html</link><guid isPermaLink="false">Literature Notes/bos2023rust.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Scalability in the XFS file system.]]></title><description><![CDATA[ 
 <br><br>Adam Sweeney, Doug Doucette, Wei Hu, Curtis Anderson, Mike Nishimoto, Geoff Peck (1996)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Adam-Sweeney" class="tag" target="_blank" rel="noopener nofollow">#Adam-Sweeney</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Doug-Doucette" class="tag" target="_blank" rel="noopener nofollow">#Doug-Doucette</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wei-Hu" class="tag" target="_blank" rel="noopener nofollow">#Wei-Hu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Curtis-Anderson" class="tag" target="_blank" rel="noopener nofollow">#Curtis-Anderson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mike-Nishimoto" class="tag" target="_blank" rel="noopener nofollow">#Mike-Nishimoto</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Geoff-Peck" class="tag" target="_blank" rel="noopener nofollow">#Geoff-Peck</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/sweeney1996scalability.html</link><guid isPermaLink="false">Literature Notes/sweeney1996scalability.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Scalable atomic visibility with RAMP transactions]]></title><description><![CDATA[ 
 <br><br>Peter Bailis, Alan Fekete, Ali Ghodsi, Joseph M Hellerstein, Ion Stoica (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Bailis" class="tag" target="_blank" rel="noopener nofollow">#Peter-Bailis</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alan-Fekete" class="tag" target="_blank" rel="noopener nofollow">#Alan-Fekete</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ali-Ghodsi" class="tag" target="_blank" rel="noopener nofollow">#Ali-Ghodsi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joseph" class="tag" target="_blank" rel="noopener nofollow">#Joseph</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Hellerstein" class="tag" target="_blank" rel="noopener nofollow">#M-Hellerstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ion-Stoica" class="tag" target="_blank" rel="noopener nofollow">#Ion-Stoica</a><br>Abstract
Databases can provide scalability by partitioning data across several servers. However, multipartition, multioperation transactional access is often expensive, employing coordination-intensive locking, validation, or scheduling mechanisms. Accordingly, many real-world systems avoid mechanisms that provide useful semantics for multipartition operations. This leads to incorrect behavior for a large class of applications including secondary indexing, foreign key enforcement, and materialized view maintenance. In this work, we identify a new isolation model—Read Atomic (RA) isolation—that matches the requirements of these use cases by ensuring atomic visibility: either all or none of each transaction's updates are observed by other transactions. We present algorithms for Read Atomic Multipartition (RAMP) transactions that enforce atomic visibility while offering excellent scalability, guaranteed commit despite partial failures (via coordination-free execution), and minimized communication between servers (via partition independence). These RAMP transactions correctly mediate atomic visibility of updates and provide readers with snapshot access to database state by using limited multiversioning and by allowing clients to independently resolve nonatomic reads. We demonstrate that, in contrast with existing algorithms, RAMP transactions incur limited overhead—even under high contention—and scale linearly to 100 servers.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bailis2016scalable.html</link><guid isPermaLink="false">Literature Notes/bailis2016scalable.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Segment-based recovery: Write-ahead logging revisited]]></title><description><![CDATA[ 
 <br><br>Russell Sears, Eric Brewer (2009)<br>Tags: <br>Abstract
Although existing write-ahead logging algorithms scale to conventional database workloads, their communication and synchronization overheads limit their usefulness for modern applications and distributed systems. We revisit write-ahead logging with an eye toward finer-grained concurrency and an increased range of workloads, then remove two core assumptions: that pages are the unit of recovery and that times-tamps (LSNs) should be stored on each page. Recovering individual application-level objects (rather than pages) simplifies the handing of systems with object sizes that differ from the page size. We show how to remove the need for LSNs on the page, which in turn enables DMA or zero-copy I/O for large objects, increases concurrency, and reduces communication between the application, buffer manager and log manager. Our experiments show that the looser coupling significantly reduces the impact of latency among the components. This makes the approach particularly applicable to large scale distributed systems, and enables a "cross pollination" of ideas from distributed systems and transactional storage. However, these advantages come at a cost; segments are incompatible with physiological redo, preventing a number of important optimizations. We show how allocation enables (or prevents) mixing of ARIES pages (and physiological redo) with segments. We present an allocation policy that avoids undesirable interactions that complicate other combinations of ARIES and LSN-free pages, and then present a proof that both approaches and our combination are correct. Many optimizations presented here were proposed in the past. However, we believe this is the first unified approach.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/sears2009segment.html</link><guid isPermaLink="false">Literature Notes/sears2009segment.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Self-driving database management systems.]]></title><description><![CDATA[ 
 <br><br>Andrew Pavlo, Gustavo Angulo, Joy Arulraj, Haibin Lin, Jiexi Lin, Lin Ma, Prashanth Menon, Todd C Mowry, Matthew Perron, Ian Quah, others (2017)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Pavlo" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Pavlo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gustavo-Angulo" class="tag" target="_blank" rel="noopener nofollow">#Gustavo-Angulo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joy-Arulraj" class="tag" target="_blank" rel="noopener nofollow">#Joy-Arulraj</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Haibin-Lin" class="tag" target="_blank" rel="noopener nofollow">#Haibin-Lin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jiexi-Lin" class="tag" target="_blank" rel="noopener nofollow">#Jiexi-Lin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Lin-Ma" class="tag" target="_blank" rel="noopener nofollow">#Lin-Ma</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Prashanth-Menon" class="tag" target="_blank" rel="noopener nofollow">#Prashanth-Menon</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Todd" class="tag" target="_blank" rel="noopener nofollow">#Todd</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Mowry" class="tag" target="_blank" rel="noopener nofollow">#C-Mowry</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Matthew-Perron" class="tag" target="_blank" rel="noopener nofollow">#Matthew-Perron</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ian-Quah" class="tag" target="_blank" rel="noopener nofollow">#Ian-Quah</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/pavlo2017self.html</link><guid isPermaLink="false">Literature Notes/pavlo2017self.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[SEQUEL: A structured english query language]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chamberlin1974sequel.html</link><guid isPermaLink="false">Literature Notes/chamberlin1974sequel.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Blinkfill: Semi-supervised programming by example for syntactic string transformations]]></title><description><![CDATA[ 
 <br><br>Rishabh Singh (2016)<br>Tags: <br>Abstract
The recent Programming By Example (PBE) techniques such as FlashFill have shown great promise for enabling end-users to perform data transformation tasks using input-output examples. Since examples are inherently an under-specification, there are typically a large number of hypotheses conforming to the examples, and the PBE techniques suffer from scalability issues for finding the intended program amongst the large space. We present a semi-supervised learning technique to significantly reduce this ambiguity by using the logical information present in the input data to guide the synthesis algorithm. We develop a data structure InputDataGraph to succinctly represent a large set of logical patterns that are shared across the input data, and use this graph to efficiently learn substring expressions in a new PBE system BlinkFill. We evaluate BlinkFill on 207 real-world benchmarks and show that BlinkFill is significantly faster (on average 41x) and requires fewer input-output examples (1.27 vs 1.53) to learn the desired transformations in comparison to FlashFill.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/singh2016blinkfill.html</link><guid isPermaLink="false">Literature Notes/singh2016blinkfill.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Spanner: Google's globally distributed database]]></title><description><![CDATA[ 
 <br><br>James C Corbett, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christopher Frost, Jeffrey John Furman, Sanjay Ghemawat, Andrey Gubarev, Christopher Heiser, Peter Hochschild, others (2013)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:James" class="tag" target="_blank" rel="noopener nofollow">#James</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Corbett" class="tag" target="_blank" rel="noopener nofollow">#C-Corbett</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jeffrey-Dean" class="tag" target="_blank" rel="noopener nofollow">#Jeffrey-Dean</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Epstein" class="tag" target="_blank" rel="noopener nofollow">#Michael-Epstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Fikes" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Fikes</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Christopher-Frost" class="tag" target="_blank" rel="noopener nofollow">#Christopher-Frost</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jeffrey" class="tag" target="_blank" rel="noopener nofollow">#Jeffrey</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John-Furman" class="tag" target="_blank" rel="noopener nofollow">#John-Furman</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanjay-Ghemawat" class="tag" target="_blank" rel="noopener nofollow">#Sanjay-Ghemawat</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrey-Gubarev" class="tag" target="_blank" rel="noopener nofollow">#Andrey-Gubarev</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Christopher-Heiser" class="tag" target="_blank" rel="noopener nofollow">#Christopher-Heiser</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Hochschild" class="tag" target="_blank" rel="noopener nofollow">#Peter-Hochschild</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
Spanner is Google's scalable, multiversion, globally distributed, and synchronously replicated database. It is the first system to distribute data at global scale and support externally-consistent distributed transactions. This article describes how Spanner is structured, its feature set, the rationale underlying various design decisions, and a novel time API that exposes clock uncertainty. This API and its implementation are critical to supporting external consistency and a variety of powerful features: nonblocking reads in the past, lock-free snapshot transactions, and atomic schema changes, across all of Spanner.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/corbett2013spanner.html</link><guid isPermaLink="false">Literature Notes/corbett2013spanner.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[SQL in 10 Minutes a Day, Sams Teach Yourself]]></title><description><![CDATA[ 
 <br><br>Ben Forta (2019)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ben-Forta" class="tag" target="_blank" rel="noopener nofollow">#Ben-Forta</a><br>Abstract<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/forta2019sql.html</link><guid isPermaLink="false">Literature Notes/forta2019sql.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Chord: A scalable peer-to-peer lookup protocol for internet applications]]></title><description><![CDATA[ 
 <br><br>Ion Stoica, Robert Morris, David Liben-Nowell, David R Karger, M Frans Kaashoek, Frank Dabek, Hari Balakrishnan (2003)<br>Tags: <br>Abstract
A fundamental problem that confronts peer-to-peer applications is the efficient location of the node that stores a desired data item. This paper presents Chord, a distributed lookup protocol that addresses this problem. Chord provides support for just one operation: given a key, it maps the key onto a node. Data location can be easily implemented on top of Chord by associating a key with each data item, and storing the key/data pair at the node to which the key maps. Chord adapts efficiently as nodes join and leave the system, and can answer queries even if the system is continuously changing. Results from theoretical analysis and simulations show that Chord is scalable: Communication cost and the state maintained by each node scale logarithmically with the number of Chord nodes.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/stoica2003chord.html</link><guid isPermaLink="false">Literature Notes/stoica2003chord.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[MapReduce and parallel DBMSs: Friends or foes?]]></title><description><![CDATA[ 
 <br><br>Michael Stonebraker, Daniel Abadi, David J DeWitt, Sam Madden, Erik Paulson, Andrew Pavlo, Alexander Rasin (2010)<br>Tags: <br>Abstract
MapReduce complements DBMSs since databases are not designed for extract-transform-load tasks, a MapReduce specialty.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/stonebraker2010mapreduce.html</link><guid isPermaLink="false">Literature Notes/stonebraker2010mapreduce.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[C-store: A column-oriented DBMS]]></title><description><![CDATA[ 
 <br><br>Mike Stonebraker, Daniel J Abadi, Adam Batkin, Xuedong Chen, Mitch Cherniack, Miguel Ferreira, Edmond Lau, Amerson Lin, Sam Madden, Elizabeth O'Neil, others (2005)<br>Tags: <br>Abstract
This paper presents the design of a read-optimized relational DBMS that contrasts sharply with most current systems, which are write-optimized. Among the many differences in its design are: storage of data by column rather than by row, careful coding and packing of objects into storage including main memory during query processing, storing an overlapping collection of column-oriented projections, rather than the current fare of tables and indexes, a non-traditional implementation of transactions which includes high availability and snapshot isolation for read-only transactions, and the extensive use of bitmap indexes to complement B-tree structures. We present preliminary performance data on a subset of TPC-H and show that the system we are building, C-Store, is substantially faster than popular commercial products. Hence, the architecture looks very encouraging.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/stonebraker2018c.html</link><guid isPermaLink="false">Literature Notes/stonebraker2018c.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Storage management and caching in PAST]]></title><description><![CDATA[ 
 <br><br>Antony Rowstron, Peter Druschel (2001)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Antony-Rowstron" class="tag" target="_blank" rel="noopener nofollow">#Antony-Rowstron</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Druschel" class="tag" target="_blank" rel="noopener nofollow">#Peter-Druschel</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rowstron2001storage.html</link><guid isPermaLink="false">Literature Notes/rowstron2001storage.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[System R: Relational approach to database management]]></title><description><![CDATA[ 
 <br><br>Morton M. Astrahan, Mike W. Blasgen, Donald D. Chamberlin, Kapali P. Eswaran, Jim N Gray, Patricia P. Griffiths, W Frank King, Raymond A. Lorie, Paul R. McJones, James W. Mehl, others (1976)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a><br>Abstract
System R is a database management system which provides a high level relational data interface. The systems provides a high level of data independence by isolating the end user as much as possible from underlying storage structures. The system permits definition of a variety of relational views on common underlying data. Data control features are provided, including authorization, integrity assertions, triggered transactions, a logging and recovery subsystem, and facilities for maintaining data consistency in a shared-update environment. This paper contains a description of the overall architecture and design of the system. At the present time the system is being implemented and the design evaluated. We emphasize that System R is a vehicle for research in database architecture, and is not planned as a product.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/astrahan1976system.html</link><guid isPermaLink="false">Literature Notes/astrahan1976system.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Meerkat: Multicore-scalable replicated transactions following the zero-coordination principle]]></title><description><![CDATA[ 
 <br><br>Adriana Szekeres, Michael Whittaker, Jialin Li, Naveen Kr Sharma, Arvind Krishnamurthy, Dan RK Ports, Irene Zhang (2020)<br>Tags: <br>Abstract
Traditionally, the high cost of network communication between servers has hidden the impact of cross-core coordination in replicated systems. However, new technologies, like kernel-bypass networking and faster network links, have exposed hidden bottlenecks in distributed systems. This paper explores how to build multicore-scalable, replicated storage systems. We introduce a new guideline for their design, called the Zero-Coordination Principle. We use this principle to design a new multicore-scalable, in-memory, replicated, key-value store, called Meerkat. Unlike existing systems, Meerkat eliminates all cross-core and cross-replica coordination, both of which pose a scalability bottleneck. Our experiments found that Meerkat is able to scale up to 80 hyper-threads and execute 8.3 million transactions per second. Meerkat represents an improvement of 12X on state-of-the-art, fault-tolerant, in-memory, transactional storage systems built using leader-based replication and a shared transaction log.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/szekeres2020meerkat.html</link><guid isPermaLink="false">Literature Notes/szekeres2020meerkat.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Teaching an old elephant new tricks]]></title><description><![CDATA[ 
 <br><br>Nicolas Bruno (2009)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nicolas-Bruno" class="tag" target="_blank" rel="noopener nofollow">#Nicolas-Bruno</a><br>Abstract
In recent years, column stores (or C-stores for short) have emerged as a novel approach to deal with read-mostly data warehousing applications. Experimental evidence suggests that, for certain types of queries, the new features of C-stores result in orders of magnitude improvement over traditional relational engines. At the same time, some C-store proponents argue that C-stores are fundamentally different from traditional engines, and therefore their benefits cannot be incorporated into a relational engine short of a complete rewrite. In this paper we challenge this claim and show that many of the benefits of C-stores can indeed be simulated in traditional engines with no changes whatsoever. We then identify some limitations of our ?pure-simulation? approach for the case of more complex queries. Finally, we predict that traditional relational engines will eventually leverage most of the benefits of C-stores natively, as is currently happening in other domains such as XML data.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bruno2009teaching.html</link><guid isPermaLink="false">Literature Notes/bruno2009teaching.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The adaptive radix tree: ARTful indexing for main-memory databases]]></title><description><![CDATA[ 
 <br><br>Viktor Leis, Alfons Kemper, Thomas Neumann (2013)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Viktor-Leis" class="tag" target="_blank" rel="noopener nofollow">#Viktor-Leis</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alfons-Kemper" class="tag" target="_blank" rel="noopener nofollow">#Alfons-Kemper</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a> <a href="https://www.jayitha.github.io/Notes?query=tag:read" class="tag" target="_blank" rel="noopener nofollow">#read</a><br>Abstract
Main memory capacities have grown up to a point where most databases fit into RAM. For main-memory database systems, index structure performance is a critical bottleneck. Traditional in-memory data structures like balanced binary search trees are not efficient on modern hardware, because they do not optimally utilize on-CPU caches. Hash tables, also often used for main-memory indexes, are fast but only support point queries. To overcome these shortcomings, we present ART, an adaptive radix tree (trie) for efficient indexing in main memory. Its lookup performance surpasses highly tuned, read-only search trees, while supporting very efficient insertions and deletions as well. At the same time, ART is very space efficient and solves the problem of excessive worst-case space consumption, which plagues most radix trees, by adaptively choosing compact and efficient data structures for internal nodes. Even though ART's performance is comparable to hash tables, it maintains the data in sorted order, which enables additional operations like range scan and prefix lookup.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/leis2013adaptive.html</link><guid isPermaLink="false">Literature Notes/leis2013adaptive.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The ANSI/X3/SPARC DBMS framework report of the study group on database management systems]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/tsichritzis1978ansi.html</link><guid isPermaLink="false">Literature Notes/tsichritzis1978ansi.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The architecture of the EXODUS extensible DBMS]]></title><description><![CDATA[ 
 <br><br>Michael J Carey, David J DeWitt, Daniel Frank, Goetz Graefe, Joel E Richardson, Eugene J Shekita, M Muralikrlshna (1991)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael" class="tag" target="_blank" rel="noopener nofollow">#Michael</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Carey" class="tag" target="_blank" rel="noopener nofollow">#J-Carey</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David" class="tag" target="_blank" rel="noopener nofollow">#David</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-DeWitt" class="tag" target="_blank" rel="noopener nofollow">#J-DeWitt</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel-Frank" class="tag" target="_blank" rel="noopener nofollow">#Daniel-Frank</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Goetz-Graefe" class="tag" target="_blank" rel="noopener nofollow">#Goetz-Graefe</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Joel" class="tag" target="_blank" rel="noopener nofollow">#Joel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:E-Richardson" class="tag" target="_blank" rel="noopener nofollow">#E-Richardson</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eugene" class="tag" target="_blank" rel="noopener nofollow">#Eugene</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-Shekita" class="tag" target="_blank" rel="noopener nofollow">#J-Shekita</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Muralikrlshna" class="tag" target="_blank" rel="noopener nofollow">#M-Muralikrlshna</a><br>Abstract
With non-traditional application areas such as engineering design, image/voice data management, scientific/statistical applications, and artificial intelligence systems all clamoring for ways to store and efficiently process larger and larger volumes of data, it is clear that traditional database technology has been pushed to its limits. It also seems clear that no single database system will be capable of simultaneously meeting the functionality and performance requirements of such a diverse set of applications. In this paper we describe the initial design of EXODUS, an extensible database system that will facilitate the fast development of high-performance, application-specific database systems. EXODUS provides certain kernel facilities, including a versatile storage manager and a type manager. In addition, it provides an architectural framework for building application-specific database systems, tools to partially automate the generation of such systems, and libraries of software components (e.g., access methods) that are likely to be useful for many application domains.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/carey1991architecture.html</link><guid isPermaLink="false">Literature Notes/carey1991architecture.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The byzantine generals problem]]></title><description><![CDATA[ 
 <br><br>Leslie Lamport, Robert Shostak, Marshall Pease (1982)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Leslie-Lamport" class="tag" target="_blank" rel="noopener nofollow">#Leslie-Lamport</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Robert-Shostak" class="tag" target="_blank" rel="noopener nofollow">#Robert-Shostak</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Marshall-Pease" class="tag" target="_blank" rel="noopener nofollow">#Marshall-Pease</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lamport1982byzantine.html</link><guid isPermaLink="false">Literature Notes/lamport1982byzantine.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The case for a learned sorting algorithm]]></title><description><![CDATA[ 
 <br><br>Ani Kristo, Kapil Vaidya, Ugur Çetintemel, Sanchit Misra, Tim Kraska (2020)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ani-Kristo" class="tag" target="_blank" rel="noopener nofollow">#Ani-Kristo</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kapil-Vaidya" class="tag" target="_blank" rel="noopener nofollow">#Kapil-Vaidya</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ugur-Çetintemel" class="tag" target="_blank" rel="noopener nofollow">#Ugur-Çetintemel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanchit-Misra" class="tag" target="_blank" rel="noopener nofollow">#Sanchit-Misra</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Kraska" class="tag" target="_blank" rel="noopener nofollow">#Tim-Kraska</a><br>Abstract
Sorting is one of the most fundamental algorithms in Computer Science and a common operation in databases not just for sorting query results but also as part of joins (i.e., sort-merge-join) or indexing. In this work, we introduce a new type of distribution sort that leverages a learned model of the empirical CDF of the data. Our algorithm uses a model to efficiently get an approximation of the scaled empirical CDF for each record key and map it to the corresponding position in the output array. We then apply a deterministic sorting algorithm that works well on nearly-sorted arrays (e.g., Insertion Sort) to establish a totally sorted order. We compared this algorithm against common sorting approaches and measured its performance for up to 1 billion normally-distributed double-precision keys. The results show that our approach yields an average 3.38x performance improvement over C++ STL sort, which is an optimized Quicksort hybrid, 1.49x improvement over sequential Radix Sort, and 5.54x improvement over a C++ implementation of Timsort, which is the default sorting function for Java and Python.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kristo2020case.html</link><guid isPermaLink="false">Literature Notes/kristo2020case.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The case for learned index structures]]></title><description><![CDATA[ 
 <br><br>Tim Kraska, Alex Beutel, Ed H Chi, Jeffrey Dean, Neoklis Polyzotis (2018)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Kraska" class="tag" target="_blank" rel="noopener nofollow">#Tim-Kraska</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alex-Beutel" class="tag" target="_blank" rel="noopener nofollow">#Alex-Beutel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ed" class="tag" target="_blank" rel="noopener nofollow">#Ed</a> <a href="https://www.jayitha.github.io/Notes?query=tag:H-Chi" class="tag" target="_blank" rel="noopener nofollow">#H-Chi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jeffrey-Dean" class="tag" target="_blank" rel="noopener nofollow">#Jeffrey-Dean</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Neoklis-Polyzotis" class="tag" target="_blank" rel="noopener nofollow">#Neoklis-Polyzotis</a><br>Abstract
Indexes are models: a \btree-Index can be seen as a model to map a key to the position of a record within a sorted array, a Hash-Index as a model to map a key to a position of a record within an unsorted array, and a BitMap-Index as a model to indicate if a data record exists or not. In this exploratory research paper, we start from this premise and posit that all existing index structures can be replaced with other types of models, including deep-learning models, which we term \em learned indexes. We theoretically analyze under which conditions learned indexes outperform traditional index structures and describe the main challenges in designing learned index structures. Our initial results show that our learned indexes can have significant advantages over traditional indexes. More importantly, we believe that the idea of replacing core components of a data management system through learned models has far reaching implications for future systems designs and that this work provides just a glimpse of what might be possible.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/kraska2018case.html</link><guid isPermaLink="false">Literature Notes/kraska2018case.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The case for vm-based cloudlets in mobile computing]]></title><description><![CDATA[ 
 <br><br>Mahadev Satyanarayanan, Paramvir Bahl, Ramón Caceres, Nigel Davies (2009)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mahadev-Satyanarayanan" class="tag" target="_blank" rel="noopener nofollow">#Mahadev-Satyanarayanan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Paramvir-Bahl" class="tag" target="_blank" rel="noopener nofollow">#Paramvir-Bahl</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ramón-Caceres" class="tag" target="_blank" rel="noopener nofollow">#Ramón-Caceres</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nigel-Davies" class="tag" target="_blank" rel="noopener nofollow">#Nigel-Davies</a><br>Abstract
Mobile computing continuously evolve through the sustained effort of many researchers. It seamlessly augments users' cognitive abilities via compute-intensive capabilities such as speech recognition, natural language processing, etc. By thus empowering mobile users, we could transform many areas of human activity. This article discusses the technical obstacles to these transformations and proposes a new architecture for overcoming them. In this architecture, a mobile user exploits virtual machine (VM) technology to rapidly instantiate customized service software on a nearby cloudlet and then uses that service over a wireless LAN; the mobile device typically functions as a thin client with respect to the service. A cloudlet is a trusted, resource-rich computer or cluster of computers that's well-connected to the Internet and available for use by nearby mobile devices. Our strategy of leveraging transiently customized proximate infrastructure as a mobile device moves with its user through the physical world is called cloudlet-based, resource-rich, mobile computing. Crisp interactive response, which is essential for seamless augmentation of human cognition, is easily achieved in this architecture because of the cloudlet's physical proximity and one-hop network latency. Using a cloudlet also simplifies the challenge of meeting the peak bandwidth demand of multiple users interactively generating and receiving media such as high-definition video and high-resolution images. Rapid customization of infrastructure for diverse applications emerges as a critical requirement, and our results from a proof-of-concept prototype suggest that VM technology can indeed help meet this requirement.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/satyanarayanan2009case.html</link><guid isPermaLink="false">Literature Notes/satyanarayanan2009case.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Chubby lock service for loosely-coupled distributed systems]]></title><description><![CDATA[ 
 <br><br>Mike Burrows (2006)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mike-Burrows" class="tag" target="_blank" rel="noopener nofollow">#Mike-Burrows</a><br>Abstract
We describe our experiences with the Chubby lock service, which is intended to provide coarse-grained locking as well as reliable (though low-volume) storage for a loosely-coupled distributed system. Chubby provides an interface much like a distributed file system with advisory locks, but the design emphasis is on availability and reliability, as opposed to high performance. Many instances of the service have been used for over a year, with several of them each handling a few tens of thousands of clients concurrently. The paper describes the initial design and expected use, compares it with actual use, and explains how the design had to be modified to accommodate the differences.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/burrows2006chubby.html</link><guid isPermaLink="false">Literature Notes/burrows2006chubby.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The design and implementation of a log-structured file system]]></title><description><![CDATA[ 
 <br><br>Mendel Rosenblum, John K Ousterhout (1992)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mendel-Rosenblum" class="tag" target="_blank" rel="noopener nofollow">#Mendel-Rosenblum</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John" class="tag" target="_blank" rel="noopener nofollow">#John</a> <a href="https://www.jayitha.github.io/Notes?query=tag:K-Ousterhout" class="tag" target="_blank" rel="noopener nofollow">#K-Ousterhout</a><br>Abstract
This paper presents a new technique for disk storage management called a log-structured file system. A log-structured file system writes all modifications to disk sequentially in a log-like structure, thereby speeding up both file writing and crash recovery. The log is the only structure on disk; it contains indexing information so that files can be read back from the log efficiently. In order to maintain large free areas on disk for fast writing, we divide the log intosegmentsand use a segment cleaner to compress the live information from heavily fragmented segments. We present a series of simulations that demonstrate the efficiency of a simple cleaning policy based on cost and benefit. We have implemented a prototype log-structured file system called Sprite LFS; it outperforms current Unix file systems by an order of magnitude for small-file writes while matching or exceeding Unix performance for reads and large writes. Even when the overhead for cleaning is included, Sprite LFS can use 70% of the disk bandwidth for writing, whereas Unix file systems typically can use only 5–10%.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/rosenblum1992design.html</link><guid isPermaLink="false">Literature Notes/rosenblum1992design.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The design and implementation of INGRES]]></title><description><![CDATA[ 
 <br><br>Michael Stonebraker, Eugene Wong, Peter Kreps, Gerald Held (1976)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Stonebraker" class="tag" target="_blank" rel="noopener nofollow">#Michael-Stonebraker</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eugene-Wong" class="tag" target="_blank" rel="noopener nofollow">#Eugene-Wong</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Kreps" class="tag" target="_blank" rel="noopener nofollow">#Peter-Kreps</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Gerald-Held" class="tag" target="_blank" rel="noopener nofollow">#Gerald-Held</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract<br>Cites<br>
<a data-href="codd1970relational" href="https://www.jayitha.github.io/Notes/codd1970relational" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">codd1970relational</a><a data-href="codd1970relational" href="https://www.jayitha.github.io/Notes/literature-notes/codd1970relational.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">codd1970relational</a><br>
<a data-href="codd1971data" href="https://www.jayitha.github.io/Notes/codd1971data" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">codd1971data</a><a data-href="codd1971data" href="https://www.jayitha.github.io/Notes/literature-notes/codd1971data.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">codd1971data</a><br>
<a data-href="chamberlin1974sequel" href="https://www.jayitha.github.io/Notes/chamberlin1974sequel" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chamberlin1974sequel</a><a data-href="chamberlin1974sequel" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1974sequel.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chamberlin1974sequel</a><br>
<a data-href="chamberlin1975views" href="https://www.jayitha.github.io/Notes/chamberlin1975views" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chamberlin1975views</a><a data-href="chamberlin1975views" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1975views.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chamberlin1975views</a><br>
<a data-href="astrahan1976system" href="https://www.jayitha.github.io/Notes/astrahan1976system" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">astrahan1976system</a><a data-href="astrahan1976system" href="https://www.jayitha.github.io/Notes/literature-notes/astrahan1976system.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">astrahan1976system</a><br>
<a data-href="gray1976granularity" href="https://www.jayitha.github.io/Notes/gray1976granularity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gray1976granularity</a><a data-href="gray1976granularity" href="https://www.jayitha.github.io/Notes/literature-notes/gray1976granularity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gray1976granularity</a><br><br><br>: <br>: <br>: <br>: <br>: <br>: ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/stonebraker1976design.html</link><guid isPermaLink="false">Literature Notes/stonebraker1976design.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The design and implementation of modern column-oriented database systems]]></title><description><![CDATA[ 
 <br><br>Daniel Abadi, Peter Boncz, Stavros Harizopoulos, Stratos Idreos, Samuel Madden, others (2013)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel-Abadi" class="tag" target="_blank" rel="noopener nofollow">#Daniel-Abadi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Peter-Boncz" class="tag" target="_blank" rel="noopener nofollow">#Peter-Boncz</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Stavros-Harizopoulos" class="tag" target="_blank" rel="noopener nofollow">#Stavros-Harizopoulos</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Stratos-Idreos" class="tag" target="_blank" rel="noopener nofollow">#Stratos-Idreos</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Samuel-Madden" class="tag" target="_blank" rel="noopener nofollow">#Samuel-Madden</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract
In this article, we survey recent research on column-oriented database systems, or column-stores, where each attribute of a table is stored in a separate file or region on storage. Such databases have seen a resurgence in recent years with a rise in interest in analytic queries that perform scans and aggregates over large portions of a few columns of a table. The main advantage of a column-store is that it can access just the columns needed to answer such queries. We specifically focus on three influential research prototypes, MonetDB [46], MonetDB/X100 [18], and C-Store [86]. These systems have formed the basis for several well-known commercial column-store implementations. We describe their similarities and differences and discuss their specific architectural features for compression, late materialization, join processing, vectorization and adaptive indexing (database cracking).
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abadi2013design.html</link><guid isPermaLink="false">Literature Notes/abadi2013design.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The design of the Postgres storage system]]></title><description><![CDATA[ 
 <br><br>Michael Stonebraker (1987)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Stonebraker" class="tag" target="_blank" rel="noopener nofollow">#Michael-Stonebraker</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/stonebraker1987design.html</link><guid isPermaLink="false">Literature Notes/stonebraker1987design.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The emergence of edge computing]]></title><description><![CDATA[ 
 <br><br>Mahadev Satyanarayanan (2017)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mahadev-Satyanarayanan" class="tag" target="_blank" rel="noopener nofollow">#Mahadev-Satyanarayanan</a><br>Abstract
Industry investment and research interest in edge computing, in which computing and storage nodes are placed at the Internet's edge in close proximity to mobile devices or sensors, have grown dramatically in recent years. This emerging technology promises to deliver highly responsive cloud services for mobile computing, scalability and privacy-policy enforcement for the Internet of Things, and the ability to mask transient cloud outages. The web extra at <a data-tooltip-position="top" aria-label="http://www.youtube.com/playlist?list=PLmrZVvFtthdP3fwHPy_4d61oDvQY_RBgS" rel="noopener nofollow" class="external-link" href="http://www.youtube.com/playlist?list=PLmrZVvFtthdP3fwHPy_4d61oDvQY_RBgS" target="_blank">www.youtube.com/playlist?list=PLmrZVvFtthdP3fwHPy_4d61oDvQY_RBgS</a> includes a five-video playlist demonstrating proof-of-concept implementations for three tasks: assembling 2D Lego models, freehand sketching, and playing Ping-Pong.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/satyanarayanan2017emergence.html</link><guid isPermaLink="false">Literature Notes/satyanarayanan2017emergence.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Gamma database machine project]]></title><description><![CDATA[ 
 <br><br>David J DeWitt, Shahram Ghandeharizadeh, Donovan A Schneider, Allan Bricker, Hui-I Hsiao, Rick Rasmussen (1990)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:David" class="tag" target="_blank" rel="noopener nofollow">#David</a> <a href="https://www.jayitha.github.io/Notes?query=tag:J-DeWitt" class="tag" target="_blank" rel="noopener nofollow">#J-DeWitt</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shahram-Ghandeharizadeh" class="tag" target="_blank" rel="noopener nofollow">#Shahram-Ghandeharizadeh</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Donovan" class="tag" target="_blank" rel="noopener nofollow">#Donovan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:A-Schneider" class="tag" target="_blank" rel="noopener nofollow">#A-Schneider</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Allan-Bricker" class="tag" target="_blank" rel="noopener nofollow">#Allan-Bricker</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Hui-I-Hsiao" class="tag" target="_blank" rel="noopener nofollow">#Hui-I-Hsiao</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Rick-Rasmussen" class="tag" target="_blank" rel="noopener nofollow">#Rick-Rasmussen</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/dewitt1990gamma.html</link><guid isPermaLink="false">Literature Notes/dewitt1990gamma.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The google file system]]></title><description><![CDATA[ 
 <br><br>Sanjay Ghemawat, Howard Gobioff, Shun-Tak Leung (2003)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sanjay-Ghemawat" class="tag" target="_blank" rel="noopener nofollow">#Sanjay-Ghemawat</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Howard-Gobioff" class="tag" target="_blank" rel="noopener nofollow">#Howard-Gobioff</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shun-Tak-Leung" class="tag" target="_blank" rel="noopener nofollow">#Shun-Tak-Leung</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ghemawat2003google.html</link><guid isPermaLink="false">Literature Notes/ghemawat2003google.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The HP AutoRAID hierarchical storage system]]></title><description><![CDATA[ 
 <br><br>John Wilkes, Richard Golding, Carl Staelin, Tim Sullivan (1996)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John-Wilkes" class="tag" target="_blank" rel="noopener nofollow">#John-Wilkes</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Richard-Golding" class="tag" target="_blank" rel="noopener nofollow">#Richard-Golding</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Carl-Staelin" class="tag" target="_blank" rel="noopener nofollow">#Carl-Staelin</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Sullivan" class="tag" target="_blank" rel="noopener nofollow">#Tim-Sullivan</a><br>Abstract
Configuring redundant disk arrays is a black art. To configure an array properly, a system administrator must understand the details of both the array and the workload it will support. Incorrect understanding of either, or changes in the workload over time, can lead to poor performance. We present a solution to this problem: a two-level storage hierarchy implemented inside a single disk-array controller. In the upper level of this hierarchy, two copies of active data are stored to provide full redundancy and excellent performance. In the lower level, RAID 5 parity protection is used to provide excellent storage cost for inactive data, at somewhat lower performance. The technology we describe in this article, know as HP AutoRAID, automatically and transparently manages migration of data blocks between these two levels as access patterns change. The result is a fully redundant storage system that is extremely easy to use, is suitable for a wide variety of workloads, is largely insensitive to dynamic workload changes, and performs much better than disk arrays with comparable numbers of spindles and much larger amounts of front-end RAM cache. Because the implementation of the HP AutoRAID technology is almost entirely in software, the additional hardware cost for these benefits is very small. We describe the HP AutoRAID technology in detail, provide performance data for an embodiment of it in a storage array, and summarize the results of simulation studies used to choose algorithms implemented in the array.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/wilkes1996hp.html</link><guid isPermaLink="false">Literature Notes/wilkes1996hp.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The log-structured merge-tree (LSM-tree)]]></title><description><![CDATA[ 
 <br><br>Patrick O'Neil, Edward Cheng, Dieter Gawlick, Elizabeth O'Neil (1996)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a><br>Abstract
High-performance transaction system applications typically insert rows in a History table to provide an activity trace; at the same time the transaction system generates log records for purposes of system recovery. Both types of generated information can benefit from efficient indexing. An example in a well-known setting is the TPC-A benchmark application, modified to support efficient queries on the history for account activity for specific accounts. This requires an index by account-id on the fast-growing History table. Unfortunately, standard disk-based index structures such as the B-tree will effectively double the I/O cost of the transaction to maintain an index such as this in real time, increasing the total system cost up to fifty percent. Clearly a method for maintaining a real-time index at low cost is desirable. The log-structured mergetree (LSM-tree) is a disk-based data structure designed to provide low-cost indexing for a file experiencing a high rate of record inserts (and deletes) over an extended period. The LSM-tree uses an algorithm that defers and batches index changes, cascading the changes from a memory-based component through one or more disk components in an efficient manner reminiscent of merge sort. During this process all index values are continuously accessible to retrievals (aside from very short locking periods), either through the memory component or one of the disk components. The algorithm has greatly reduced disk arm movements compared to a traditional access methods such as B-trees, and will improve cost-performance in domains where disk arm costs for inserts with traditional access methods overwhelm storage media costs. The LSM-tree approach also generalizes to operations other than insert and delete. However, indexed finds requiring immediate response will lose I/O efficiency in some cases, so the LSM-tree is most useful in applications where index inserts are more common than finds that retrieve the entries. This seems to be a common property for history tables and log files, for example. The conclusions of Sect. 6 compare the hybrid use of memory and disk components in the LSM-tree access method with the commonly understood advantage of the hybrid method to buffer disk pages in memory.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/o1996log.html</link><guid isPermaLink="false">Literature Notes/o1996log.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The part-time parliament]]></title><description><![CDATA[ 
 <br><br>Leslie Lamport (1998)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Leslie-Lamport" class="tag" target="_blank" rel="noopener nofollow">#Leslie-Lamport</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lamport1998part.html</link><guid isPermaLink="false">Literature Notes/lamport1998part.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The POSTGRES next generation database management system]]></title><description><![CDATA[ 
 <br><br>Michael Stonebraker, Greg Kemnitz (1991)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Michael-Stonebraker" class="tag" target="_blank" rel="noopener nofollow">#Michael-Stonebraker</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Greg-Kemnitz" class="tag" target="_blank" rel="noopener nofollow">#Greg-Kemnitz</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/stonebraker1991postgres.html</link><guid isPermaLink="false">Literature Notes/stonebraker1991postgres.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The Programmer as Navigator]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bachman1973programmer.html</link><guid isPermaLink="false">Literature Notes/bachman1973programmer.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The pyramid-technique: Towards breaking the curse of dimensionality]]></title><description><![CDATA[ 
 <br><br>Stefan Berchtold, Christian Böhm, Hans-Peter Kriegal (1998)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a><br>Abstract
In this paper, we propose the Pyramid-Technique, a new indexing method for high-dimensional data spaces. The Pyramid-Technique is highly adapted to range query processing using the maximum metric Lmax. In contrast to all other index structures, the performance of the Pyramid-Technique does not deteriorate when processing range queries on data of higher dimensionality. The Pyramid-Technique is based on a special partitioning strategy which is optimized for high-dimensional data. The basic idea is to divide the data space first into 2d pyramids sharing the center point of the space as a top. In a second step, the single pyramids are cut into slices parallel to the basis of the pyramid. These slices from the data pages. Furthermore, we show that this partition provides a mapping from the given d-dimensional space to a 1-dimensional space. Therefore, we are able to use a B+-tree to manage the transformed data. As an analytical evaluation of our technique for hypercube range queries and uniform data distribution shows, the Pyramid-Technique clearly outperforms index structures using other partitioning strategies. To demonstrate the practical relevance of our technique, we experimentally compared the Pyramid-Technique with the X-tree, the Hilbert R-tree, and the Linear Scan. The results of our experiments using both, synthetic and real data, demonstrate that the Pyramid-Technique outperforms the X-tree and the Hilbert R-tree by a factor of up to 14 (number of page accesses) and up to 2500 (total elapsed time) for range queries.
<br>
<br>Proposes <a data-href="Pyramid Technique" href="https://www.jayitha.github.io/Notes/Pyramid Technique" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Pyramid Technique</a><a data-href="Pyramid Technique" href="https://www.jayitha.github.io/Notes/glossary/pyramid-technique.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Pyramid Technique</a>
<br>None of the existing indexing techniques that provide good performance for low-dimensional data perform well for high dimensional data because of the <a data-href="Curse of Dimensionality" href="https://www.jayitha.github.io/Notes/Curse of Dimensionality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Curse of Dimensionality</a><a data-href="Curse of Dimensionality" href="https://www.jayitha.github.io/Notes/glossary/curse-of-dimensionality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Curse of Dimensionality</a>
<br>Most existing high dimensional approaches (at that time) were extensions of multidimensional indices and therefore restricted to space partitioning
<br>An interesting observation this paper makes is that the 50%-quantile splitting strategy that most prior indexing strategies used to ensure storage utilization guarantees performs poorly in high-dimensions because the access probability of pages is close to 100%
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/berchtold1998pyramid.html</link><guid isPermaLink="false">Literature Notes/berchtold1998pyramid.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The uncracked pieces in database cracking]]></title><description><![CDATA[ 
 <br><br>Felix Martin Schuhknecht, Alekh Jindal, Jens Dittrich (2013)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Felix" class="tag" target="_blank" rel="noopener nofollow">#Felix</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Martin-Schuhknecht" class="tag" target="_blank" rel="noopener nofollow">#Martin-Schuhknecht</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alekh-Jindal" class="tag" target="_blank" rel="noopener nofollow">#Alekh-Jindal</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jens-Dittrich" class="tag" target="_blank" rel="noopener nofollow">#Jens-Dittrich</a><br>Abstract
Database cracking has been an area of active research in recent years. The core idea of database cracking is to create indexes adaptively and incrementally as a side-product of query processing. Several works have proposed different cracking techniques for different aspects including updates, tuple-reconstruction, convergence, concurrency-control, and robustness. However, there is a lack of any comparative study of these different methods by an independent group. In this paper, we conduct an experimental study on database cracking. Our goal is to critically review several aspects, identify the potential, and propose promising directions in database cracking. With this study, we hope to expand the scope of database cracking and possibly leverage cracking in database engines other than MonetDB. We repeat several prior database cracking works including the core cracking algorithms as well as three other works on convergence (hybrid cracking), tuple-reconstruction (sideways cracking), and robustness (stochastic cracking) respectively. We evaluate these works and show possible directions to do even better. We further test cracking under a variety of experimental settings, including high selectivity queries, low selectivity queries, and multiple query access patterns. Finally, we compare cracking against different sorting algorithms as well as against different main-memory optimised indexes, including the recently proposed Adaptive Radix Tree (ART). Our results show that: (i) the previously proposed cracking algorithms are repeatable, (ii) there is still enough room to significantly improve the previously proposed cracking algorithms, (iii) cracking depends heavily on query selectivity, (iv) cracking needs to catch up with modern indexing trends, and (v) different indexing algorithms have different indexing signatures.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/schuhknecht2013uncracked.html</link><guid isPermaLink="false">Literature Notes/schuhknecht2013uncracked.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The UNIX time-sharing system]]></title><description><![CDATA[ 
 <br><br>Dennis M Ritchie, Ken Thompson (1978)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Dennis" class="tag" target="_blank" rel="noopener nofollow">#Dennis</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M-Ritchie" class="tag" target="_blank" rel="noopener nofollow">#M-Ritchie</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ken-Thompson" class="tag" target="_blank" rel="noopener nofollow">#Ken-Thompson</a><br>Abstract
unix* is a general-purpose, multi-user, interactive operating system for the larger Digital Equipment Corporation pdp-11 and the Interdata 8/32 computers. It offers a number of features seldom found even in larger operating systems, including (i) A hierarchical file system incorporating demountable volumes, (ii) Compatible file, device, and inter-process I/O, (iii) The ability to initiate asynchronous processes, (iv) System command language selectable on a per-user basis, (v) Over 100 subsystems including a dozen languages, (vi) High degree of portability. This paper discusses the nature and implementation of the file system and of the user command interface.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/ritchie1978unix.html</link><guid isPermaLink="false">Literature Notes/ritchie1978unix.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Thomas' Calculus: Early Transcendentals]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/hass2016university.html</link><guid isPermaLink="false">Literature Notes/hass2016university.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Time, clocks, and the ordering of events in a distributed system]]></title><description><![CDATA[ 
 <br><br>Leslie Lamport (2019)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Leslie-Lamport" class="tag" target="_blank" rel="noopener nofollow">#Leslie-Lamport</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/lamport2019time.html</link><guid isPermaLink="false">Literature Notes/lamport2019time.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[To partition, or not to partition, that is the join question in a real system]]></title><description><![CDATA[ 
 <br><br>Maximilian Bandle, Jana Giceva, Thomas Neumann (2021)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Maximilian-Bandle" class="tag" target="_blank" rel="noopener nofollow">#Maximilian-Bandle</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jana-Giceva" class="tag" target="_blank" rel="noopener nofollow">#Jana-Giceva</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Thomas-Neumann" class="tag" target="_blank" rel="noopener nofollow">#Thomas-Neumann</a><br>Abstract
An efficient implementation of a hash join has been a highly researched problem for decades. Recently, the radix join has been shown to have superior performance over the alternatives (e.g., the non-partitioned hash join), albeit on synthetic microbenchmarks. Therefore, it is unclear whether one can simply replace the hash join in an RDBMS or use the radix join as a performance booster for selected queries. If the latter, it is still unknown when one should rely on the radix join to improve performance. In this paper, we address these questions, show how to integrate the radix join in Umbra, a code-generating DBMS, and make it competitive for selective queries by introducing a Bloom-filter based semi-join reducer. We have evaluated how well it runs when used in queries from more representative workloads like TPC-H. Surprisingly, the radix join brings a noticeable improvement in only one out of all 59 joins in TPC-H. Thus, with an extensive range of microbenchmarks, we have isolated the effects of the most important workload factors and synthesized the range of values where partitioning the data for the radix join pays off. Our analysis shows that the benefit of data partitioning quickly diminishes as soon as we deviate from the optimal parameters, and even late materialization rarely helps in real workloads. We thus, conclude that integrating the radix join within a code-generating database rarely justifies the increase in code and optimizer complexity and advise against it for processing real-world workloads.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/bandle2021partition.html</link><guid isPermaLink="false">Literature Notes/bandle2021partition.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Toward a global data infrastructure]]></title><description><![CDATA[ 
 <br><br>Nitesh Mor, Ben Zhang, John Kolb, Douglas S Chan, Nikhil Goyal, Nicholas Sun, Ken Lutz, Eric Allman, John Wawrzynek, Edward A Lee, others (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nitesh-Mor" class="tag" target="_blank" rel="noopener nofollow">#Nitesh-Mor</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ben-Zhang" class="tag" target="_blank" rel="noopener nofollow">#Ben-Zhang</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John-Kolb" class="tag" target="_blank" rel="noopener nofollow">#John-Kolb</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Douglas" class="tag" target="_blank" rel="noopener nofollow">#Douglas</a> <a href="https://www.jayitha.github.io/Notes?query=tag:S-Chan" class="tag" target="_blank" rel="noopener nofollow">#S-Chan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nikhil-Goyal" class="tag" target="_blank" rel="noopener nofollow">#Nikhil-Goyal</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nicholas-Sun" class="tag" target="_blank" rel="noopener nofollow">#Nicholas-Sun</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ken-Lutz" class="tag" target="_blank" rel="noopener nofollow">#Ken-Lutz</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Eric-Allman" class="tag" target="_blank" rel="noopener nofollow">#Eric-Allman</a> <a href="https://www.jayitha.github.io/Notes?query=tag:John-Wawrzynek" class="tag" target="_blank" rel="noopener nofollow">#John-Wawrzynek</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Edward" class="tag" target="_blank" rel="noopener nofollow">#Edward</a> <a href="https://www.jayitha.github.io/Notes?query=tag:A-Lee" class="tag" target="_blank" rel="noopener nofollow">#A-Lee</a> <a href="https://www.jayitha.github.io/Notes?query=tag:-others" class="tag" target="_blank" rel="noopener nofollow">#-others</a><br>Abstract
The Internet of Things (IoT) represents a new class of applications that can benefit from cloud infrastructure. However, directly connecting smart devices to the cloud has multiple disadvantages and is unlikely to keep up with the growing speed of the IoT or the diverse needs of IoT applications. Here, the authors argue that fundamental IoT properties prevent the current approach from scaling. What's missing is a well-architected system extending cloud functionality and providing seamless interplay among heterogeneous components closer to the edge in the IoT space. Raising the level of abstraction to a data-centric design – focused around the distribution, preservation, and protection of information – better matches the IoT. To address such problems with the cloud-centric architecture, the authors present their early work on a distributed platform, the Global Data Plane.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mor2016toward.html</link><guid isPermaLink="false">Literature Notes/mor2016toward.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Toward real microkernels]]></title><description><![CDATA[ 
 <br><br>Jochen Liedtke (1996)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jochen-Liedtke" class="tag" target="_blank" rel="noopener nofollow">#Jochen-Liedtke</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/liedtke1996toward.html</link><guid isPermaLink="false">Literature Notes/liedtke1996toward.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Towards a learning optimizer for shared clouds]]></title><description><![CDATA[ 
 <br><br>Chenggang Wu, Alekh Jindal, Saeed Amizadeh, Hiren Patel, Wangchao Le, Shi Qiao, Sriram Rao (2018)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Chenggang-Wu" class="tag" target="_blank" rel="noopener nofollow">#Chenggang-Wu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alekh-Jindal" class="tag" target="_blank" rel="noopener nofollow">#Alekh-Jindal</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Saeed-Amizadeh" class="tag" target="_blank" rel="noopener nofollow">#Saeed-Amizadeh</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Hiren-Patel" class="tag" target="_blank" rel="noopener nofollow">#Hiren-Patel</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Wangchao-Le" class="tag" target="_blank" rel="noopener nofollow">#Wangchao-Le</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Shi-Qiao" class="tag" target="_blank" rel="noopener nofollow">#Shi-Qiao</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Sriram-Rao" class="tag" target="_blank" rel="noopener nofollow">#Sriram-Rao</a><br>Abstract
Query optimizers are notorious for inaccurate cost estimates, leading to poor performance. The root of the problem lies in inaccurate cardinality estimates, i.e., the size of intermediate (and final) results in a query plan. These estimates also determine the resources consumed in modern shared cloud infrastructures. In this paper, we present CARDLEARNER, a machine learning based approach to learn cardinality models from previous job executions and use them to predict the cardinalities in future jobs. The key intuition in our approach is that shared cloud workloads are often recurring and overlapping in nature, and so we could learn cardinality models for overlapping subgraph templates. We discuss various learning approaches and show how learning a large number of smaller models results in high accuracy and explainability. We further present an exploration technique to avoid learning bias by considering alternate join orders and learning cardinality models over them. We describe the feedback loop to apply the learned models back to future job executions. Finally, we show a detailed evaluation of our models (up to 5 orders of magnitude less error), query plans (60% applicability), performance (up to 100% faster, 3x fewer resources), and exploration (optimal in few 10s of executions).
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/wu2018towards.html</link><guid isPermaLink="false">Literature Notes/wu2018towards.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Transaction management in the R* distributed database management system]]></title><description><![CDATA[ 
 <br><br>C Mohan (1986)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:C-Mohan" class="tag" target="_blank" rel="noopener nofollow">#C-Mohan</a><br>Abstract
This paper deals with the transaction management aspects of the R distributed database system. It concentrates primarily on the description of the R commit protocols, Presumed Abort (PA) and Presumed Commit (PC). PA and PC are extensions of the well-known, two-phase (2P) commit protocol. PA is optimized for read-only transactions and a class of multisite update transactions, and PC is optimized for other classes of multisite update transactions. The optimizations result in reduced intersite message traffic and log writes, and, consequently, a better response time. The paper also discusses R*'s approach toward distributed deadlock detection and resolution.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/mohan1986transaction.html</link><guid isPermaLink="false">Literature Notes/mohan1986transaction.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Transient customization of mobile computing infrastructure]]></title><description><![CDATA[ 
 <br><br>Adam Wolbach, Jan Harkes, Srinivas Chellappa, Mahadev Satyanarayanan (2008)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Adam-Wolbach" class="tag" target="_blank" rel="noopener nofollow">#Adam-Wolbach</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jan-Harkes" class="tag" target="_blank" rel="noopener nofollow">#Jan-Harkes</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Srinivas-Chellappa" class="tag" target="_blank" rel="noopener nofollow">#Srinivas-Chellappa</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mahadev-Satyanarayanan" class="tag" target="_blank" rel="noopener nofollow">#Mahadev-Satyanarayanan</a><br>Abstract
Kimberley is a system that simplifies transient use of fixed hardware infrastructure by a mobile device. It uses virtual machine (VM) technology to resolve the tension between standardizing infrastructure for ease of deployment and maintenance, and customizing that infrastructure to meet the specific needs of a user. Kimberley decomposes the state of a customized VM into a widely-available base VM and a much smaller private VM overlay. The base is downloaded by the infrastructure in advance. Only the small overlay needs to be delivered from the mobile device, or under its control from a public web site. This strategy keeps startup delay low. It may also conserve energy on the mobile device by reducing the volume of wireless transmission. We have built a prototype of Kimberley, and our experiments confirm the feasibility of this approach.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/wolbach2008transient.html</link><guid isPermaLink="false">Literature Notes/wolbach2008transient.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Understanding machine learning: From theory to algorithms]]></title><description><![CDATA[ 
 <br>Chapter 2 - A Gentle Start<br><a data-href="The Statistical Learning Framework" href="https://www.jayitha.github.io/Notes/The Statistical Learning Framework" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Statistical Learning Framework</a><a data-href="The Statistical Learning Framework" href="https://www.jayitha.github.io/Notes/glossary/the-statistical-learning-framework.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Statistical Learning Framework</a><br>
<a data-href="Error of a Prediction Rule" href="https://www.jayitha.github.io/Notes/Error of a Prediction Rule" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Error of a Prediction Rule</a><a data-href="Error of a Prediction Rule" href="https://www.jayitha.github.io/Notes/glossary/error-of-a-prediction-rule.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Error of a Prediction Rule</a><br>
<a data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/Empirical Risk Minimization" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Empirical Risk Minimization</a><a data-href="Empirical Risk Minimization" href="https://www.jayitha.github.io/Notes/glossary/empirical-risk-minimization.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Empirical Risk Minimization</a><br>
<a data-href="Overfitting" href="https://www.jayitha.github.io/Notes/Overfitting" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Overfitting</a><a data-href="Overfitting" href="https://www.jayitha.github.io/Notes/glossary/overfitting.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Overfitting</a><br>
<a data-href="Inductive Bias" href="https://www.jayitha.github.io/Notes/Inductive Bias" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Inductive Bias</a><a data-href="Inductive Bias" href="https://www.jayitha.github.io/Notes/glossary/inductive-bias.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Inductive Bias</a><br>
<a data-href="The Realizability Assumption" href="https://www.jayitha.github.io/Notes/The Realizability Assumption" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The Realizability Assumption</a><a data-href="The Realizability Assumption" href="https://www.jayitha.github.io/Notes/glossary/the-realizability-assumption.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The Realizability Assumption</a><br>
<a data-tooltip-position="top" aria-label="Independent and Identically Distributed (IID)" data-href="Independent and Identically Distributed (IID)" href="https://www.jayitha.github.io/Notes/Independent and Identically Distributed (IID)" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">IID Assumption</a><a data-tooltip-position="top" aria-label="Independent and Identically Distributed (IID)" data-href="Independent and Identically Distributed (IID)" href="https://www.jayitha.github.io/Notes/glossary/independent-and-identically-distributed-(iid).html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">IID Assumption</a><br>
<a data-href="Union Bound" href="https://www.jayitha.github.io/Notes/Union Bound" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Union Bound</a><a data-href="Union Bound" href="https://www.jayitha.github.io/Notes/glossary/union-bound.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Union Bound</a><br>
<a data-href="Finite Hypothesis Classes" href="https://www.jayitha.github.io/Notes/Finite Hypothesis Classes" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Finite Hypothesis Classes</a><a data-href="Finite Hypothesis Classes" href="https://www.jayitha.github.io/Notes/glossary/finite-hypothesis-classes.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Finite Hypothesis Classes</a>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/shalev2014understanding.html</link><guid isPermaLink="false">Literature Notes/shalev2014understanding.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Urgent virtual machine eviction with enlightened post-copy]]></title><description><![CDATA[ 
 <br><br>Yoshihisa Abe, Roxana Geambasu, Kaustubh Joshi, Mahadev Satyanarayanan (2016)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Yoshihisa-Abe" class="tag" target="_blank" rel="noopener nofollow">#Yoshihisa-Abe</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Roxana-Geambasu" class="tag" target="_blank" rel="noopener nofollow">#Roxana-Geambasu</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Kaustubh-Joshi" class="tag" target="_blank" rel="noopener nofollow">#Kaustubh-Joshi</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Mahadev-Satyanarayanan" class="tag" target="_blank" rel="noopener nofollow">#Mahadev-Satyanarayanan</a><br>Abstract
Virtual machine (VM) migration demands distinct properties under resource oversubscription and workload surges. We present enlightened post-copy, a new mechanism for VMs under contention that evicts the target VM with fast execution transfer and short total duration. This design contrasts with common live migration, which uses the down time of the migrated VM as its primary metric; it instead focuses on recovering the aggregate performance of the VMs being affected. In enlightened post-copy, the guest OS identifies memory state that is expected to encompass the VM's working set. The hypervisor accordingly transfers its state, mitigating the performance impact on the migrated VM resulting from post-copy transfer. We show that our implementation, with modest instrumentation in guest Linux, resolves VM contention up to several times faster than live migration.
<br><br>Dataview: No results to show for list query.]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/abe2016urgent.html</link><guid isPermaLink="false">Literature Notes/abe2016urgent.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Using Crash Hoare logic for certifying the FSCQ file system]]></title><description><![CDATA[ 
 <br><br>Haogang Chen, Daniel Ziegler, Tej Chajed, Adam Chlipala, M Frans Kaashoek, Nickolai Zeldovich (2015)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Haogang-Chen" class="tag" target="_blank" rel="noopener nofollow">#Haogang-Chen</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Daniel-Ziegler" class="tag" target="_blank" rel="noopener nofollow">#Daniel-Ziegler</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tej-Chajed" class="tag" target="_blank" rel="noopener nofollow">#Tej-Chajed</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Adam-Chlipala" class="tag" target="_blank" rel="noopener nofollow">#Adam-Chlipala</a> <a href="https://www.jayitha.github.io/Notes?query=tag:M" class="tag" target="_blank" rel="noopener nofollow">#M</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Frans-Kaashoek" class="tag" target="_blank" rel="noopener nofollow">#Frans-Kaashoek</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Nickolai-Zeldovich" class="tag" target="_blank" rel="noopener nofollow">#Nickolai-Zeldovich</a><br>Abstract
FSCQ is the first file system with a machine-checkable proof (using the Coq proof assistant) that its implementation meets its specification and whose specification includes crashes. FSCQ provably avoids bugs that have plagued previous file systems, such as performing disk writes without sufficient barriers or forgetting to zero out directory blocks. If a crash happens at an inopportune time, these bugs can lead to data loss. FSCQ's theorems prove that, under any sequence of crashes followed by reboots, FSCQ will recover the file system correctly without losing data. To state FSCQ's theorems, this paper introduces the Crash Hoare logic (CHL), which extends traditional Hoare logic with a crash condition, a recovery procedure, and logical address spaces for specifying disk states at different abstraction levels. CHL also reduces the proof effort for developers through proof automation. Using CHL, we developed, specified, and proved the correctness of the FSCQ file system. Although FSCQ's design is relatively simple, experiments with FSCQ running as a user-level file system show that it is sufficient to run Unix applications with usable performance. FSCQ's specifications and proofs required significantly more work than the implementation, but the work was manageable even for a small team of a few researchers.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chen2015using.html</link><guid isPermaLink="false">Literature Notes/chen2015using.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Foreshadow: Extracting the keys to the intel {SGX} kingdom with transient {Out-of-Order} execution]]></title><description><![CDATA[ 
 <br><br>Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F Wenisch, Yuval Yarom, Raoul Strackx (2018)<br>Tags: <br>Abstract
Trusted execution environments, and particularly the Software Guard eXtensions (SGX) included in recent Intel x86 processors, gained significant traction in recent years. A long track of research papers, and increasingly also real-world industry applications, take advantage of the strong hardware-enforced confidentiality and integrity guarantees provided by Intel SGX. Ultimately, enclaved execution holds the compelling potential of securely offloading sensitive computations to untrusted remote platforms. We present Foreshadow, a practical software-only microarchitectural attack that decisively dismantles the security objectives of current SGX implementations. Crucially, unlike previous SGX attacks, we do not make any assumptions on the victim enclave's code and do not necessarily require kernel-level access. At its core, Foreshadow abuses a speculative execution bug in modern Intel processors, on top of which we develop a novel exploitation methodology to reliably leak plaintext enclave secrets from the CPU cache. We demonstrate our attacks by extracting full cryptographic keys from Intel's vetted architectural enclaves, and validate their correctness by launching rogue production enclaves and forging arbitrary local and remote attestation responses. The extracted remote attestation keys affect millions of devices.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/van2018foreshadow.html</link><guid isPermaLink="false">Literature Notes/van2018foreshadow.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Leapfrog triejoin: A worst-case optimal join algorithm]]></title><description><![CDATA[ 
 <br><br>Todd L Veldhuizen (2012)<br>Tags: <br>Abstract
Recent years have seen exciting developments in join algorithms. In 2008, Atserias, Grohe and Marx (henceforth AGM) proved a tight bound on the maximum result size of a full conjunctive query, given constraints on the input relation sizes. In 2012, Ngo, Porat, R{é} and Rudra (henceforth NPRR) devised a join algorithm with worst-case running time proportional to the AGM bound. Our commercial Datalog system LogicBlox employs a novel join algorithm, \emph{leapfrog triejoin}, which compared conspicuously well to the NPRR algorithm in preliminary benchmarks. This spurred us to analyze the complexity of leapfrog triejoin. In this paper we establish that leapfrog triejoin is also worst-case optimal, up to a log factor, in the sense of NPRR. We improve on the results of NPRR by proving that leapfrog triejoin achieves worst-case optimality for finer-grained classes of database instances, such as those defined by constraints on projection cardinalities. We show that NPRR is \emph{not} worst-case optimal for such classes, giving a counterexample where leapfrog triejoin runs in O(nlogn) time, compared to Θ(n1.375) time for NPRR. On a practical note, leapfrog triejoin can be implemented using conventional data structures such as B-trees, and extends naturally to ∃1 queries. We believe our algorithm offers a useful addition to the existing toolbox of join algorithms, being easy to absorb, simple to implement, and having a concise optimality proof.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/veldhuizen2012leapfrog.html</link><guid isPermaLink="false">Literature Notes/veldhuizen2012leapfrog.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Amazon aurora: On avoiding distributed consensus for i/Os, commits, and membership changes]]></title><description><![CDATA[ 
 <br><br>Alexandre Verbitski, Anurag Gupta, Debanjan Saha, James Corey, Kamal Gupta, Murali Brahmadesam, Raman Mittal, Sailesh Krishnamurthy, Sandor Maurice, Tengiz Kharatishvilli, others (2018)<br>Tags: <br>Abstract
Amazon Aurora is a high-throughput cloud-native relational database offered as part of Amazon Web Services (AWS). One of the more novel differences between Aurora and other relational databases is how it pushes redo processing to a multi-tenant scale-out storage service, purpose-built for Aurora. Doing so reduces networking traffic, avoids checkpoints and crash recovery, enables failovers to replicas without loss of data, and enables fault-tolerant storage that heals without database involvement. Traditional implementations that leverage distributed storage would use distributed consensus algorithms for commits, reads, replication, and membership changes and amplify cost of underlying storage. In this paper, we describe how Aurora avoids distributed consensus under most circumstances by establishing invariants and leveraging local transient state. Doing so improves performance, reduces variability, and lowers costs.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/verbitski2018amazon.html</link><guid isPermaLink="false">Literature Notes/verbitski2018amazon.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Views, authorization, and locking in a relational data base system]]></title><description><![CDATA[ 
 ]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/chamberlin1975views.html</link><guid isPermaLink="false">Literature Notes/chamberlin1975views.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Lottery scheduling: Flexible proportional-share resource management]]></title><description><![CDATA[ 
 <br><br>Carl A Waldspurger, William E Weihl (1994)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/waldspurger1994lottery.html</link><guid isPermaLink="false">Literature Notes/waldspurger1994lottery.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Logoot-undo: Distributed collaborative editing system on p2p networks]]></title><description><![CDATA[ 
 <br><br>Stephane Weiss, Pascal Urso, Pascal Molli (2010)<br>Tags: <br>Abstract
Peer-to-peer systems provide scalable content distribution for cheap and resist to censorship attempts. However, P2P networks mainly distribute immutable content and provide poor support for highly dynamic content such as produced by collaborative systems. A new class of algorithms called CRDT (Commutative Replicated Data Type), which ensures consistency of highly dynamic content on P2P networks, is emerging. However, if existing CRDT algorithms support the "edit anywhere, anytime” feature, they do not support the "undo anywhere, anytime” feature. In this paper, we present the Logoot-Undo CRDT algorithm, which integrates the "undo anywhere, anytime” feature. We compare the performance of the proposed algorithm with related algorithms and measure the impact of the undo feature on the global performance of the algorithm. We prove that the cost of the undo feature remains low on a corpus of data extracted from Wikipedia.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/weiss2010logoot.html</link><guid isPermaLink="false">Literature Notes/weiss2010logoot.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[SEDA: An architecture for well-conditioned, scalable internet services]]></title><description><![CDATA[ 
 <br><br>Matt Welsh, David Culler, Eric Brewer (2001)<br>Tags: <br>Abstract
We propose a new design for highly concurrent Internet services, which we call the staged event-driven architecture (SEDA). SEDA is intended to support massive concurrency demands and simplify the construction of well-conditioned services. In SEDA, applications consist of a network of event-driven stages connected by explicit queues. This architecture allows services to be well-conditioned to load, preventing resources from being overcommitted when demand exceeds service capacity. SEDA makes use of a set of dynamic resource controllers to keep stages within their operating regime despite large fluctuations in load. We describe several control mechanisms for automatic tuning and load conditioning, including thread pool sizing, event batching, and adaptive load shedding. We present the SEDA design and an implementation of an Internet services platform based on this architecture. We evaluate the use of SEDA through two applications: a high-performance HTTP server and a packet router for the Gnutella peer-to-peer file sharing network. These results show that SEDA applications exhibit higher performance than traditional service designs, and are robust to huge variations in load.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/welsh2001seda.html</link><guid isPermaLink="false">Literature Notes/welsh2001seda.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[When is “Nearest neighbor” meaningful?]]></title><description><![CDATA[ 
 <br><br>Kevin Beyer, Jonathan Goldstein, Raghu Ramakrishnan, Uri Shaft (1999)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:Kevin-Beyer" class="tag" target="_blank" rel="noopener nofollow">#Kevin-Beyer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Jonathan-Goldstein" class="tag" target="_blank" rel="noopener nofollow">#Jonathan-Goldstein</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Raghu-Ramakrishnan" class="tag" target="_blank" rel="noopener nofollow">#Raghu-Ramakrishnan</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Uri-Shaft" class="tag" target="_blank" rel="noopener nofollow">#Uri-Shaft</a> <a href="https://www.jayitha.github.io/Notes?query=tag:reading" class="tag" target="_blank" rel="noopener nofollow">#reading</a><br>Abstract
We explore the effect of dimensionality on the “nearest neighbor” problem. We show that under a broad set of conditions (much broader than independent and identically distributed dimensions), as dimensionality increases, the distance to the nearest data point approaches the distance to the farthest data point. To provide a practical perspective, we present empirical results on both real and synthetic data sets that demonstrate that this effect can occur for as few as 10–15 dimensions. These results should not be interpreted to mean that high-dimensional indexing is never meaningful; we illustrate this point by identifying some high-dimensional workloads for which this effect does not occur. However, our results do emphasize that the methodology used almost universally in the database literature to evaluate high-dimensional indexing techniques is flawed, and should be modified. In particular, most such techniques proposed in the literature are not evaluated versus simple linear scan, and are evaluated over workloads for which nearest neighbor is not meaningful. Often, even the reported experiments, when analyzed carefully, show that linear scan would outperform the techniques being proposed on the workloads studied in high (10–15) dimensionality!
<br>
<br><a data-href="Unstable Nearest Neighbor Query" href="https://www.jayitha.github.io/Notes/Unstable Nearest Neighbor Query" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unstable Nearest Neighbor Query</a><a data-href="Unstable Nearest Neighbor Query" href="https://www.jayitha.github.io/Notes/glossary/unstable-nearest-neighbor-query.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unstable Nearest Neighbor Query</a>
<br><a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/Converges in Probability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Converges in Probability</a><a data-href="Converges in Probability" href="https://www.jayitha.github.io/Notes/glossary/converges-in-probability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Converges in Probability</a>
<br><a data-href="Slutsky's Theorem" href="https://www.jayitha.github.io/Notes/Slutsky's Theorem" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Slutsky's Theorem</a><a data-href="Slutsky's Theorem" href="https://www.jayitha.github.io/Notes/glossary/slutsky's-theorem.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Slutsky's Theorem</a>
<br><a data-href="Weak Law of Large Numbers" href="https://www.jayitha.github.io/Notes/Weak Law of Large Numbers" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Weak Law of Large Numbers</a><a data-href="Weak Law of Large Numbers" href="https://www.jayitha.github.io/Notes/glossary/weak-law-of-large-numbers.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Weak Law of Large Numbers</a>
<br>Notation:<br><br>Instability Result
If<br>
Then for every <br>

<br>If the distance distribution behaves a certain way as  increases (which is apparently common), then according to the <a data-tooltip-position="top" aria-label="^1318ad" data-href="#^1318ad" href="https://www.jayitha.github.io/Notes/about:blank#^1318ad" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Instability Result</a><a data-tooltip-position="top" aria-label="^1318ad" data-href="#^1318ad" href="https://www.jayitha.github.io/Notes/about:blank#^1318ad" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Instability Result</a>, all points converge to the same distance from the query point<br>Posted question <a data-tooltip-position="top" aria-label="https://hackmd.io/@PjzB85_5Tum5GEZrVPegjw/BJZVZhrRp" rel="noopener nofollow" class="external-link" href="https://hackmd.io/@PjzB85_5Tum5GEZrVPegjw/BJZVZhrRp" target="_blank">here</a>]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html</link><guid isPermaLink="false">Literature Notes/beyer1999nearest.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Will carbon nanotube memory replace DRAM?]]></title><description><![CDATA[ 
 <br><br>Bill Gervasi (2019)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Bill-Gervasi" class="tag" target="_blank" rel="noopener nofollow">#Bill-Gervasi</a><br>Abstract
In this paper, we discuss an exciting memory technology made from carbon nanotubes. Carbon nanotubes provide a predictable resistive element that can be used to fabricate very dense and very fast-switching memory cells. Nantero NRAM employs electrostatic forces to connect and disconnect these nanotubes in a memory design notably impervious to external effects including heat, shock and vibration, magnetism, and radiation. NRAM maintains its state permanently and may be rewritten arbitrarily many times without degrading. Not only NRAM is well positioned to replace DRAM in existing applications, but also its combination of high speed, persistence, density, and low power enables a slew of exciting new applications. Production of NRAM devices is on track for near-term commercialization through Nantero licensees.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/gervasi2019will.html</link><guid isPermaLink="false">Literature Notes/gervasi2019will.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Writing reviews for systems conferences]]></title><description><![CDATA[ 
 <br><br>Timothy Roscoe (2007)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Timothy-Roscoe" class="tag" target="_blank" rel="noopener nofollow">#Timothy-Roscoe</a><br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/roscoe2007writing.html</link><guid isPermaLink="false">Literature Notes/roscoe2007writing.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Xen and the art of virtualization]]></title><description><![CDATA[ 
 <br><br>Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, Andrew Warfield (2003)<br>Tags: <a href="https://www.jayitha.github.io/Notes?query=tag:to-read" class="tag" target="_blank" rel="noopener nofollow">#to-read</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Paul-Barham" class="tag" target="_blank" rel="noopener nofollow">#Paul-Barham</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Boris-Dragovic" class="tag" target="_blank" rel="noopener nofollow">#Boris-Dragovic</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Keir-Fraser" class="tag" target="_blank" rel="noopener nofollow">#Keir-Fraser</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Steven-Hand" class="tag" target="_blank" rel="noopener nofollow">#Steven-Hand</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Tim-Harris" class="tag" target="_blank" rel="noopener nofollow">#Tim-Harris</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Alex-Ho" class="tag" target="_blank" rel="noopener nofollow">#Alex-Ho</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Rolf-Neugebauer" class="tag" target="_blank" rel="noopener nofollow">#Rolf-Neugebauer</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Ian-Pratt" class="tag" target="_blank" rel="noopener nofollow">#Ian-Pratt</a> <a href="https://www.jayitha.github.io/Notes?query=tag:Andrew-Warfield" class="tag" target="_blank" rel="noopener nofollow">#Andrew-Warfield</a><br>Abstract
Numerous systems have been designed which use virtualization to subdivide the ample resources of a modern computer. Some require specialized hardware, or cannot support commodity operating systems. Some target 100% binary compatibility at the expense of performance. Others sacrifice security or functionality for speed. Few offer resource isolation or performance guarantees; most provide only best-effort provisioning, risking denial of service.This paper presents Xen, an x86 virtual machine monitor which allows multiple commodity operating systems to share conventional hardware in a safe and resource managed fashion, but without sacrificing either performance or functionality. This is achieved by providing an idealized virtual machine abstraction to which operating systems such as Linux, BSD and Windows XP, can be ported with minimal effort.Our design is targeted at hosting up to 100 virtual machine instances simultaneously on a modern server. The virtualization approach taken by Xen is extremely efficient: we allow operating systems such as Linux and Windows XP to be hosted simultaneously for a negligible performance overhead — at most a few percent compared with the unvirtualized case. We considerably outperform competing commercial and freely available solutions in a range of microbenchmarks and system-wide tests.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/barham2003xen.html</link><guid isPermaLink="false">Literature Notes/barham2003xen.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Spark: Cluster computing with working sets]]></title><description><![CDATA[ 
 <br><br>Matei Zaharia, Mosharaf Chowdhury, Michael J Franklin, Scott Shenker, Ion Stoica (2010)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/zaharia2010spark.html</link><guid isPermaLink="false">Literature Notes/zaharia2010spark.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Resilient distributed datasets: A {fault-Tolerant} abstraction for {in-Memory} cluster computing]]></title><description><![CDATA[ 
 <br><br>Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma, Murphy McCauly, Michael J Franklin, Scott Shenker, Ion Stoica (2012)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/zaharia2012resilient.html</link><guid isPermaLink="false">Literature Notes/zaharia2012resilient.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[The cloud is not enough: Saving {IoT} from the cloud]]></title><description><![CDATA[ 
 <br><br>Ben Zhang, Nitesh Mor, John Kolb, Douglas S Chan, Ken Lutz, Eric Allman, John Wawrzynek, Edward Lee, John Kubiatowicz (2015)<br>Tags: <br>Abstract
The Internet of Things (IoT) represents a new class of applications that can benefit from cloud infrastructure. However, the current approach of directly connecting smart devices to the cloud has a number of disadvantages and is unlikely to keep up with either the growing speed of the IoT or the diverse needs of IoT applications. In this paper we explore these disadvantages and argue that fundamental properties of the IoT prevent the current approach from scaling. What is missing is a wellarchitected system that extends the functionality of the cloud and provides seamless interplay among the heterogeneous components in the IoT space. We argue that raising the level of abstraction to a data-centric design—focused around the distribution, preservation and protection of information—provides a much better match to the IoT.We present early work on such a distributed platform, called the Global Data Plane (GDP), and discuss how it addresses the problems with the cloud-centric architecture.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/zhang2015cloud.html</link><guid isPermaLink="false">Literature Notes/zhang2015cloud.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Tapestry: An infrastructure for fault-tolerant wide-area location and routing]]></title><description><![CDATA[ 
 <br><br>Ben Yanbin Zhao, John Kubiatowicz, Anthony D Joseph, others (2001)<br>Tags: <br>Abstract]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/zhao2001tapestry.html</link><guid isPermaLink="false">Literature Notes/zhao2001tapestry.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Tapestry: A resilient global-scale overlay for service deployment]]></title><description><![CDATA[ 
 <br><br>Ben Y Zhao, Ling Huang, Jeremy Stribling, Sean C Rhea, Anthony D Joseph, John D Kubiatowicz (2004)<br>Tags: <br>Abstract
We present Tapestry, a peer-to-peer overlay routing infrastructure offering efficient, scalable, location-independent routing of messages directly to nearby copies of an object or service using only localized resources. Tapestry supports a generic decentralized object location and routing applications programming interface using a self-repairing, soft-state-based routing layer. The paper presents the Tapestry architecture, algorithms, and implementation. It explores the behavior of a Tapestry deployment on PlanetLab, a global testbed of approximately 100 machines. Experimental results show that Tapestry exhibits stable behavior and performance as an overlay, despite the instability of the underlying network layers. Several widely distributed applications have been implemented on Tapestry, illustrating its utility as a deployment infrastructure.
]]></description><link>https://www.jayitha.github.io/Notes/literature-notes/zhao2004tapestry.html</link><guid isPermaLink="false">Literature Notes/zhao2004tapestry.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Topic 1 - Data Models and Query Languages]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/Unit 1 - SQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Unit 1 - SQL</a><a data-href="Unit 1 - SQL" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Unit 1 - SQL</a>
<br>]]></description><link>https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer&apos;s-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/topic-1-data-models-and-query-languages.html</link><guid isPermaLink="false">Streams/Wolfgang Gatterbauer&apos;s CS 7240 Principles of Scalable Data Management/Topic 1 - Data Models and Query Languages/Topic 1 - Data Models and Query Languages.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Unit 1 - SQL]]></title><description><![CDATA[ 
 <br><br><a data-href="Excel" href="https://www.jayitha.github.io/Notes/Excel" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Excel</a><a data-href="Excel" href="https://www.jayitha.github.io/Notes/glossary/excel.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Excel</a><br>
<a data-href="PostgreSQL" href="https://www.jayitha.github.io/Notes/PostgreSQL" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">PostgreSQL</a><a data-href="PostgreSQL" href="https://www.jayitha.github.io/Notes/glossary/postgresql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">PostgreSQL</a><br>
<a data-href="Bag Semantics" href="https://www.jayitha.github.io/Notes/Bag Semantics" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Bag Semantics</a><a data-href="Bag Semantics" href="https://www.jayitha.github.io/Notes/glossary/bag-semantics.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Bag Semantics</a><br>
<a data-href="Distinct" href="https://www.jayitha.github.io/Notes/Distinct" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Distinct</a><a data-href="Distinct" href="https://www.jayitha.github.io/Notes/glossary/distinct.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Distinct</a><br>
<a data-href="Semantics of a SQL Query" href="https://www.jayitha.github.io/Notes/Semantics of a SQL Query" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Semantics of a SQL Query</a><a data-href="Semantics of a SQL Query" href="https://www.jayitha.github.io/Notes/glossary/semantics-of-a-sql-query.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Semantics of a SQL Query</a><br>
<a data-href="Nested Queries" href="https://www.jayitha.github.io/Notes/Nested Queries" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Nested Queries</a><a data-href="Nested Queries" href="https://www.jayitha.github.io/Notes/glossary/nested-queries.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Nested Queries</a><br>
<a data-href="Common Table Expressions" href="https://www.jayitha.github.io/Notes/Common Table Expressions" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Common Table Expressions</a><a data-href="Common Table Expressions" href="https://www.jayitha.github.io/Notes/glossary/common-table-expressions.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Common Table Expressions</a><br>
<a data-href="Correlated Nested Queries" href="https://www.jayitha.github.io/Notes/Correlated Nested Queries" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Correlated Nested Queries</a><a data-href="Correlated Nested Queries" href="https://www.jayitha.github.io/Notes/glossary/correlated-nested-queries.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Correlated Nested Queries</a><br>
<a data-href="Monotone Queries" href="https://www.jayitha.github.io/Notes/Monotone Queries" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Monotone Queries</a><a data-href="Monotone Queries" href="https://www.jayitha.github.io/Notes/glossary/monotone-queries.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Monotone Queries</a><br>
<a data-tooltip-position="top" aria-label="Relational Diagrams" data-href="Relational Diagrams" href="https://www.jayitha.github.io/Notes/Relational Diagrams" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">SQL Patterns and Relational Diagrams</a><a data-tooltip-position="top" aria-label="Relational Diagrams" data-href="Relational Diagrams" href="https://www.jayitha.github.io/Notes/glossary/relational-diagrams.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">SQL Patterns and Relational Diagrams</a><br>
<a data-href="Union" href="https://www.jayitha.github.io/Notes/Union" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Union</a><a data-href="Union" href="https://www.jayitha.github.io/Notes/glossary/union.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Union</a><br>
<a data-href="Null" href="https://www.jayitha.github.io/Notes/Null" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Null</a><a data-href="Null" href="https://www.jayitha.github.io/Notes/glossary/null.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Null</a><br>
<a data-href="Join Types" href="https://www.jayitha.github.io/Notes/Join Types" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Join Types</a><a data-href="Join Types" href="https://www.jayitha.github.io/Notes/glossary/join-types.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Join Types</a><br>
<a data-href="Coalesce" href="https://www.jayitha.github.io/Notes/Coalesce" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Coalesce</a><a data-href="Coalesce" href="https://www.jayitha.github.io/Notes/glossary/coalesce.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Coalesce</a><br>
<a data-href="Commutativity &amp; Associativity" href="https://www.jayitha.github.io/Notes/Commutativity &amp; Associativity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Commutativity &amp; Associativity</a><a data-href="Commutativity &amp; Associativity" href="https://www.jayitha.github.io/Notes/glossary/commutativity-&amp;-associativity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Commutativity &amp; Associativity</a><br>
<a data-href="Matrix Chain Multiplication" href="https://www.jayitha.github.io/Notes/Matrix Chain Multiplication" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Matrix Chain Multiplication</a><a data-href="Matrix Chain Multiplication" href="https://www.jayitha.github.io/Notes/glossary/matrix-chain-multiplication.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Matrix Chain Multiplication</a><br>
<a data-href="Full Disjunction" href="https://www.jayitha.github.io/Notes/Full Disjunction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Full Disjunction</a><a data-href="Full Disjunction" href="https://www.jayitha.github.io/Notes/glossary/full-disjunction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Full Disjunction</a><br>
<a data-href="Top-k Query" href="https://www.jayitha.github.io/Notes/Top-k Query" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Top-k Query</a><a data-href="Top-k Query" href="https://www.jayitha.github.io/Notes/glossary/top-k-query.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Top-k Query</a><br><br>Are the following two queries the same<br>--- QUery 1
SELECT DISTINCT c.cname
FROM company c
WHERE c.cid NOT IN (
	SELECT p.cid
	FROM product p
	WHERE p.price &gt;= 25
)

-- Query 2
SELECT c.cname
FROM company c, product p
WHERE c.cid = p.pid
GROUP BY c.cname
HAVING MAX(p.price) &lt; 25
<br>?<br>
No. The former would also return companies that produce no products whereas the latter will only return a company if a it produces at least one product<br>[Universal Quantifiers and Nested Queries]<br>
While existential quantifier queries like "find all companies that make some products below 25" can be "unnested", universal quantifiers are like "find all companies that make all parts below 25" harder<br>--- Try 1 - NOT IN
SELECT c.cname
FROM company c
WHERE c.cid NOT IN (
	SELECT p.pid
	FROM product p
	WHERE p.price &gt;= 25
)

--- NOT EXISTS
SELECT c.cname
FROM company c
WHERE NOT EXISTS (
	SELECT *
	FROM product p
	WHERE p.cid = c.cid
	AND p.price &gt;= 25
)

--- ALL
SELECT c.cname
FROM company c
WHERE 25 &gt; ALL (
	SELECT p.price
	FROM product p
	WHERE p.cid = c.cid
)

-- GROUP BY
SELECT DISTINCT c.cname
FROM company c JOIN product p 
ON p.cid = c.cid
GROUP BY c.cid
HAVING MAX(p.price) &lt; 25;
<br>Can you unnest the universal quantifier query without using group by?<br>
?<br>
No. Queries with universal quantifier are not monotonic.<br><br>
<br>PostgreSQL and pgAdmin set up
<br><a data-href="forta2019sql" href="https://www.jayitha.github.io/Notes/forta2019sql" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">forta2019sql</a><a data-href="forta2019sql" href="https://www.jayitha.github.io/Notes/literature-notes/forta2019sql.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">forta2019sql</a>
<br><a data-href="van2019anytime" href="https://www.jayitha.github.io/Notes/van2019anytime" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">van2019anytime</a><a data-href="van2019anytime" href="https://www.jayitha.github.io/Notes/literature-notes/van2019anytime.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">van2019anytime</a>
<br><a data-href="gatterbauer2024reasonable" href="https://www.jayitha.github.io/Notes/gatterbauer2024reasonable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gatterbauer2024reasonable</a><a data-href="gatterbauer2024reasonable" href="https://www.jayitha.github.io/Notes/literature-notes/gatterbauer2024reasonable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gatterbauer2024reasonable</a>
<br><a data-href="danaparamita2011queryviz" href="https://www.jayitha.github.io/Notes/danaparamita2011queryviz" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">danaparamita2011queryviz</a><a data-href="danaparamita2011queryviz" href="https://www.jayitha.github.io/Notes/literature-notes/danaparamita2011queryviz.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">danaparamita2011queryviz</a>
<br><a data-href="gatterbauer2022principles" href="https://www.jayitha.github.io/Notes/gatterbauer2022principles" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gatterbauer2022principles</a><a data-href="gatterbauer2022principles" href="https://www.jayitha.github.io/Notes/literature-notes/gatterbauer2022principles.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gatterbauer2022principles</a>
<br><a data-href="ramakrishnan2002database" href="https://www.jayitha.github.io/Notes/ramakrishnan2002database" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ramakrishnan2002database</a><a data-href="ramakrishnan2002database" href="https://www.jayitha.github.io/Notes/literature-notes/ramakrishnan2002database.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ramakrishnan2002database</a> - Ch 3 &amp; 5
<br><a data-href="garcia2008database" href="https://www.jayitha.github.io/Notes/garcia2008database" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">garcia2008database</a><a data-href="garcia2008database" href="https://www.jayitha.github.io/Notes/literature-notes/garcia2008database.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">garcia2008database</a> - Ch 6
<br><a data-href="elmasri2016fundamentals" href="https://www.jayitha.github.io/Notes/elmasri2016fundamentals" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">elmasri2016fundamentals</a><a data-href="elmasri2016fundamentals" href="https://www.jayitha.github.io/Notes/literature-notes/elmasri2016fundamentals.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">elmasri2016fundamentals</a> - Ch 6
<br><a data-href="silberschatz2005database" href="https://www.jayitha.github.io/Notes/silberschatz2005database" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">silberschatz2005database</a><a data-href="silberschatz2005database" href="https://www.jayitha.github.io/Notes/literature-notes/silberschatz2005database.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">silberschatz2005database</a> - Ch 3.8
]]></description><link>https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer&apos;s-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/unit-1-sql.html</link><guid isPermaLink="false">Streams/Wolfgang Gatterbauer&apos;s CS 7240 Principles of Scalable Data Management/Topic 1 - Data Models and Query Languages/Unit 1 - SQL.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management]]></title><description><![CDATA[ 
 <br>theory, algorithms and database systems<br>
<a data-tooltip-position="top" aria-label="https://northeastern-datalab.github.io/cs7240/sp24/calendar.html" rel="noopener nofollow" class="external-link" href="https://northeastern-datalab.github.io/cs7240/sp24/calendar.html" target="_blank">Link</a><br>
<br>Topic 1 - Data Models and Query Languages

<br>Unit 1 - SQL
<br>Unit 2 - Logic &amp; Relational Calculus
<br>Unit 3 - Relational Algebra and Codd's Theorem
<br>Unit 4 - Datalog &amp; Answer Set Programming
<br>Unit 5 - Alternate Data Models


<br>Topic 2 - Complexity of Query Evaluation and Reverse Data Management
<br><br>
<br><a class="original-internal-link" data-href="./Topic 1 - Data Models and Query Languages/Topic 1 - Data Models and Query Languages.md" href="https://www.jayitha.github.io/Notes/Topic 1 - Data Models and Query Languages/Topic 1 - Data Models and Query Languages" target="_blank" rel="noopener nofollow" style="display: none;">Topic 1 - Data Models and Query Languages</a><a class="internal-link mathLink-internal-link" data-href="./Topic 1 - Data Models and Query Languages/Topic 1 - Data Models and Query Languages.md" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/topic-1-data-models-and-query-languages/topic-1-data-models-and-query-languages.html" target="_self" rel="noopener nofollow">Topic 1 - Data Models and Query Languages</a>
<br>]]></description><link>https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer&apos;s-cs-7240-principles-of-scalable-data-management/wolfgang-gatterbauer&apos;s-cs-7240-principles-of-scalable-data-management.html</link><guid isPermaLink="false">Streams/Wolfgang Gatterbauer&apos;s CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer&apos;s CS 7240 Principles of Scalable Data Management.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Blogs]]></title><description><![CDATA[ 
 <br><a rel="noopener nofollow" class="external-link" href="https://blog.burntsushi.net" target="_blank">https://blog.burntsushi.net</a><br>
<a rel="noopener nofollow" class="external-link" href="https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/" target="_blank">https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/</a>]]></description><link>https://www.jayitha.github.io/Notes/streams/blogs.html</link><guid isPermaLink="false">Streams/Blogs.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://rmarcus.info/syllabi/Penn_CIS6500_F23.pdf" rel="noopener nofollow" class="external-link" href="https://rmarcus.info/syllabi/Penn_CIS6500_F23.pdf" target="_blank">Link to Syllabus</a><br><br>Key question: how do column stores take advantage of compression?<br>
<a data-href="abadi2006integrating" href="https://www.jayitha.github.io/Notes/abadi2006integrating" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abadi2006integrating</a><a data-href="abadi2006integrating" href="https://www.jayitha.github.io/Notes/literature-notes/abadi2006integrating.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abadi2006integrating</a><br>Key question: how much, if any, of the advantages of column stores can we get from a row store?<br>
<a data-href="abadi2008column" href="https://www.jayitha.github.io/Notes/abadi2008column" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abadi2008column</a><a data-href="abadi2008column" href="https://www.jayitha.github.io/Notes/literature-notes/abadi2008column.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abadi2008column</a><br><br>Key question: how does one decompose a query execution plan into compile-able steps? What benefit does this bring?<br>
<a data-href="neumann2011efficiently" href="https://www.jayitha.github.io/Notes/neumann2011efficiently" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">neumann2011efficiently</a><a data-href="neumann2011efficiently" href="https://www.jayitha.github.io/Notes/literature-notes/neumann2011efficiently.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">neumann2011efficiently</a><br>Key question: compare and contrast compiled and vectorized execution engines. What are the pros and cons of each?<br>
<a data-href="kersten2018everything" href="https://www.jayitha.github.io/Notes/kersten2018everything" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kersten2018everything</a><a data-href="kersten2018everything" href="https://www.jayitha.github.io/Notes/literature-notes/kersten2018everything.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kersten2018everything</a><br><br>Key question: how dose the design of index structures change when we consider caching?<br>
<a data-href="rao2000making" href="https://www.jayitha.github.io/Notes/rao2000making" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rao2000making</a><a data-href="rao2000making" href="https://www.jayitha.github.io/Notes/literature-notes/rao2000making.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rao2000making</a><br>Key question: what is a column sketch, and how is it uniquely suited for column-oriented analytics databases?<br>
<a data-href="hentschel2018column" href="https://www.jayitha.github.io/Notes/hentschel2018column" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hentschel2018column</a><a data-href="hentschel2018column" href="https://www.jayitha.github.io/Notes/literature-notes/hentschel2018column.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hentschel2018column</a><br>Key question: can statistical or learned models lead to improved index structures? If so, what is it about learned models that make performance better or worse?<br>
<a data-href="kraska2018case" href="https://www.jayitha.github.io/Notes/kraska2018case" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kraska2018case</a><a data-href="kraska2018case" href="https://www.jayitha.github.io/Notes/literature-notes/kraska2018case.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kraska2018case</a> <a data-href="marcus2020benchmarking" href="https://www.jayitha.github.io/Notes/marcus2020benchmarking" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">marcus2020benchmarking</a><a data-href="marcus2020benchmarking" href="https://www.jayitha.github.io/Notes/literature-notes/marcus2020benchmarking.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">marcus2020benchmarking</a><br>Key question: how do you design a workload-aware index for queries with predicates on multiple columns? Why can’t you just use multiple single-column indexes?<br>
<a data-href="nathan2020learning" href="https://www.jayitha.github.io/Notes/nathan2020learning" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">nathan2020learning</a><a data-href="nathan2020learning" href="https://www.jayitha.github.io/Notes/literature-notes/nathan2020learning.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">nathan2020learning</a><br><br>Key question: what are the main problems with naive sort-merge-join? How can the algorithm be improved?<br>
<a data-href="albutiu2012massively" href="https://www.jayitha.github.io/Notes/albutiu2012massively" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">albutiu2012massively</a><a data-href="albutiu2012massively" href="https://www.jayitha.github.io/Notes/literature-notes/albutiu2012massively.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">albutiu2012massively</a><br>Key question: what are the techniques and algorithms that make hash joins work well? Are there specific conditions or requirements for a hash join to have good performance?<br>
<a data-href="bandle2021partition" href="https://www.jayitha.github.io/Notes/bandle2021partition" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bandle2021partition</a><a data-href="bandle2021partition" href="https://www.jayitha.github.io/Notes/literature-notes/bandle2021partition.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bandle2021partition</a><br>Key question: can statistical or learned techniques improve something as fundamental as a sorting algorithm?<br>
<a data-href="kristo2020case" href="https://www.jayitha.github.io/Notes/kristo2020case" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kristo2020case</a><a data-href="kristo2020case" href="https://www.jayitha.github.io/Notes/literature-notes/kristo2020case.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kristo2020case</a><br>Key question: is there any advantage to using a learned function as a hash function?<br>
<a data-href="sabek2022can" href="https://www.jayitha.github.io/Notes/sabek2022can" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">sabek2022can</a><a data-href="sabek2022can" href="https://www.jayitha.github.io/Notes/literature-notes/sabek2022can.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">sabek2022can</a><br>Key question: even if we have a really good hash join, if we order the joins incorrectly, the query will still be slow. Is there another way?<br>
<a data-href="freitag2020adopting" href="https://www.jayitha.github.io/Notes/freitag2020adopting" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">freitag2020adopting</a><a data-href="freitag2020adopting" href="https://www.jayitha.github.io/Notes/literature-notes/freitag2020adopting.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">freitag2020adopting</a><br><br>Key question: what is the “state of the art” in query optimization today? Where do current query optimizers struggle?<br>
<a data-href="leis2015good" href="https://www.jayitha.github.io/Notes/leis2015good" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">leis2015good</a><a data-href="leis2015good" href="https://www.jayitha.github.io/Notes/literature-notes/leis2015good.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">leis2015good</a><br>Key question: how can learned models help improve cardinality estimation? What are the advantages and disadvantages?<br>
<a data-href="kipf2018learned" href="https://www.jayitha.github.io/Notes/kipf2018learned" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kipf2018learned</a><a data-href="kipf2018learned" href="https://www.jayitha.github.io/Notes/literature-notes/kipf2018learned.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kipf2018learned</a><br>Key question: these query optimizers sure seem complicated! Can we get the computer to just learn a model for us?<br>
<a data-href="yang2022balsa" href="https://www.jayitha.github.io/Notes/yang2022balsa" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">yang2022balsa</a><a data-href="yang2022balsa" href="https://www.jayitha.github.io/Notes/literature-notes/yang2022balsa.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">yang2022balsa</a> <a data-href="marcus2019neo" href="https://www.jayitha.github.io/Notes/marcus2019neo" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">marcus2019neo</a><a data-href="marcus2019neo" href="https://www.jayitha.github.io/Notes/literature-notes/marcus2019neo.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">marcus2019neo</a><br>Key question: if techniques like Balsa have a high potential for failure, are there more practical, less error prone ways to improve a query optimizer with learning?<br>
<a data-href="marcus2021bao" href="https://www.jayitha.github.io/Notes/marcus2021bao" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">marcus2021bao</a><a data-href="marcus2021bao" href="https://www.jayitha.github.io/Notes/literature-notes/marcus2021bao.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">marcus2021bao</a><br>Key question: if an optimizer is going to see the same query many times, what techniques can we use to get better performance than simply running a traditional query optimization algorithm each time?<br>
<a data-href="doshi2023kepler" href="https://www.jayitha.github.io/Notes/doshi2023kepler" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">doshi2023kepler</a><a data-href="doshi2023kepler" href="https://www.jayitha.github.io/Notes/literature-notes/doshi2023kepler.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">doshi2023kepler</a><br>Key question: most query optimizers pick a query plan and then ship that plan off to the executor. What if we mixed together query planning and query execution? What are the advantages and disadvantages?<br>
<a data-href="avnur2000eddies" href="https://www.jayitha.github.io/Notes/avnur2000eddies" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">avnur2000eddies</a><a data-href="avnur2000eddies" href="https://www.jayitha.github.io/Notes/literature-notes/avnur2000eddies.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">avnur2000eddies</a><br>Key question: query optimization is only a small part of the puzzle of making a “smart” database. What other challenges and potential for automation exists?<br>
<a data-href="pavlo2017self" href="https://www.jayitha.github.io/Notes/pavlo2017self" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pavlo2017self</a><a data-href="pavlo2017self" href="https://www.jayitha.github.io/Notes/literature-notes/pavlo2017self.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pavlo2017self</a>]]></description><link>https://www.jayitha.github.io/Notes/streams/ryan-marcus&apos;-cis-6500-–-advanced-topics-in-database-systems.html</link><guid isPermaLink="false">Streams/Ryan Marcus&apos; CIS 6500 – Advanced Topics in Database Systems.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Streams]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="Blogs" href="https://www.jayitha.github.io/Notes/Blogs" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Blogs</a><a data-href="Blogs" href="https://www.jayitha.github.io/Notes/streams/blogs.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Blogs</a>
<br><a data-href="Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems" href="https://www.jayitha.github.io/Notes/Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems</a><a data-href="Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems" href="https://www.jayitha.github.io/Notes/streams/ryan-marcus'-cis-6500-–-advanced-topics-in-database-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems</a>
<br><a data-href="UC Berkeley's CS264a - Advanced Topics in Computer Systems" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS264a - Advanced Topics in Computer Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS264a - Advanced Topics in Computer Systems</a><a data-href="UC Berkeley's CS264a - Advanced Topics in Computer Systems" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs264a-advanced-topics-in-computer-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS264a - Advanced Topics in Computer Systems</a>
<br><a data-href="UC Berkeley's CS286 - Graduate Database Systems" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS286 - Graduate Database Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS286 - Graduate Database Systems</a><a data-href="UC Berkeley's CS286 - Graduate Database Systems" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs286-graduate-database-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS286 - Graduate Database Systems</a>
<br><a data-href="UC Berkeley's CS294-248 - Topics in Database Theory" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS294-248 - Topics in Database Theory" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS294-248 - Topics in Database Theory</a><a data-href="UC Berkeley's CS294-248 - Topics in Database Theory" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs294-248-topics-in-database-theory.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS294-248 - Topics in Database Theory</a>
<br><a class="original-internal-link" data-href="./Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management.md" href="https://www.jayitha.github.io/Notes/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management" target="_blank" rel="noopener nofollow" style="display: none;">Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management</a><a class="internal-link mathLink-internal-link" data-href="./Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management.md" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management.html" target="_self" rel="noopener nofollow">Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management</a>
<br><br><a rel="noopener nofollow" class="external-link" href="https://drive.google.com/drive/folders/18cl8LeHuncPgO0Cu3oBgYs_Elg1kdVd9" target="_blank">https://drive.google.com/drive/folders/18cl8LeHuncPgO0Cu3oBgYs_Elg1kdVd9</a>]]></description><link>https://www.jayitha.github.io/Notes/streams/streams.html</link><guid isPermaLink="false">Streams/Streams.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[UC Berkeley's CS264a - Advanced Topics in Computer Systems]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://people.eecs.berkeley.edu/~kubitron/courses/cs262a-F23/index.html" rel="noopener nofollow" class="external-link" href="https://people.eecs.berkeley.edu/~kubitron/courses/cs262a-F23/index.html" target="_blank">Link to course website</a><br>
<br><a data-href="ritchie1978unix" href="https://www.jayitha.github.io/Notes/ritchie1978unix" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ritchie1978unix</a><a data-href="ritchie1978unix" href="https://www.jayitha.github.io/Notes/literature-notes/ritchie1978unix.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ritchie1978unix</a>
<br><a data-href="saltzer1984end" href="https://www.jayitha.github.io/Notes/saltzer1984end" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">saltzer1984end</a><a data-href="saltzer1984end" href="https://www.jayitha.github.io/Notes/literature-notes/saltzer1984end.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">saltzer1984end</a>
<br><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/chamberlin1981history" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chamberlin1981history</a><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1981history.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chamberlin1981history</a>
<br><a data-href="hellerstein2007architecture" href="https://www.jayitha.github.io/Notes/hellerstein2007architecture" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellerstein2007architecture</a><a data-href="hellerstein2007architecture" href="https://www.jayitha.github.io/Notes/literature-notes/hellerstein2007architecture.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellerstein2007architecture</a>
<br><a data-href="stonebraker1976design" href="https://www.jayitha.github.io/Notes/stonebraker1976design" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stonebraker1976design</a><a data-href="stonebraker1976design" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker1976design.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stonebraker1976design</a>
<br><a data-href="mckusick1984fast" href="https://www.jayitha.github.io/Notes/mckusick1984fast" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mckusick1984fast</a><a data-href="mckusick1984fast" href="https://www.jayitha.github.io/Notes/literature-notes/mckusick1984fast.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mckusick1984fast</a>
<br><a data-href="prabhakaran2005analysis" href="https://www.jayitha.github.io/Notes/prabhakaran2005analysis" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">prabhakaran2005analysis</a><a data-href="prabhakaran2005analysis" href="https://www.jayitha.github.io/Notes/literature-notes/prabhakaran2005analysis.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">prabhakaran2005analysis</a>
<br><a data-href="rosenblum1992design" href="https://www.jayitha.github.io/Notes/rosenblum1992design" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rosenblum1992design</a><a data-href="rosenblum1992design" href="https://www.jayitha.github.io/Notes/literature-notes/rosenblum1992design.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rosenblum1992design</a>
<br><a data-href="wilkes1996hp" href="https://www.jayitha.github.io/Notes/wilkes1996hp" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">wilkes1996hp</a><a data-href="wilkes1996hp" href="https://www.jayitha.github.io/Notes/literature-notes/wilkes1996hp.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">wilkes1996hp</a>
<br><a data-href="patterson1988case" href="https://www.jayitha.github.io/Notes/patterson1988case" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">patterson1988case</a><a data-href="patterson1988case" href="https://www.jayitha.github.io/Notes/literature-notes/patterson1988case.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">patterson1988case</a>
<br><a data-href="beaver2010finding" href="https://www.jayitha.github.io/Notes/beaver2010finding" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">beaver2010finding</a><a data-href="beaver2010finding" href="https://www.jayitha.github.io/Notes/literature-notes/beaver2010finding.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">beaver2010finding</a>
<br><a data-href="sweeney1996scalability" href="https://www.jayitha.github.io/Notes/sweeney1996scalability" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">sweeney1996scalability</a><a data-href="sweeney1996scalability" href="https://www.jayitha.github.io/Notes/literature-notes/sweeney1996scalability.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">sweeney1996scalability</a>
<br><a data-href="hellwig2009xfs" href="https://www.jayitha.github.io/Notes/hellwig2009xfs" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellwig2009xfs</a><a data-href="hellwig2009xfs" href="https://www.jayitha.github.io/Notes/literature-notes/hellwig2009xfs.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellwig2009xfs</a>
<br><a data-href="lee2015f2fs" href="https://www.jayitha.github.io/Notes/lee2015f2fs" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lee2015f2fs</a><a data-href="lee2015f2fs" href="https://www.jayitha.github.io/Notes/literature-notes/lee2015f2fs.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lee2015f2fs</a>
<br><a data-href="santana2016fast" href="https://www.jayitha.github.io/Notes/santana2016fast" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">santana2016fast</a><a data-href="santana2016fast" href="https://www.jayitha.github.io/Notes/literature-notes/santana2016fast.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">santana2016fast</a>
<br><a data-href="park2008reconfigurable" href="https://www.jayitha.github.io/Notes/park2008reconfigurable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">park2008reconfigurable</a><a data-href="park2008reconfigurable" href="https://www.jayitha.github.io/Notes/literature-notes/park2008reconfigurable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">park2008reconfigurable</a>
<br><a data-href="gervasi2019will" href="https://www.jayitha.github.io/Notes/gervasi2019will" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gervasi2019will</a><a data-href="gervasi2019will" href="https://www.jayitha.github.io/Notes/literature-notes/gervasi2019will.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gervasi2019will</a>
<br>

<br><a data-href="gray1976granularity" href="https://www.jayitha.github.io/Notes/gray1976granularity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gray1976granularity</a><a data-href="gray1976granularity" href="https://www.jayitha.github.io/Notes/literature-notes/gray1976granularity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gray1976granularity</a>


<br><a data-href="berenson1995critique" href="https://www.jayitha.github.io/Notes/berenson1995critique" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">berenson1995critique</a><a data-href="berenson1995critique" href="https://www.jayitha.github.io/Notes/literature-notes/berenson1995critique.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">berenson1995critique</a>
<br><a data-href="adya2000generalized" href="https://www.jayitha.github.io/Notes/adya2000generalized" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">adya2000generalized</a><a data-href="adya2000generalized" href="https://www.jayitha.github.io/Notes/literature-notes/adya2000generalized.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">adya2000generalized</a>
<br><a data-href="haerder1983principles" href="https://www.jayitha.github.io/Notes/haerder1983principles" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">haerder1983principles</a><a data-href="haerder1983principles" href="https://www.jayitha.github.io/Notes/literature-notes/haerder1983principles.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">haerder1983principles</a>
<br><a data-href="gray1981transaction" href="https://www.jayitha.github.io/Notes/gray1981transaction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gray1981transaction</a><a data-href="gray1981transaction" href="https://www.jayitha.github.io/Notes/literature-notes/gray1981transaction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gray1981transaction</a>
<br><a data-href="mohan1992aries" href="https://www.jayitha.github.io/Notes/mohan1992aries" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mohan1992aries</a><a data-href="mohan1992aries" href="https://www.jayitha.github.io/Notes/literature-notes/mohan1992aries.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mohan1992aries</a>

<br><a data-href="mohan1999repeating" href="https://www.jayitha.github.io/Notes/mohan1999repeating" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mohan1999repeating</a><a data-href="mohan1999repeating" href="https://www.jayitha.github.io/Notes/literature-notes/mohan1999repeating.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mohan1999repeating</a> (Opt)
<br><a data-href="kuo1996model" href="https://www.jayitha.github.io/Notes/kuo1996model" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kuo1996model</a><a data-href="kuo1996model" href="https://www.jayitha.github.io/Notes/literature-notes/kuo1996model.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kuo1996model</a> (Opt)
<br><a data-href="graefe2012survey" href="https://www.jayitha.github.io/Notes/graefe2012survey" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">graefe2012survey</a><a data-href="graefe2012survey" href="https://www.jayitha.github.io/Notes/literature-notes/graefe2012survey.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">graefe2012survey</a> (Opt)


<br><a data-href="sears2009segment" href="https://www.jayitha.github.io/Notes/sears2009segment" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">sears2009segment</a><a data-href="sears2009segment" href="https://www.jayitha.github.io/Notes/literature-notes/sears2009segment.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">sears2009segment</a>
<br><a data-href="satyanarayanan1994lightweight" href="https://www.jayitha.github.io/Notes/satyanarayanan1994lightweight" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">satyanarayanan1994lightweight</a><a data-href="satyanarayanan1994lightweight" href="https://www.jayitha.github.io/Notes/literature-notes/satyanarayanan1994lightweight.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">satyanarayanan1994lightweight</a>
<br><a data-href="letia2009crdts" href="https://www.jayitha.github.io/Notes/letia2009crdts" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">letia2009crdts</a><a data-href="letia2009crdts" href="https://www.jayitha.github.io/Notes/literature-notes/letia2009crdts.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">letia2009crdts</a>

<br><a data-href="shapiro2011conflict" href="https://www.jayitha.github.io/Notes/shapiro2011conflict" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shapiro2011conflict</a><a data-href="shapiro2011conflict" href="https://www.jayitha.github.io/Notes/literature-notes/shapiro2011conflict.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shapiro2011conflict</a> (Opt)


<br><a data-href="bailis2014coordination" href="https://www.jayitha.github.io/Notes/bailis2014coordination" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bailis2014coordination</a><a data-href="bailis2014coordination" href="https://www.jayitha.github.io/Notes/literature-notes/bailis2014coordination.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bailis2014coordination</a>

<br><a data-href="bailis2016scalable" href="https://www.jayitha.github.io/Notes/bailis2016scalable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bailis2016scalable</a><a data-href="bailis2016scalable" href="https://www.jayitha.github.io/Notes/literature-notes/bailis2016scalable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bailis2016scalable</a> (Opt)


<br><a data-href="lamport2019time" href="https://www.jayitha.github.io/Notes/lamport2019time" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lamport2019time</a><a data-href="lamport2019time" href="https://www.jayitha.github.io/Notes/literature-notes/lamport2019time.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lamport2019time</a>
<br><a data-href="adya1995efficient" href="https://www.jayitha.github.io/Notes/adya1995efficient" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">adya1995efficient</a><a data-href="adya1995efficient" href="https://www.jayitha.github.io/Notes/literature-notes/adya1995efficient.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">adya1995efficient</a>
<br><a data-href="waldspurger1994lottery" href="https://www.jayitha.github.io/Notes/waldspurger1994lottery" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">waldspurger1994lottery</a><a data-href="waldspurger1994lottery" href="https://www.jayitha.github.io/Notes/literature-notes/waldspurger1994lottery.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">waldspurger1994lottery</a>

<br><a data-href="welsh2001seda" href="https://www.jayitha.github.io/Notes/welsh2001seda" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">welsh2001seda</a><a data-href="welsh2001seda" href="https://www.jayitha.github.io/Notes/literature-notes/welsh2001seda.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">welsh2001seda</a> (Opt)


<br><a data-href="abeni1998integrating" href="https://www.jayitha.github.io/Notes/abeni1998integrating" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abeni1998integrating</a><a data-href="abeni1998integrating" href="https://www.jayitha.github.io/Notes/literature-notes/abeni1998integrating.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abeni1998integrating</a>

<br><a data-href="goossens2003priority" href="https://www.jayitha.github.io/Notes/goossens2003priority" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">goossens2003priority</a><a data-href="goossens2003priority" href="https://www.jayitha.github.io/Notes/literature-notes/goossens2003priority.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">goossens2003priority</a> (Opt)
<br><a data-href="baruah2002implementing" href="https://www.jayitha.github.io/Notes/baruah2002implementing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">baruah2002implementing</a><a data-href="baruah2002implementing" href="https://www.jayitha.github.io/Notes/literature-notes/baruah2002implementing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">baruah2002implementing</a> (Opt)


<br><a data-href="pan2010composing" href="https://www.jayitha.github.io/Notes/pan2010composing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pan2010composing</a><a data-href="pan2010composing" href="https://www.jayitha.github.io/Notes/literature-notes/pan2010composing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pan2010composing</a>

<br><a data-href="blumofe1995cilk" href="https://www.jayitha.github.io/Notes/blumofe1995cilk" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">blumofe1995cilk</a><a data-href="blumofe1995cilk" href="https://www.jayitha.github.io/Notes/literature-notes/blumofe1995cilk.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">blumofe1995cilk</a>
<br><a data-href="pan2009lithe" href="https://www.jayitha.github.io/Notes/pan2009lithe" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pan2009lithe</a><a data-href="pan2009lithe" href="https://www.jayitha.github.io/Notes/literature-notes/pan2009lithe.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pan2009lithe</a>


<br><a data-href="ghodsi2011dominant" href="https://www.jayitha.github.io/Notes/ghodsi2011dominant" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ghodsi2011dominant</a><a data-href="ghodsi2011dominant" href="https://www.jayitha.github.io/Notes/literature-notes/ghodsi2011dominant.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ghodsi2011dominant</a>

<br><a data-href="demers1989analysis" href="https://www.jayitha.github.io/Notes/demers1989analysis" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">demers1989analysis</a><a data-href="demers1989analysis" href="https://www.jayitha.github.io/Notes/literature-notes/demers1989analysis.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">demers1989analysis</a>


<br><a data-href="bugnion1997disco" href="https://www.jayitha.github.io/Notes/bugnion1997disco" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bugnion1997disco</a><a data-href="bugnion1997disco" href="https://www.jayitha.github.io/Notes/literature-notes/bugnion1997disco.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bugnion1997disco</a>
<br><a data-href="barham2003xen" href="https://www.jayitha.github.io/Notes/barham2003xen" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">barham2003xen</a><a data-href="barham2003xen" href="https://www.jayitha.github.io/Notes/literature-notes/barham2003xen.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">barham2003xen</a>

<br><a data-href="hand2005virtual" href="https://www.jayitha.github.io/Notes/hand2005virtual" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hand2005virtual</a><a data-href="hand2005virtual" href="https://www.jayitha.github.io/Notes/literature-notes/hand2005virtual.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hand2005virtual</a>


<br><a data-href="clark2005live" href="https://www.jayitha.github.io/Notes/clark2005live" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">clark2005live</a><a data-href="clark2005live" href="https://www.jayitha.github.io/Notes/literature-notes/clark2005live.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">clark2005live</a>
<br><a data-href="satyanarayanan2009case" href="https://www.jayitha.github.io/Notes/satyanarayanan2009case" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">satyanarayanan2009case</a><a data-href="satyanarayanan2009case" href="https://www.jayitha.github.io/Notes/literature-notes/satyanarayanan2009case.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">satyanarayanan2009case</a>
<br><a data-href="wolbach2008transient" href="https://www.jayitha.github.io/Notes/wolbach2008transient" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">wolbach2008transient</a><a data-href="wolbach2008transient" href="https://www.jayitha.github.io/Notes/literature-notes/wolbach2008transient.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">wolbach2008transient</a>

<br><a data-href="dunlap2002revirt" href="https://www.jayitha.github.io/Notes/dunlap2002revirt" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">dunlap2002revirt</a><a data-href="dunlap2002revirt" href="https://www.jayitha.github.io/Notes/literature-notes/dunlap2002revirt.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">dunlap2002revirt</a>
<br><a data-href="lagar2009snowflock" href="https://www.jayitha.github.io/Notes/lagar2009snowflock" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lagar2009snowflock</a><a data-href="lagar2009snowflock" href="https://www.jayitha.github.io/Notes/literature-notes/lagar2009snowflock.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lagar2009snowflock</a>


<br><a data-href="ha2017you" href="https://www.jayitha.github.io/Notes/ha2017you" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ha2017you</a><a data-href="ha2017you" href="https://www.jayitha.github.io/Notes/literature-notes/ha2017you.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ha2017you</a>

<br><a data-href="abe2016urgent" href="https://www.jayitha.github.io/Notes/abe2016urgent" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abe2016urgent</a><a data-href="abe2016urgent" href="https://www.jayitha.github.io/Notes/literature-notes/abe2016urgent.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abe2016urgent</a>
<br><a data-href="satyanarayanan2017emergence" href="https://www.jayitha.github.io/Notes/satyanarayanan2017emergence" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">satyanarayanan2017emergence</a><a data-href="satyanarayanan2017emergence" href="https://www.jayitha.github.io/Notes/literature-notes/satyanarayanan2017emergence.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">satyanarayanan2017emergence</a>


<br><a data-href="mor2019global" href="https://www.jayitha.github.io/Notes/mor2019global" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mor2019global</a><a data-href="mor2019global" href="https://www.jayitha.github.io/Notes/literature-notes/mor2019global.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mor2019global</a>

<br><a data-href="mor2016toward" href="https://www.jayitha.github.io/Notes/mor2016toward" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mor2016toward</a><a data-href="mor2016toward" href="https://www.jayitha.github.io/Notes/literature-notes/mor2016toward.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mor2016toward</a>
<br><a data-href="zhang2015cloud" href="https://www.jayitha.github.io/Notes/zhang2015cloud" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">zhang2015cloud</a><a data-href="zhang2015cloud" href="https://www.jayitha.github.io/Notes/literature-notes/zhang2015cloud.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">zhang2015cloud</a>


<br><a data-href="stoica2003chord" href="https://www.jayitha.github.io/Notes/stoica2003chord" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stoica2003chord</a><a data-href="stoica2003chord" href="https://www.jayitha.github.io/Notes/literature-notes/stoica2003chord.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stoica2003chord</a>
<br><a data-href="zhao2004tapestry" href="https://www.jayitha.github.io/Notes/zhao2004tapestry" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">zhao2004tapestry</a><a data-href="zhao2004tapestry" href="https://www.jayitha.github.io/Notes/literature-notes/zhao2004tapestry.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">zhao2004tapestry</a>

<br><a data-href="rhea2004handling" href="https://www.jayitha.github.io/Notes/rhea2004handling" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rhea2004handling</a><a data-href="rhea2004handling" href="https://www.jayitha.github.io/Notes/literature-notes/rhea2004handling.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rhea2004handling</a>
<br><a data-href="zhao2001tapestry" href="https://www.jayitha.github.io/Notes/zhao2001tapestry" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">zhao2001tapestry</a><a data-href="zhao2001tapestry" href="https://www.jayitha.github.io/Notes/literature-notes/zhao2001tapestry.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">zhao2001tapestry</a>
<br><a data-href="rowstron2001pastry" href="https://www.jayitha.github.io/Notes/rowstron2001pastry" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rowstron2001pastry</a><a data-href="rowstron2001pastry" href="https://www.jayitha.github.io/Notes/literature-notes/rowstron2001pastry.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rowstron2001pastry</a>


<br><a data-href="decandia2007dynamo" href="https://www.jayitha.github.io/Notes/decandia2007dynamo" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">decandia2007dynamo</a><a data-href="decandia2007dynamo" href="https://www.jayitha.github.io/Notes/literature-notes/decandia2007dynamo.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">decandia2007dynamo</a>

<br><a data-href="rowstron2001storage" href="https://www.jayitha.github.io/Notes/rowstron2001storage" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rowstron2001storage</a><a data-href="rowstron2001storage" href="https://www.jayitha.github.io/Notes/literature-notes/rowstron2001storage.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rowstron2001storage</a>


<br><a data-href="rhea2003pond" href="https://www.jayitha.github.io/Notes/rhea2003pond" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rhea2003pond</a><a data-href="rhea2003pond" href="https://www.jayitha.github.io/Notes/literature-notes/rhea2003pond.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rhea2003pond</a>

<br><a data-href="kubiatowicz2000oceanstore" href="https://www.jayitha.github.io/Notes/kubiatowicz2000oceanstore" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kubiatowicz2000oceanstore</a><a data-href="kubiatowicz2000oceanstore" href="https://www.jayitha.github.io/Notes/literature-notes/kubiatowicz2000oceanstore.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kubiatowicz2000oceanstore</a>


<br><a data-href="chandra2007paxos" href="https://www.jayitha.github.io/Notes/chandra2007paxos" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chandra2007paxos</a><a data-href="chandra2007paxos" href="https://www.jayitha.github.io/Notes/literature-notes/chandra2007paxos.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chandra2007paxos</a>

<br><a data-href="lamport1998part" href="https://www.jayitha.github.io/Notes/lamport1998part" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lamport1998part</a><a data-href="lamport1998part" href="https://www.jayitha.github.io/Notes/literature-notes/lamport1998part.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lamport1998part</a>
<br><a data-href="lamport2001paxos" href="https://www.jayitha.github.io/Notes/lamport2001paxos" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lamport2001paxos</a><a data-href="lamport2001paxos" href="https://www.jayitha.github.io/Notes/literature-notes/lamport2001paxos.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lamport2001paxos</a>


<br><a data-href="ongaro2014search" href="https://www.jayitha.github.io/Notes/ongaro2014search" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ongaro2014search</a><a data-href="ongaro2014search" href="https://www.jayitha.github.io/Notes/literature-notes/ongaro2014search.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ongaro2014search</a>
<br><a data-href="lamport1982byzantine" href="https://www.jayitha.github.io/Notes/lamport1982byzantine" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lamport1982byzantine</a><a data-href="lamport1982byzantine" href="https://www.jayitha.github.io/Notes/literature-notes/lamport1982byzantine.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lamport1982byzantine</a>
<br><a data-href="castro1999practical" href="https://www.jayitha.github.io/Notes/castro1999practical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">castro1999practical</a><a data-href="castro1999practical" href="https://www.jayitha.github.io/Notes/literature-notes/castro1999practical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">castro1999practical</a>

<br><a data-href="gueta2019sbft" href="https://www.jayitha.github.io/Notes/gueta2019sbft" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">gueta2019sbft</a><a data-href="gueta2019sbft" href="https://www.jayitha.github.io/Notes/literature-notes/gueta2019sbft.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">gueta2019sbft</a>
<br><a data-href="chun2007attested" href="https://www.jayitha.github.io/Notes/chun2007attested" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chun2007attested</a><a data-href="chun2007attested" href="https://www.jayitha.github.io/Notes/literature-notes/chun2007attested.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chun2007attested</a>
<br><a data-href="castro2000proactive" href="https://www.jayitha.github.io/Notes/castro2000proactive" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">castro2000proactive</a><a data-href="castro2000proactive" href="https://www.jayitha.github.io/Notes/literature-notes/castro2000proactive.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">castro2000proactive</a>


<br><a data-href="ghemawat2003google" href="https://www.jayitha.github.io/Notes/ghemawat2003google" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">ghemawat2003google</a><a data-href="ghemawat2003google" href="https://www.jayitha.github.io/Notes/literature-notes/ghemawat2003google.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">ghemawat2003google</a>
<br><a data-href="chang2008bigtable" href="https://www.jayitha.github.io/Notes/chang2008bigtable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chang2008bigtable</a><a data-href="chang2008bigtable" href="https://www.jayitha.github.io/Notes/literature-notes/chang2008bigtable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chang2008bigtable</a>

<br><a data-href="burrows2006chubby" href="https://www.jayitha.github.io/Notes/burrows2006chubby" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">burrows2006chubby</a><a data-href="burrows2006chubby" href="https://www.jayitha.github.io/Notes/literature-notes/burrows2006chubby.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">burrows2006chubby</a>


<br><a data-href="pavlo2009comparison" href="https://www.jayitha.github.io/Notes/pavlo2009comparison" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">pavlo2009comparison</a><a data-href="pavlo2009comparison" href="https://www.jayitha.github.io/Notes/literature-notes/pavlo2009comparison.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">pavlo2009comparison</a>

<br><a data-href="dean2008mapreduce" href="https://www.jayitha.github.io/Notes/dean2008mapreduce" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">dean2008mapreduce</a><a data-href="dean2008mapreduce" href="https://www.jayitha.github.io/Notes/literature-notes/dean2008mapreduce.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">dean2008mapreduce</a>
<br><a data-href="stonebraker2010mapreduce" href="https://www.jayitha.github.io/Notes/stonebraker2010mapreduce" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stonebraker2010mapreduce</a><a data-href="stonebraker2010mapreduce" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker2010mapreduce.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stonebraker2010mapreduce</a>
<br><a data-href="abouzeid2009hadoopdb" href="https://www.jayitha.github.io/Notes/abouzeid2009hadoopdb" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abouzeid2009hadoopdb</a><a data-href="abouzeid2009hadoopdb" href="https://www.jayitha.github.io/Notes/literature-notes/abouzeid2009hadoopdb.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abouzeid2009hadoopdb</a>


<br><a data-href="zaharia2010spark" href="https://www.jayitha.github.io/Notes/zaharia2010spark" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">zaharia2010spark</a><a data-href="zaharia2010spark" href="https://www.jayitha.github.io/Notes/literature-notes/zaharia2010spark.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">zaharia2010spark</a>

<br><a data-href="zaharia2012resilient" href="https://www.jayitha.github.io/Notes/zaharia2012resilient" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">zaharia2012resilient</a><a data-href="zaharia2012resilient" href="https://www.jayitha.github.io/Notes/literature-notes/zaharia2012resilient.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">zaharia2012resilient</a>


<br><a data-href="stonebraker2018c" href="https://www.jayitha.github.io/Notes/stonebraker2018c" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stonebraker2018c</a><a data-href="stonebraker2018c" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker2018c.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stonebraker2018c</a>

<br><a data-href="lamb2012vertica" href="https://www.jayitha.github.io/Notes/lamb2012vertica" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lamb2012vertica</a><a data-href="lamb2012vertica" href="https://www.jayitha.github.io/Notes/literature-notes/lamb2012vertica.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lamb2012vertica</a>
<br><a data-href="abadi2013design" href="https://www.jayitha.github.io/Notes/abadi2013design" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">abadi2013design</a><a data-href="abadi2013design" href="https://www.jayitha.github.io/Notes/literature-notes/abadi2013design.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">abadi2013design</a>
<br><a data-href="bruno2009teaching" href="https://www.jayitha.github.io/Notes/bruno2009teaching" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bruno2009teaching</a><a data-href="bruno2009teaching" href="https://www.jayitha.github.io/Notes/literature-notes/bruno2009teaching.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bruno2009teaching</a>


<br><a data-href="schuhknecht2013uncracked" href="https://www.jayitha.github.io/Notes/schuhknecht2013uncracked" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">schuhknecht2013uncracked</a><a data-href="schuhknecht2013uncracked" href="https://www.jayitha.github.io/Notes/literature-notes/schuhknecht2013uncracked.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">schuhknecht2013uncracked</a>

<br><a data-href="idreos2007database" href="https://www.jayitha.github.io/Notes/idreos2007database" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">idreos2007database</a><a data-href="idreos2007database" href="https://www.jayitha.github.io/Notes/literature-notes/idreos2007database.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">idreos2007database</a>


<br><a data-href="engler1995exokernel" href="https://www.jayitha.github.io/Notes/engler1995exokernel" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">engler1995exokernel</a><a data-href="engler1995exokernel" href="https://www.jayitha.github.io/Notes/literature-notes/engler1995exokernel.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">engler1995exokernel</a>

<br><a data-href="bershad1994spin" href="https://www.jayitha.github.io/Notes/bershad1994spin" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bershad1994spin</a><a data-href="bershad1994spin" href="https://www.jayitha.github.io/Notes/literature-notes/bershad1994spin.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bershad1994spin</a>


<br><a data-href="klein2009sel4" href="https://www.jayitha.github.io/Notes/klein2009sel4" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">klein2009sel4</a><a data-href="klein2009sel4" href="https://www.jayitha.github.io/Notes/literature-notes/klein2009sel4.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">klein2009sel4</a>

<br><a data-href="klein2014comprehensive" href="https://www.jayitha.github.io/Notes/klein2014comprehensive" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">klein2014comprehensive</a><a data-href="klein2014comprehensive" href="https://www.jayitha.github.io/Notes/literature-notes/klein2014comprehensive.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">klein2014comprehensive</a>
<br><a data-href="rashd1991microkernel" href="https://www.jayitha.github.io/Notes/rashd1991microkernel" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rashd1991microkernel</a><a data-href="rashd1991microkernel" href="https://www.jayitha.github.io/Notes/literature-notes/rashd1991microkernel.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rashd1991microkernel</a>
<br><a data-href="liedtke1996toward" href="https://www.jayitha.github.io/Notes/liedtke1996toward" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">liedtke1996toward</a><a data-href="liedtke1996toward" href="https://www.jayitha.github.io/Notes/literature-notes/liedtke1996toward.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">liedtke1996toward</a>


<br><a data-href="zeldovich2011making" href="https://www.jayitha.github.io/Notes/zeldovich2011making" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">zeldovich2011making</a><a data-href="zeldovich2011making" href="https://www.jayitha.github.io/Notes/literature-notes/zeldovich2011making.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">zeldovich2011making</a>

<br><a data-href="efstathopoulos2005labels" href="https://www.jayitha.github.io/Notes/efstathopoulos2005labels" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">efstathopoulos2005labels</a><a data-href="efstathopoulos2005labels" href="https://www.jayitha.github.io/Notes/literature-notes/efstathopoulos2005labels.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">efstathopoulos2005labels</a>


<br><a data-href="chen2015using" href="https://www.jayitha.github.io/Notes/chen2015using" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chen2015using</a><a data-href="chen2015using" href="https://www.jayitha.github.io/Notes/literature-notes/chen2015using.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chen2015using</a>
<br><a data-href="lipp2020meltdown" href="https://www.jayitha.github.io/Notes/lipp2020meltdown" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lipp2020meltdown</a><a data-href="lipp2020meltdown" href="https://www.jayitha.github.io/Notes/literature-notes/lipp2020meltdown.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lipp2020meltdown</a>
<br><a data-href="kocher2020spectre" href="https://www.jayitha.github.io/Notes/kocher2020spectre" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kocher2020spectre</a><a data-href="kocher2020spectre" href="https://www.jayitha.github.io/Notes/literature-notes/kocher2020spectre.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kocher2020spectre</a>

<br><a data-href="van2018foreshadow" href="https://www.jayitha.github.io/Notes/van2018foreshadow" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">van2018foreshadow</a><a data-href="van2018foreshadow" href="https://www.jayitha.github.io/Notes/literature-notes/van2018foreshadow.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">van2018foreshadow</a>


<br>
<br>
]]></description><link>https://www.jayitha.github.io/Notes/streams/uc-berkeley&apos;s-cs264a-advanced-topics-in-computer-systems.html</link><guid isPermaLink="false">Streams/UC Berkeley&apos;s CS264a - Advanced Topics in Computer Systems.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[UC Berkeley's CS286 - Graduate Database Systems]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://cs286berkeley.net/sp20#today" rel="noopener nofollow" class="external-link" href="https://cs286berkeley.net/sp20#today" target="_blank">Link to website (2020)</a><br>
<a data-tooltip-position="top" aria-label="https://cs286berkeley.net/#grading" rel="noopener nofollow" class="external-link" href="https://cs286berkeley.net/#grading" target="_blank">Link to website (2024)</a> - We'll try to keep up.<br>
Pre-requisites include (<a data-href="UC Berkeley's CS294-248 - Topics in Database Theory" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS294-248 - Topics in Database Theory" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS294-248 - Topics in Database Theory</a><a data-href="UC Berkeley's CS294-248 - Topics in Database Theory" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs294-248-topics-in-database-theory.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS294-248 - Topics in Database Theory</a> or <a data-href="UC Berkeley's CS264a - Advanced Topics in Computer Systems" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS264a - Advanced Topics in Computer Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS264a - Advanced Topics in Computer Systems</a><a data-href="UC Berkeley's CS264a - Advanced Topics in Computer Systems" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs264a-advanced-topics-in-computer-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS264a - Advanced Topics in Computer Systems</a>)<br>
<br>
Introduction and Course Overview

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1xYb_nHPbjmVAF_ahUvdRx2OOxI_m9fUP0bpdOUepqXk/edit#heading=h.opw2qul7bk9m" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1xYb_nHPbjmVAF_ahUvdRx2OOxI_m9fUP0bpdOUepqXk/edit#heading=h.opw2qul7bk9m" target="_blank">Lecture Notes</a>
<br><a data-href="hellerstein2007architecture" href="https://www.jayitha.github.io/Notes/hellerstein2007architecture" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellerstein2007architecture</a><a data-href="hellerstein2007architecture" href="https://www.jayitha.github.io/Notes/literature-notes/hellerstein2007architecture.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellerstein2007architecture</a>

<br><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/chamberlin1981history" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">chamberlin1981history</a><a data-href="chamberlin1981history" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1981history.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">chamberlin1981history</a>
<br><a data-href="stonebraker1976design" href="https://www.jayitha.github.io/Notes/stonebraker1976design" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stonebraker1976design</a><a data-href="stonebraker1976design" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker1976design.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stonebraker1976design</a>
<br><a data-tooltip-position="top" aria-label="https://hpi.de/naumann/projects/rdbms-genealogy.html" rel="noopener nofollow" class="external-link" href="https://hpi.de/naumann/projects/rdbms-genealogy.html" target="_blank">Database Genealogy Map</a>
<br><a data-href="keshav2007read" href="https://www.jayitha.github.io/Notes/keshav2007read" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">keshav2007read</a><a data-href="keshav2007read" href="https://www.jayitha.github.io/Notes/literature-notes/keshav2007read.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">keshav2007read</a>
<br><a data-href="roscoe2007writing" href="https://www.jayitha.github.io/Notes/roscoe2007writing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">roscoe2007writing</a><a data-href="roscoe2007writing" href="https://www.jayitha.github.io/Notes/literature-notes/roscoe2007writing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">roscoe2007writing</a>




<br>
 Pioneering Systems Group #1: IBM

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1rOt8eAwTf4iIX-qzIRhatgbOmSJ--mh9Z7F0-ywjo3c/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1rOt8eAwTf4iIX-qzIRhatgbOmSJ--mh9Z7F0-ywjo3c/edit?usp=sharing" target="_blank">Lecture Notes</a>
<br><a data-href="mohan1986transaction" href="https://www.jayitha.github.io/Notes/mohan1986transaction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mohan1986transaction</a><a data-href="mohan1986transaction" href="https://www.jayitha.github.io/Notes/literature-notes/mohan1986transaction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mohan1986transaction</a>
<br><a data-href="mackert1986r" href="https://www.jayitha.github.io/Notes/mackert1986r" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mackert1986r</a><a data-href="mackert1986r" href="https://www.jayitha.github.io/Notes/literature-notes/mackert1986r.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mackert1986r</a>

<br><a data-href="lohman1991extensions" href="https://www.jayitha.github.io/Notes/lohman1991extensions" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lohman1991extensions</a><a data-href="lohman1991extensions" href="https://www.jayitha.github.io/Notes/literature-notes/lohman1991extensions.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lohman1991extensions</a>




<br>
Pioneering Systems Group #2: Berkeley

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/14LTjziRp3gCI_g8C8RQzx7dZeUx7PlsOYKX6kWutqiQ/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/14LTjziRp3gCI_g8C8RQzx7dZeUx7PlsOYKX6kWutqiQ/edit?usp=sharing" target="_blank">Lecture Notes</a>
<br><a data-href="stonebraker1991postgres" href="https://www.jayitha.github.io/Notes/stonebraker1991postgres" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stonebraker1991postgres</a><a data-href="stonebraker1991postgres" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker1991postgres.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stonebraker1991postgres</a>
<br><a data-href="stonebraker1987design" href="https://www.jayitha.github.io/Notes/stonebraker1987design" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">stonebraker1987design</a><a data-href="stonebraker1987design" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker1987design.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">stonebraker1987design</a>

<br><a data-href="hellerstein2018looking" href="https://www.jayitha.github.io/Notes/hellerstein2018looking" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellerstein2018looking</a><a data-href="hellerstein2018looking" href="https://www.jayitha.github.io/Notes/literature-notes/hellerstein2018looking.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellerstein2018looking</a>

<br><a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Second-system_effect" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Second-system_effect" target="_blank">Second System Effect</a> and <a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/The_Mythical_Man-Month" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month" target="_blank">The Mythical Man-Month</a>






<br>
Pioneering Systems Group #3: Wisconsin

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1L9siK1VQn6e9tUWoA3TF16Y6lnEdEnsGte31NuxkdVM/edit#heading=h.opw2qul7bk9m" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1L9siK1VQn6e9tUWoA3TF16Y6lnEdEnsGte31NuxkdVM/edit#heading=h.opw2qul7bk9m" target="_blank">Lecture Notes</a>
<br><a data-href="dewitt1990gamma" href="https://www.jayitha.github.io/Notes/dewitt1990gamma" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">dewitt1990gamma</a><a data-href="dewitt1990gamma" href="https://www.jayitha.github.io/Notes/literature-notes/dewitt1990gamma.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">dewitt1990gamma</a>
<br><a data-href="carey1991architecture" href="https://www.jayitha.github.io/Notes/carey1991architecture" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">carey1991architecture</a><a data-href="carey1991architecture" href="https://www.jayitha.github.io/Notes/literature-notes/carey1991architecture.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">carey1991architecture</a>


<br>
Foundations of Concurrency Control: Bernstein and Goodman

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1mrS7GSb9GYhMo7PyUunfXdS79ZOXIhIoE5OZe9SWr0c/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1mrS7GSb9GYhMo7PyUunfXdS79ZOXIhIoE5OZe9SWr0c/edit?usp=sharing" target="_blank">Lecture Notes</a>
<br><a data-href="bernstein1981concurrency" href="https://www.jayitha.github.io/Notes/bernstein1981concurrency" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bernstein1981concurrency</a><a data-href="bernstein1981concurrency" href="https://www.jayitha.github.io/Notes/literature-notes/bernstein1981concurrency.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bernstein1981concurrency</a>


<br>
Concurrency Control Performance

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1Huu1zMfD0Zh0rkQ0KoVomLd5RQr5hJdqhrFRMN32bWg/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1Huu1zMfD0Zh0rkQ0KoVomLd5RQr5hJdqhrFRMN32bWg/edit?usp=sharing" target="_blank">Lecture Notes</a>
<br><a data-href="agrawal1987concurrency" href="https://www.jayitha.github.io/Notes/agrawal1987concurrency" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">agrawal1987concurrency</a><a data-href="agrawal1987concurrency" href="https://www.jayitha.github.io/Notes/literature-notes/agrawal1987concurrency.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">agrawal1987concurrency</a>
<br><a data-href="kung1979optimality" href="https://www.jayitha.github.io/Notes/kung1979optimality" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kung1979optimality</a><a data-href="kung1979optimality" href="https://www.jayitha.github.io/Notes/literature-notes/kung1979optimality.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kung1979optimality</a>


<br>
Indexing

<br><a data-href="lehman1981efficient" href="https://www.jayitha.github.io/Notes/lehman1981efficient" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">lehman1981efficient</a><a data-href="lehman1981efficient" href="https://www.jayitha.github.io/Notes/literature-notes/lehman1981efficient.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">lehman1981efficient</a>
<br><a data-href="o1997improved" href="https://www.jayitha.github.io/Notes/o1997improved" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">o1997improved</a><a data-href="o1997improved" href="https://www.jayitha.github.io/Notes/literature-notes/o1997improved.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">o1997improved</a>
<br><a data-href="o1996log" href="https://www.jayitha.github.io/Notes/o1996log" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">o1996log</a><a data-href="o1996log" href="https://www.jayitha.github.io/Notes/literature-notes/o1996log.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">o1996log</a>

<br><a data-href="kornacker1997concurrency" href="https://www.jayitha.github.io/Notes/kornacker1997concurrency" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kornacker1997concurrency</a><a data-href="kornacker1997concurrency" href="https://www.jayitha.github.io/Notes/literature-notes/kornacker1997concurrency.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kornacker1997concurrency</a>




<br>
Introduction to Weak Isolation and Replica Consistency

<br><a data-tooltip-position="top" aria-label="https://drive.google.com/file/d/1hxAO9HCmcICEEgBmo4sPT8-JHMCF870P/view?usp=sharing" rel="noopener nofollow" class="external-link" href="https://drive.google.com/file/d/1hxAO9HCmcICEEgBmo4sPT8-JHMCF870P/view?usp=sharing" target="_blank">Slides</a>


<br>
Weak Isolation

<br><a data-href="adya2000generalized" href="https://www.jayitha.github.io/Notes/adya2000generalized" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">adya2000generalized</a><a data-href="adya2000generalized" href="https://www.jayitha.github.io/Notes/literature-notes/adya2000generalized.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">adya2000generalized</a>
<br><a data-href="crooks2017seeing" href="https://www.jayitha.github.io/Notes/crooks2017seeing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">crooks2017seeing</a><a data-href="crooks2017seeing" href="https://www.jayitha.github.io/Notes/literature-notes/crooks2017seeing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">crooks2017seeing</a>
<br><a data-href="revilak2011precisely" href="https://www.jayitha.github.io/Notes/revilak2011precisely" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">revilak2011precisely</a><a data-href="revilak2011precisely" href="https://www.jayitha.github.io/Notes/literature-notes/revilak2011precisely.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">revilak2011precisely</a>

<br><a data-href="bailis2016scalable" href="https://www.jayitha.github.io/Notes/bailis2016scalable" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bailis2016scalable</a><a data-href="bailis2016scalable" href="https://www.jayitha.github.io/Notes/literature-notes/bailis2016scalable.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bailis2016scalable</a>
<br><a data-href="bailis2013highly" href="https://www.jayitha.github.io/Notes/bailis2013highly" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bailis2013highly</a><a data-href="bailis2013highly" href="https://www.jayitha.github.io/Notes/literature-notes/bailis2013highly.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bailis2013highly</a>




<br>
Introduction to Application-Level Consistency

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1eYKGgqRfhB-KQRD2mC_E8Hm-YVgMkZO2JFd5mfAxJ3E/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1eYKGgqRfhB-KQRD2mC_E8Hm-YVgMkZO2JFd5mfAxJ3E/edit?usp=sharing" target="_blank">Lecture Notes</a>

<br><a data-href="brewer2012cap" href="https://www.jayitha.github.io/Notes/brewer2012cap" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">brewer2012cap</a><a data-href="brewer2012cap" href="https://www.jayitha.github.io/Notes/literature-notes/brewer2012cap.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">brewer2012cap</a>
<br><a data-href="hellerstein2020keeping" href="https://www.jayitha.github.io/Notes/hellerstein2020keeping" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellerstein2020keeping</a><a data-href="hellerstein2020keeping" href="https://www.jayitha.github.io/Notes/literature-notes/hellerstein2020keeping.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellerstein2020keeping</a>




<br>
Application-Level Consistency

<br><a data-href="helland2009building" href="https://www.jayitha.github.io/Notes/helland2009building" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">helland2009building</a><a data-href="helland2009building" href="https://www.jayitha.github.io/Notes/literature-notes/helland2009building.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">helland2009building</a>
<br><a data-href="conway2012logic" href="https://www.jayitha.github.io/Notes/conway2012logic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">conway2012logic</a><a data-href="conway2012logic" href="https://www.jayitha.github.io/Notes/literature-notes/conway2012logic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">conway2012logic</a>
<br><a data-href="weiss2010logoot" href="https://www.jayitha.github.io/Notes/weiss2010logoot" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">weiss2010logoot</a><a data-href="weiss2010logoot" href="https://www.jayitha.github.io/Notes/literature-notes/weiss2010logoot.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">weiss2010logoot</a>

<br><a data-href="decandia2007dynamo" href="https://www.jayitha.github.io/Notes/decandia2007dynamo" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">decandia2007dynamo</a><a data-href="decandia2007dynamo" href="https://www.jayitha.github.io/Notes/literature-notes/decandia2007dynamo.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">decandia2007dynamo</a>
<br><a data-href="alvaro2011consistency" href="https://www.jayitha.github.io/Notes/alvaro2011consistency" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">alvaro2011consistency</a><a data-href="alvaro2011consistency" href="https://www.jayitha.github.io/Notes/literature-notes/alvaro2011consistency.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">alvaro2011consistency</a>
<br><a data-href="shapiro2011conflict" href="https://www.jayitha.github.io/Notes/shapiro2011conflict" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">shapiro2011conflict</a><a data-href="shapiro2011conflict" href="https://www.jayitha.github.io/Notes/literature-notes/shapiro2011conflict.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">shapiro2011conflict</a>




<br>
Introduction to Learning and Database Systems

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1fu-ihMbefbQErcRPcds5Bi2TxF4CxLmamWhvqMN3Mig/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1fu-ihMbefbQErcRPcds5Bi2TxF4CxLmamWhvqMN3Mig/edit?usp=sharing" target="_blank">Lecture Notes</a>
<br><a data-tooltip-position="top" aria-label="https://drive.google.com/file/d/18DMsYodshkmSmJJFS50LfbZK0vIyIqfn/view?usp=sharing" rel="noopener nofollow" class="external-link" href="https://drive.google.com/file/d/18DMsYodshkmSmJJFS50LfbZK0vIyIqfn/view?usp=sharing" target="_blank">Slides on CARDLearner</a>
<br><a data-tooltip-position="top" aria-label="https://drive.google.com/file/d/19f3smK7tHueBciHa5I0FAQEXFG_ZHJQc/view?usp=sharing" rel="noopener nofollow" class="external-link" href="https://drive.google.com/file/d/19f3smK7tHueBciHa5I0FAQEXFG_ZHJQc/view?usp=sharing" target="_blank">Slides on Naru</a>


<br>
Learning-Based Query Optimization

<br><a data-href="yang2019deep" href="https://www.jayitha.github.io/Notes/yang2019deep" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">yang2019deep</a><a data-href="yang2019deep" href="https://www.jayitha.github.io/Notes/literature-notes/yang2019deep.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">yang2019deep</a>
<br><a data-href="marcus2019neo" href="https://www.jayitha.github.io/Notes/marcus2019neo" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">marcus2019neo</a><a data-href="marcus2019neo" href="https://www.jayitha.github.io/Notes/literature-notes/marcus2019neo.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">marcus2019neo</a>
<br><a data-href="wu2018towards" href="https://www.jayitha.github.io/Notes/wu2018towards" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">wu2018towards</a><a data-href="wu2018towards" href="https://www.jayitha.github.io/Notes/literature-notes/wu2018towards.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">wu2018towards</a>


<br>
Query Processing Revisited

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/1clzcplQ_CwQttAlyDmudbyMzmGZywYE9jK9E-zNADwQ/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/1clzcplQ_CwQttAlyDmudbyMzmGZywYE9jK9E-zNADwQ/edit?usp=sharing" target="_blank">Lecture Notes</a>


<br>
New Approaches to Join Processing

<br><a data-href="veldhuizen2012leapfrog" href="https://www.jayitha.github.io/Notes/veldhuizen2012leapfrog" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">veldhuizen2012leapfrog</a><a data-href="veldhuizen2012leapfrog" href="https://www.jayitha.github.io/Notes/literature-notes/veldhuizen2012leapfrog.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">veldhuizen2012leapfrog</a>
<br><a data-href="avnur2000eddies" href="https://www.jayitha.github.io/Notes/avnur2000eddies" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">avnur2000eddies</a><a data-href="avnur2000eddies" href="https://www.jayitha.github.io/Notes/literature-notes/avnur2000eddies.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">avnur2000eddies</a>
<br><a data-href="deshpande2004lifting" href="https://www.jayitha.github.io/Notes/deshpande2004lifting" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">deshpande2004lifting</a><a data-href="deshpande2004lifting" href="https://www.jayitha.github.io/Notes/literature-notes/deshpande2004lifting.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">deshpande2004lifting</a>


<br>
Introduction to Approximate Query Processing

<br><a data-tooltip-position="top" aria-label="https://docs.google.com/document/d/19IJFdcP_41G9eXDxrTlkyfN9WXzt0l0sUMHd0I0JnHc/edit?usp=sharing" rel="noopener nofollow" class="external-link" href="https://docs.google.com/document/d/19IJFdcP_41G9eXDxrTlkyfN9WXzt0l0sUMHd0I0JnHc/edit?usp=sharing" target="_blank">Lecture Notes</a>

<br><a data-href="cormode2017data" href="https://www.jayitha.github.io/Notes/cormode2017data" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">cormode2017data</a><a data-href="cormode2017data" href="https://www.jayitha.github.io/Notes/literature-notes/cormode2017data.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">cormode2017data</a>
<br><a data-href="hellerstein1999interactive" href="https://www.jayitha.github.io/Notes/hellerstein1999interactive" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellerstein1999interactive</a><a data-href="hellerstein1999interactive" href="https://www.jayitha.github.io/Notes/literature-notes/hellerstein1999interactive.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellerstein1999interactive</a>




<br>
Approximate Query Processing

<br><a data-href="li2016wander" href="https://www.jayitha.github.io/Notes/li2016wander" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">li2016wander</a><a data-href="li2016wander" href="https://www.jayitha.github.io/Notes/literature-notes/li2016wander.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">li2016wander</a>
<br><a data-href="rahman2017ve" href="https://www.jayitha.github.io/Notes/rahman2017ve" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rahman2017ve</a><a data-href="rahman2017ve" href="https://www.jayitha.github.io/Notes/literature-notes/rahman2017ve.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rahman2017ve</a>
<br><a data-href="park2018verdictdb" href="https://www.jayitha.github.io/Notes/park2018verdictdb" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">park2018verdictdb</a><a data-href="park2018verdictdb" href="https://www.jayitha.github.io/Notes/literature-notes/park2018verdictdb.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">park2018verdictdb</a>

<br><a data-href="hellerstein1997online" href="https://www.jayitha.github.io/Notes/hellerstein1997online" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">hellerstein1997online</a><a data-href="hellerstein1997online" href="https://www.jayitha.github.io/Notes/literature-notes/hellerstein1997online.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">hellerstein1997online</a>
<br><a data-href="raman2002partial" href="https://www.jayitha.github.io/Notes/raman2002partial" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">raman2002partial</a><a data-href="raman2002partial" href="https://www.jayitha.github.io/Notes/literature-notes/raman2002partial.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">raman2002partial</a>
<br><a data-href="mozafari2017approximate" href="https://www.jayitha.github.io/Notes/mozafari2017approximate" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mozafari2017approximate</a><a data-href="mozafari2017approximate" href="https://www.jayitha.github.io/Notes/literature-notes/mozafari2017approximate.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mozafari2017approximate</a>




<br>
Main Memory Query Processing

<br><a data-href="neumann2011efficiently" href="https://www.jayitha.github.io/Notes/neumann2011efficiently" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">neumann2011efficiently</a><a data-href="neumann2011efficiently" href="https://www.jayitha.github.io/Notes/literature-notes/neumann2011efficiently.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">neumann2011efficiently</a>
<br><a data-href="leis2014morsel" href="https://www.jayitha.github.io/Notes/leis2014morsel" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">leis2014morsel</a><a data-href="leis2014morsel" href="https://www.jayitha.github.io/Notes/literature-notes/leis2014morsel.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">leis2014morsel</a>
<br><a data-href="leis2018leanstore" href="https://www.jayitha.github.io/Notes/leis2018leanstore" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">leis2018leanstore</a><a data-href="leis2018leanstore" href="https://www.jayitha.github.io/Notes/literature-notes/leis2018leanstore.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">leis2018leanstore</a>


<br>
Main Memory Concurrency Control

<br><a data-href="larson2011high" href="https://www.jayitha.github.io/Notes/larson2011high" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">larson2011high</a><a data-href="larson2011high" href="https://www.jayitha.github.io/Notes/literature-notes/larson2011high.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">larson2011high</a>
<br><a data-href="neumann2015fast" href="https://www.jayitha.github.io/Notes/neumann2015fast" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">neumann2015fast</a><a data-href="neumann2015fast" href="https://www.jayitha.github.io/Notes/literature-notes/neumann2015fast.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">neumann2015fast</a>
<br><a data-href="huang2020opportunities" href="https://www.jayitha.github.io/Notes/huang2020opportunities" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">huang2020opportunities</a><a data-href="huang2020opportunities" href="https://www.jayitha.github.io/Notes/literature-notes/huang2020opportunities.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">huang2020opportunities</a>

<br><a data-href="szekeres2020meerkat" href="https://www.jayitha.github.io/Notes/szekeres2020meerkat" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">szekeres2020meerkat</a><a data-href="szekeres2020meerkat" href="https://www.jayitha.github.io/Notes/literature-notes/szekeres2020meerkat.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">szekeres2020meerkat</a>




<br>
Programming Support for Database-Backed Applications

<br><a data-href="bernstein2014orleans" href="https://www.jayitha.github.io/Notes/bernstein2014orleans" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bernstein2014orleans</a><a data-href="bernstein2014orleans" href="https://www.jayitha.github.io/Notes/literature-notes/bernstein2014orleans.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bernstein2014orleans</a>
<br><a data-href="cheung2013optimizing" href="https://www.jayitha.github.io/Notes/cheung2013optimizing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">cheung2013optimizing</a><a data-href="cheung2013optimizing" href="https://www.jayitha.github.io/Notes/literature-notes/cheung2013optimizing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">cheung2013optimizing</a>
<br><a data-href="bailis2015feral" href="https://www.jayitha.github.io/Notes/bailis2015feral" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">bailis2015feral</a><a data-href="bailis2015feral" href="https://www.jayitha.github.io/Notes/literature-notes/bailis2015feral.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">bailis2015feral</a>


<br>
Cloud Databases

<br><a data-href="corbett2013spanner" href="https://www.jayitha.github.io/Notes/corbett2013spanner" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">corbett2013spanner</a><a data-href="corbett2013spanner" href="https://www.jayitha.github.io/Notes/literature-notes/corbett2013spanner.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">corbett2013spanner</a>
<br><a data-href="verbitski2017amazon" href="https://www.jayitha.github.io/Notes/verbitski2017amazon" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">verbitski2017amazon</a><a data-href="verbitski2017amazon" href="https://www.jayitha.github.io/Notes/literature-notes/verbitski2017amazon.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">verbitski2017amazon</a>
<br><a data-href="verbitski2018amazon" href="https://www.jayitha.github.io/Notes/verbitski2018amazon" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">verbitski2018amazon</a><a data-href="verbitski2018amazon" href="https://www.jayitha.github.io/Notes/literature-notes/verbitski2018amazon.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">verbitski2018amazon</a>


<br>
Data Wrangling and Cleaning

<br><a data-href="kandel2011wrangler" href="https://www.jayitha.github.io/Notes/kandel2011wrangler" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kandel2011wrangler</a><a data-href="kandel2011wrangler" href="https://www.jayitha.github.io/Notes/literature-notes/kandel2011wrangler.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kandel2011wrangler</a>
<br><a data-href="mahdavi2019raha" href="https://www.jayitha.github.io/Notes/mahdavi2019raha" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mahdavi2019raha</a><a data-href="mahdavi2019raha" href="https://www.jayitha.github.io/Notes/literature-notes/mahdavi2019raha.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mahdavi2019raha</a>
<br><a data-href="mudgal2018deep" href="https://www.jayitha.github.io/Notes/mudgal2018deep" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">mudgal2018deep</a><a data-href="mudgal2018deep" href="https://www.jayitha.github.io/Notes/literature-notes/mudgal2018deep.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">mudgal2018deep</a>

<br><a data-href="rekatsinas2017holoclean" href="https://www.jayitha.github.io/Notes/rekatsinas2017holoclean" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">rekatsinas2017holoclean</a><a data-href="rekatsinas2017holoclean" href="https://www.jayitha.github.io/Notes/literature-notes/rekatsinas2017holoclean.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">rekatsinas2017holoclean</a>
<br><a data-href="singh2016blinkfill" href="https://www.jayitha.github.io/Notes/singh2016blinkfill" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">singh2016blinkfill</a><a data-href="singh2016blinkfill" href="https://www.jayitha.github.io/Notes/literature-notes/singh2016blinkfill.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">singh2016blinkfill</a>
<br><a data-href="krishnan2016activeclean" href="https://www.jayitha.github.io/Notes/krishnan2016activeclean" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">krishnan2016activeclean</a><a data-href="krishnan2016activeclean" href="https://www.jayitha.github.io/Notes/literature-notes/krishnan2016activeclean.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">krishnan2016activeclean</a>




]]></description><link>https://www.jayitha.github.io/Notes/streams/uc-berkeley&apos;s-cs286-graduate-database-systems.html</link><guid isPermaLink="false">Streams/UC Berkeley&apos;s CS286 - Graduate Database Systems.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[UC Berkeley's CS294-248 - Topics in Database Theory]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io" target="_blank">Link to website</a><br>
Includes content from the Simons <a data-tooltip-position="top" aria-label="https://simons.berkeley.edu/programs/logic-algorithms-database-theory-ai" rel="noopener nofollow" class="external-link" href="https://simons.berkeley.edu/programs/logic-algorithms-database-theory-ai" target="_blank">Logic and Algorithms in Database Theory and AI</a> Program<br>
<br><a data-tooltip-position="top" aria-label="https://simons.berkeley.edu/workshops/logic-algorithms-database-theory-ai-boot-camp#simons-tabs" rel="noopener nofollow" class="external-link" href="https://simons.berkeley.edu/workshops/logic-algorithms-database-theory-ai-boot-camp#simons-tabs" target="_blank">Logic and Algorithms in Database Theory and AI Boot Camp</a>
<br>Logic and Queries

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit1.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit1.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/VCi45naqnN8?si=Sd981YObi2OM_DLk" rel="noopener nofollow" class="external-link" href="https://youtu.be/VCi45naqnN8?si=Sd981YObi2OM_DLk" target="_blank">Video</a>


<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/hw/hw1-whitespace.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/hw/hw1-whitespace.pdf" target="_blank">HW1</a>
<br>Conjunctive Queries

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit2.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit2.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/DFZ3NmKHKPo?si=JW2EgFMGDKGcFzYF" rel="noopener nofollow" class="external-link" href="https://youtu.be/DFZ3NmKHKPo?si=JW2EgFMGDKGcFzYF" target="_blank">Video1</a> <a data-tooltip-position="top" aria-label="https://youtu.be/hdjPCHHMFZU?si=7m6MxqS0MnlG9FKb" rel="noopener nofollow" class="external-link" href="https://youtu.be/hdjPCHHMFZU?si=7m6MxqS0MnlG9FKb" target="_blank">Video2</a>


<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/hw/hw2-whitespace.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/hw/hw2-whitespace.pdf" target="_blank">HW2</a>
<br>Incremental View Maintenance

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/Olteanu-IVM-Berkeley.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/Olteanu-IVM-Berkeley.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/H2i2Q2CKzPc?si=EnmBd1geAtHhufm3" rel="noopener nofollow" class="external-link" href="https://youtu.be/H2i2Q2CKzPc?si=EnmBd1geAtHhufm3" target="_blank">Video</a>


<br>AGM Bound,&nbsp;Worst-Case Optimal Algorithms

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit4.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit4.pdf" target="_blank">Slides</a> <a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/hung-ngo-wcoj.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/hung-ngo-wcoj.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/H2i2Q2CKzPc?si=KTlwECsUacrNOaUI" rel="noopener nofollow" class="external-link" href="https://youtu.be/H2i2Q2CKzPc?si=KTlwECsUacrNOaUI" target="_blank">Video1</a> <a data-tooltip-position="top" aria-label="https://youtu.be/BZ0qENq6aFs?si=P9aZxueBXEnKVLFt" rel="noopener nofollow" class="external-link" href="https://youtu.be/BZ0qENq6aFs?si=P9aZxueBXEnKVLFt" target="_blank">Video2</a>


<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/hw/hw3-whitespace.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/hw/hw3-whitespace.pdf" target="_blank">HW3</a>
<br><a data-tooltip-position="top" aria-label="https://simons.berkeley.edu/workshops/fine-grained-complexity-logic-query-evaluation#simons-tabs" rel="noopener nofollow" class="external-link" href="https://simons.berkeley.edu/workshops/fine-grained-complexity-logic-query-evaluation#simons-tabs" target="_blank">Fine-Grained Complexity, Logic, and Query Evaluation</a>
<br>Information Inequalities&nbsp;and&nbsp;Database Constraints

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit5.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit5.pdf" target="_blank">Slides</a> <a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit5b.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit5b.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/GzOh82g2G64?si=O5OnV0yO4qo08SOE" rel="noopener nofollow" class="external-link" href="https://youtu.be/GzOh82g2G64?si=O5OnV0yO4qo08SOE" target="_blank">Video1</a> <a data-tooltip-position="top" aria-label="https://youtu.be/PnfBUqwiAVA?si=PYLCfGYDSAJclUlD" rel="noopener nofollow" class="external-link" href="https://youtu.be/PnfBUqwiAVA?si=PYLCfGYDSAJclUlD" target="_blank">Video2</a>


<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/hw/hw4-whitespace.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/hw/hw4-whitespace.pdf" target="_blank">HW4</a>
<br>Database Constraints (cont'd),&nbsp;Repairs, Incomplete Databases

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit6.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit6.pdf" target="_blank">Slides</a> <a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit6b.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit6b.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/gqbaG_BeFLY?si=LNFEaN0bHM1vBdXu" rel="noopener nofollow" class="external-link" href="https://youtu.be/gqbaG_BeFLY?si=LNFEaN0bHM1vBdXu" target="_blank">Video1</a> <a data-tooltip-position="top" aria-label="https://youtu.be/BFql5OxiEDs?si=gp2_WhbA8Rod8FFX" rel="noopener nofollow" class="external-link" href="https://youtu.be/BFql5OxiEDs?si=gp2_WhbA8Rod8FFX" target="_blank">Video2</a>


<br><a data-tooltip-position="top" aria-label="https://simons.berkeley.edu/workshops/probabilistic-circuits-logic#simons-tabs" rel="noopener nofollow" class="external-link" href="https://simons.berkeley.edu/workshops/probabilistic-circuits-logic#simons-tabs" target="_blank">Probabilistic Circuits and Logic</a>
<br>Semirings and K-Relations, WCOJ and Tree Decomposition

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit7.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit7.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/tPmv09CIAaM?si=edv01qdDhYgfwPKh" rel="noopener nofollow" class="external-link" href="https://youtu.be/tPmv09CIAaM?si=edv01qdDhYgfwPKh" target="_blank">Video1</a> <a data-tooltip-position="top" aria-label="https://youtu.be/FilHYGSiy2A?si=kx1p_yrOaI7sRbbH" rel="noopener nofollow" class="external-link" href="https://youtu.be/FilHYGSiy2A?si=kx1p_yrOaI7sRbbH" target="_blank">Video2</a>
<br>Recommended talk by Reinhard Pichler

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/2023-09-18-ReinhardPichler.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/2023-09-18-ReinhardPichler.pdf" target="_blank">Slides</a> <a data-tooltip-position="top" aria-label="https://youtu.be/9Ze7l8XxS5Y?si=_VvuDgx1AlUdrXRT" rel="noopener nofollow" class="external-link" href="https://youtu.be/9Ze7l8XxS5Y?si=_VvuDgx1AlUdrXRT" target="_blank">Video</a>




<br>FAQ&nbsp;(Hung Ngo), Introduction to Datalog

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/faq.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/faq.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/MW2pCvvAa7s?si=XqjH14s_YKAw5u8F" rel="noopener nofollow" class="external-link" href="https://youtu.be/MW2pCvvAa7s?si=XqjH14s_YKAw5u8F" target="_blank">Video1</a> <a data-tooltip-position="top" aria-label="https://youtu.be/F337yVUdR6U?si=pSXxl_JqyEiSqTRu" rel="noopener nofollow" class="external-link" href="https://youtu.be/F337yVUdR6U?si=pSXxl_JqyEiSqTRu" target="_blank">Video2</a>


<br>Datalog&nbsp;(cont'd)

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit9.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit9.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/4t9nhWY_Uf4?si=GIdf0XhvShkm5eTg" rel="noopener nofollow" class="external-link" href="https://youtu.be/4t9nhWY_Uf4?si=GIdf0XhvShkm5eTg" target="_blank">Video</a>


<br><a data-tooltip-position="top" aria-label="https://simons.berkeley.edu/workshops/logic-algebra-query-evaluation#simons-tabs" rel="noopener nofollow" class="external-link" href="https://simons.berkeley.edu/workshops/logic-algebra-query-evaluation#simons-tabs" target="_blank">Logic and Algebra for Query Evaluation</a>
<br>Datalog,&nbsp;Final review of the class

<br><a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unit9b.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unit9b.pdf" target="_blank">Slides</a> <a data-tooltip-position="top" aria-label="https://berkeley-cs294-248.github.io/lectures/unitReview.pdf" rel="noopener nofollow" class="external-link" href="https://berkeley-cs294-248.github.io/lectures/unitReview.pdf" target="_blank">Slides</a>
<br><a data-tooltip-position="top" aria-label="https://youtu.be/witWaeaSXaQ?si=TDKsa69xGTGApsuP" rel="noopener nofollow" class="external-link" href="https://youtu.be/witWaeaSXaQ?si=TDKsa69xGTGApsuP" target="_blank">Video</a>


]]></description><link>https://www.jayitha.github.io/Notes/streams/uc-berkeley&apos;s-cs294-248-topics-in-database-theory.html</link><guid isPermaLink="false">Streams/UC Berkeley&apos;s CS294-248 - Topics in Database Theory.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[TIL - Rust]]></title><description><![CDATA[<a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:Rust" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Rust</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> <a class="tag" href="https://www.jayitha.github.io/Notes/?query=tag:todo" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#todo</a> 
 <br><a href="https://www.jayitha.github.io/Notes?query=tag:Rust" class="tag" target="_blank" rel="noopener nofollow">#Rust</a><br><br>If you want to modify a Some value behind an Option variable in place, there are a few ways to do it. Let's assume we want to modify a variable opt_x of type Option&lt;X&gt;<br>opt_x: Option&lt;X&gt;
<br>where type X has an associated method that mutates the value in place i.e. <br>impl X {
	pub fn mutate(&amp;mut self) {...}
}
<br>
<br>Use pattern matching.
<br>if let Some(ref mut x: &amp;mut X) = opt_x {
	x.mutate()
}
<br>
<br>Use <a data-tooltip-position="top" aria-label="https://doc.rust-lang.org/std/option/struct.IterMut.html" rel="noopener nofollow" class="external-link" href="https://doc.rust-lang.org/std/option/struct.IterMut.html" target="_blank"><code></code></a>iter_mut and map. The iter_mut iterator yields one value if it's the Some variant and none otherwise.
<br>let _ = opt_x.iter_mut().map(|x: &amp;mut X| x.mutate())
<br>you have to assign the map result to something -- since iterators are lazy, the map doesn't get evaluated until it's assigned to something<br><br>Today on Reddit someone was discussing <a data-tooltip-position="top" aria-label="https://internals.rust-lang.org/t/pre-rfc-implicit-number-type-widening/10432/19" rel="noopener nofollow" class="external-link" href="https://internals.rust-lang.org/t/pre-rfc-implicit-number-type-widening/10432/19" target="_blank">integer wielding</a> and how code could be verbose and unreadable without wielding. I loved one comment which said<br>
I'd rather have an annoyance instead of a bug.
<br><a href="https://www.reddit.com/r/rust/comments/1833k19/comment/kamde3v/" target="_blank" rel="noopener nofollow">Comment</a><br> by<a href="https://www.reddit.com/user/althahahayes/" target="_blank" rel="noopener nofollow">u/althahahayes</a> from discussion<a href="https://www.reddit.com/r/rust/comments/1833k19/what_is_the_idiomatic_way_to_deal_with_mixed/" target="_blank" rel="noopener nofollow"></a><br> in<a href="https://www.reddit.com/r/rust/" target="_blank" rel="noopener nofollow">rust</a><br><br>I've always wondered how data is written to disk in a typical data management system. Do you use mmap? <br>So, I'm going to take a quick peek at <a data-tooltip-position="top" aria-label="https://github.com/risinglightdb/risinglight" rel="noopener nofollow" class="external-link" href="https://github.com/risinglightdb/risinglight" target="_blank">RisingLight</a><br>RisingLight uses protobuf to encode some data on disk<br><br>Today, I tried to implement a trait for two generic types: (1) that is owned and implements Into&lt;u16&gt; and another that is a reference to a type that implements Into&lt;u16&gt;<br>I was doing the <a data-tooltip-position="top" aria-label="https://rust-exercises.com/01_intro/00_welcome" rel="noopener nofollow" class="external-link" href="https://rust-exercises.com/01_intro/00_welcome" target="_blank">100 Exercises to Learn Rust</a> course for fun and came across this exercise. You have the following struct:<br>pub struct SaturatingU16 {
    value: u16,
}
<br>And you need to write From trait implementations for types: u16, u8, &amp;u16, &amp;u8<br>My first attempt was to do something like this:<br>impl&lt;T&gt; From&lt;T&gt; for SaturatingU16 where T: Into&lt;u16&gt; {
	fn from(value: T) -&gt; Self {
		SaturatingU16 { value: value.into() }
	}
}

impl&lt;T&gt; From&lt;&amp;T&gt; for SaturatingU16 where T: Into&lt;u16&gt; {
	fn from(value: &amp;T) -&gt; Self {
		SaturatingU16 { value: (*value).into() }
	}
}
<br>Where in I create one implementation for owned types and another for reference types. But I’m met with the following error<br>error[E0119]: conflicting implementations of trait `From&lt;&amp;_&gt;` for type `SaturatingU16`
  --&gt; exercises/04_traits/13_outro/src/lib.rs:24:1
   |
18 | impl&lt;T&gt; From&lt;T&gt; for SaturatingU16 where T: Into&lt;u16&gt; {
   | ---------------------------------------------------- first implementation here
...
24 | impl&lt;T&gt; From&lt;&amp;T&gt; for SaturatingU16 where T: Into&lt;u16&gt; {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `SaturatingU16`
   |
   = note: downstream crates may implement trait `std::convert::From&lt;&amp;_&gt;` for type `u16`
<br>
<br>
Is there a way for me to enforce that the first implementation is strictly for owned types? <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>

<br>
What about TryFrom for an enum from: String, &amp;String, &amp;str?  <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>

<br>
How do you create a static vector in a function for dynamic programming type things? <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>

<br>
Implementing Iterator and IntoIterator and related non-consuming versions. Also the less verbose versions using slice?  Bog down on the differences between Iter, Iterator, IntoIterator and so on … <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>

<br>Given an example collection struct, find out how to idiomatically implement iterators <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>


<br><br>
<br>I wanted to generate unique ticketIDs, so I used a static variable but had to use an unsafe block to update the static variable <a href="https://www.jayitha.github.io/Notes?query=tag:todo" class="tag" target="_blank" rel="noopener nofollow">#todo</a>
<br>fn new() -&gt; TicketId {
	static mut COUNTER: u64 = 0;
	unsafe {
		COUNTER += 1;
		return TicketId(COUNTER);
	}
}
<br><br>Okay, 100 Exercises to Learn Rust is easily becoming one of my favorite Rust courses. ]]></description><link>https://www.jayitha.github.io/Notes/til/til-rust.html</link><guid isPermaLink="false">TIL/TIL - Rust.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[TIL - Words]]></title><description><![CDATA[ 
 <br>Words I come across in papers I'd like to use more when writing. Or maybe I should just use a Thesaurus?<br>
<br>Eschews - deliberately avoid using; abstain from. <a data-href="moseley2006out" href="https://www.jayitha.github.io/Notes/moseley2006out" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">moseley2006out</a><a data-href="moseley2006out" href="https://www.jayitha.github.io/Notes/literature-notes/moseley2006out.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">moseley2006out</a>
<br>Emphatically - in a forceful way <a data-href="moseley2006out" href="https://www.jayitha.github.io/Notes/moseley2006out" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">moseley2006out</a><a data-href="moseley2006out" href="https://www.jayitha.github.io/Notes/literature-notes/moseley2006out.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">moseley2006out</a>
<br>Obviates - remove (a need or difficulty) <a data-href="kemper2010hyper" href="https://www.jayitha.github.io/Notes/kemper2010hyper" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">kemper2010hyper</a><a data-href="kemper2010hyper" href="https://www.jayitha.github.io/Notes/literature-notes/kemper2010hyper.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">kemper2010hyper</a>
<br>Vacuously true - <a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">enderton2001mathematical</a><a data-href="enderton2001mathematical" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">enderton2001mathematical</a>
<br>
]]></description><link>https://www.jayitha.github.io/Notes/til/til-words.html</link><guid isPermaLink="false">TIL/TIL - Words.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Abbreviations]]></title><description><![CDATA[ 
 <br><br>Data Definition Language<br><br>Data Manipulation Language<br><br>Prof. Joe Hellerstein<br><br>Prof. Wolfgang Gatterbauer]]></description><link>https://www.jayitha.github.io/Notes/abbreviations.html</link><guid isPermaLink="false">Abbreviations.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Papers and Books]]></title><description><![CDATA[ 
 <br><br>Streams<br><br><br>
<br><a data-href="Blogs" href="https://www.jayitha.github.io/Notes/Blogs" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Blogs</a><a data-href="Blogs" href="https://www.jayitha.github.io/Notes/streams/blogs.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Blogs</a>
<br><a data-href="Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems" href="https://www.jayitha.github.io/Notes/Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems</a><a data-href="Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems" href="https://www.jayitha.github.io/Notes/streams/ryan-marcus'-cis-6500-–-advanced-topics-in-database-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Ryan Marcus' CIS 6500 – Advanced Topics in Database Systems</a>
<br><a data-href="UC Berkeley's CS264a - Advanced Topics in Computer Systems" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS264a - Advanced Topics in Computer Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS264a - Advanced Topics in Computer Systems</a><a data-href="UC Berkeley's CS264a - Advanced Topics in Computer Systems" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs264a-advanced-topics-in-computer-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS264a - Advanced Topics in Computer Systems</a>
<br><a data-href="UC Berkeley's CS286 - Graduate Database Systems" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS286 - Graduate Database Systems" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS286 - Graduate Database Systems</a><a data-href="UC Berkeley's CS286 - Graduate Database Systems" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs286-graduate-database-systems.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS286 - Graduate Database Systems</a>
<br><a data-href="UC Berkeley's CS294-248 - Topics in Database Theory" href="https://www.jayitha.github.io/Notes/UC Berkeley's CS294-248 - Topics in Database Theory" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">UC Berkeley's CS294-248 - Topics in Database Theory</a><a data-href="UC Berkeley's CS294-248 - Topics in Database Theory" href="https://www.jayitha.github.io/Notes/streams/uc-berkeley's-cs294-248-topics-in-database-theory.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">UC Berkeley's CS294-248 - Topics in Database Theory</a>
<br><a class="original-internal-link" data-href="./Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management.md" href="https://www.jayitha.github.io/Notes/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management" target="_blank" rel="noopener nofollow" style="display: none;">Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management</a><a class="internal-link mathLink-internal-link" data-href="./Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management/Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management.md" href="https://www.jayitha.github.io/Notes/streams/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management/wolfgang-gatterbauer's-cs-7240-principles-of-scalable-data-management.html" target="_self" rel="noopener nofollow">Wolfgang Gatterbauer's CS 7240 Principles of Scalable Data Management</a>
<br><br><a rel="noopener nofollow" class="external-link" href="https://drive.google.com/drive/folders/18cl8LeHuncPgO0Cu3oBgYs_Elg1kdVd9" target="_blank">https://drive.google.com/drive/folders/18cl8LeHuncPgO0Cu3oBgYs_Elg1kdVd9</a><br><br><br>2022: <br><a data-tooltip-position="top" aria-label="Literature Notes/bos2022rust.md" data-href="Literature Notes/bos2022rust.md" href="https://www.jayitha.github.io/Notes/Literature Notes/bos2022rust" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rust Atomics and Locks: Low-Level Concurrency in Practice</a><a data-tooltip-position="top" aria-label="Literature Notes/bos2022rust.md" data-href="Literature Notes/bos2022rust.md" href="https://www.jayitha.github.io/Notes/literature-notes/bos2022rust.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rust Atomics and Locks: Low-Level Concurrency in Practice</a><br>2021: <br><a data-tooltip-position="top" aria-label="Literature Notes/gjengset2021rust.md" data-href="Literature Notes/gjengset2021rust.md" href="https://www.jayitha.github.io/Notes/Literature Notes/gjengset2021rust" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Rust for Rustaceans: Idiomatic Rrogramming for Experienced Developers</a><a data-tooltip-position="top" aria-label="Literature Notes/gjengset2021rust.md" data-href="Literature Notes/gjengset2021rust.md" href="https://www.jayitha.github.io/Notes/literature-notes/gjengset2021rust.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Rust for Rustaceans: Idiomatic Rrogramming for Experienced Developers</a><br>2019: <br><a data-tooltip-position="top" aria-label="Literature Notes/petrov2019database.md" data-href="Literature Notes/petrov2019database.md" href="https://www.jayitha.github.io/Notes/Literature Notes/petrov2019database" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Database Internals: A deep dive into how distributed data systems work</a><a data-tooltip-position="top" aria-label="Literature Notes/petrov2019database.md" data-href="Literature Notes/petrov2019database.md" href="https://www.jayitha.github.io/Notes/literature-notes/petrov2019database.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Database Internals: A deep dive into how distributed data systems work</a><br>2018: <br><a data-tooltip-position="top" aria-label="Literature Notes/arpacidusseau2018operating.md" data-href="Literature Notes/arpacidusseau2018operating.md" href="https://www.jayitha.github.io/Notes/Literature Notes/arpacidusseau2018operating" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Operating systems: Three easy pieces</a><a data-tooltip-position="top" aria-label="Literature Notes/arpacidusseau2018operating.md" data-href="Literature Notes/arpacidusseau2018operating.md" href="https://www.jayitha.github.io/Notes/literature-notes/arpacidusseau2018operating.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Operating systems: Three easy pieces</a><br>2017: <br><a data-tooltip-position="top" aria-label="Literature Notes/verbitski2017amazon.md" data-href="Literature Notes/verbitski2017amazon.md" href="https://www.jayitha.github.io/Notes/Literature Notes/verbitski2017amazon" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Amazon aurora: Design considerations for high throughput cloud-native relational databases</a><a data-tooltip-position="top" aria-label="Literature Notes/verbitski2017amazon.md" data-href="Literature Notes/verbitski2017amazon.md" href="https://www.jayitha.github.io/Notes/literature-notes/verbitski2017amazon.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Amazon aurora: Design considerations for high throughput cloud-native relational databases</a><br>2016: <br><a data-tooltip-position="top" aria-label="Literature Notes/kleppmann2014designing.md" data-href="Literature Notes/kleppmann2014designing.md" href="https://www.jayitha.github.io/Notes/Literature Notes/kleppmann2014designing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Designing data-intensive applications: The big ideas behind reliable, scalable, and maintainable systems</a><a data-tooltip-position="top" aria-label="Literature Notes/kleppmann2014designing.md" data-href="Literature Notes/kleppmann2014designing.md" href="https://www.jayitha.github.io/Notes/literature-notes/kleppmann2014designing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Designing data-intensive applications: The big ideas behind reliable, scalable, and maintainable systems</a><br>2013: <br><a data-tooltip-position="top" aria-label="Literature Notes/corbett2013spanner.md" data-href="Literature Notes/corbett2013spanner.md" href="https://www.jayitha.github.io/Notes/Literature Notes/corbett2013spanner" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Spanner: Google's globally distributed database</a><a data-tooltip-position="top" aria-label="Literature Notes/corbett2013spanner.md" data-href="Literature Notes/corbett2013spanner.md" href="https://www.jayitha.github.io/Notes/literature-notes/corbett2013spanner.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Spanner: Google's globally distributed database</a><br>2010: <br><a data-tooltip-position="top" aria-label="Literature Notes/kemper2010hyper.md" data-href="Literature Notes/kemper2010hyper.md" href="https://www.jayitha.github.io/Notes/Literature Notes/kemper2010hyper" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Hyper: Hybrid OLTP&amp;OLAP high performance database system</a><a data-tooltip-position="top" aria-label="Literature Notes/kemper2010hyper.md" data-href="Literature Notes/kemper2010hyper.md" href="https://www.jayitha.github.io/Notes/literature-notes/kemper2010hyper.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Hyper: Hybrid OLTP&amp;OLAP high performance database system</a><br>2008: <br><a data-tooltip-position="top" aria-label="Literature Notes/bertsekas2008introduction.md" data-href="Literature Notes/bertsekas2008introduction.md" href="https://www.jayitha.github.io/Notes/Literature Notes/bertsekas2008introduction" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Introduction to Probability</a><a data-tooltip-position="top" aria-label="Literature Notes/bertsekas2008introduction.md" data-href="Literature Notes/bertsekas2008introduction.md" href="https://www.jayitha.github.io/Notes/literature-notes/bertsekas2008introduction.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Introduction to Probability</a><br>2006: <br><a data-tooltip-position="top" aria-label="Literature Notes/moseley2006out.md" data-href="Literature Notes/moseley2006out.md" href="https://www.jayitha.github.io/Notes/Literature Notes/moseley2006out" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Out of the tar pit</a><a data-tooltip-position="top" aria-label="Literature Notes/moseley2006out.md" data-href="Literature Notes/moseley2006out.md" href="https://www.jayitha.github.io/Notes/literature-notes/moseley2006out.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Out of the tar pit</a><br>2001: <br><a data-tooltip-position="top" aria-label="Literature Notes/enderton2001mathematical/enderton2001mathematical.md" data-href="Literature Notes/enderton2001mathematical/enderton2001mathematical.md" href="https://www.jayitha.github.io/Notes/Literature Notes/enderton2001mathematical/enderton2001mathematical" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">A Mathematical Introduction to Logic</a><a data-tooltip-position="top" aria-label="Literature Notes/enderton2001mathematical/enderton2001mathematical.md" data-href="Literature Notes/enderton2001mathematical/enderton2001mathematical.md" href="https://www.jayitha.github.io/Notes/literature-notes/enderton2001mathematical/enderton2001mathematical.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">A Mathematical Introduction to Logic</a><br>2000: <br><a data-tooltip-position="top" aria-label="Literature Notes/ooi2000indexing.md" data-href="Literature Notes/ooi2000indexing.md" href="https://www.jayitha.github.io/Notes/Literature Notes/ooi2000indexing" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Indexing the Edges—a simple and yet efficient approach to high-dimensional indexing</a><a data-tooltip-position="top" aria-label="Literature Notes/ooi2000indexing.md" data-href="Literature Notes/ooi2000indexing.md" href="https://www.jayitha.github.io/Notes/literature-notes/ooi2000indexing.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Indexing the Edges—a simple and yet efficient approach to high-dimensional indexing</a><br>1999: <br><a data-tooltip-position="top" aria-label="Literature Notes/beyer1999nearest.md" data-href="Literature Notes/beyer1999nearest.md" href="https://www.jayitha.github.io/Notes/Literature Notes/beyer1999nearest" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">When is “Nearest neighbor” meaningful?</a><a data-tooltip-position="top" aria-label="Literature Notes/beyer1999nearest.md" data-href="Literature Notes/beyer1999nearest.md" href="https://www.jayitha.github.io/Notes/literature-notes/beyer1999nearest.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">When is “Nearest neighbor” meaningful?</a><br>1995: <br><a data-tooltip-position="top" aria-label="Literature Notes/abiteboul1995foundations/abiteboul1995foundations.md" data-href="Literature Notes/abiteboul1995foundations/abiteboul1995foundations.md" href="https://www.jayitha.github.io/Notes/Literature Notes/abiteboul1995foundations/abiteboul1995foundations" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Foundations of Databases</a><a data-tooltip-position="top" aria-label="Literature Notes/abiteboul1995foundations/abiteboul1995foundations.md" data-href="Literature Notes/abiteboul1995foundations/abiteboul1995foundations.md" href="https://www.jayitha.github.io/Notes/literature-notes/abiteboul1995foundations/abiteboul1995foundations.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Foundations of Databases</a><br>1984: <br><a data-tooltip-position="top" aria-label="Literature Notes/gray1984logic.md" data-href="Literature Notes/gray1984logic.md" href="https://www.jayitha.github.io/Notes/Literature Notes/gray1984logic" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Logic, algebra and databases</a><a data-tooltip-position="top" aria-label="Literature Notes/gray1984logic.md" data-href="Literature Notes/gray1984logic.md" href="https://www.jayitha.github.io/Notes/literature-notes/gray1984logic.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Logic, algebra and databases</a><br>1981: <br><a data-tooltip-position="top" aria-label="Literature Notes/chamberlin1981history.md" data-href="Literature Notes/chamberlin1981history.md" href="https://www.jayitha.github.io/Notes/Literature Notes/chamberlin1981history" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">A History and Evaluation of System R</a><a data-tooltip-position="top" aria-label="Literature Notes/chamberlin1981history.md" data-href="Literature Notes/chamberlin1981history.md" href="https://www.jayitha.github.io/Notes/literature-notes/chamberlin1981history.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">A History and Evaluation of System R</a><br>1976: <br><a data-tooltip-position="top" aria-label="Literature Notes/stonebraker1976design.md" data-href="Literature Notes/stonebraker1976design.md" href="https://www.jayitha.github.io/Notes/Literature Notes/stonebraker1976design" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">The design and implementation of INGRES</a><a data-tooltip-position="top" aria-label="Literature Notes/stonebraker1976design.md" data-href="Literature Notes/stonebraker1976design.md" href="https://www.jayitha.github.io/Notes/literature-notes/stonebraker1976design.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">The design and implementation of INGRES</a><br><a data-tooltip-position="top" aria-label="Literature Notes/gray1976granularity.md" data-href="Literature Notes/gray1976granularity.md" href="https://www.jayitha.github.io/Notes/Literature Notes/gray1976granularity" class="original-internal-link" target="_blank" rel="noopener nofollow" style="display: none;">Granularity of locks and degrees of consistency</a><a data-tooltip-position="top" aria-label="Literature Notes/gray1976granularity.md" data-href="Literature Notes/gray1976granularity.md" href="https://www.jayitha.github.io/Notes/literature-notes/gray1976granularity.html" class="internal-link mathLink-internal-link" target="_self" rel="noopener nofollow">Granularity of locks and degrees of consistency</a><br><br><br>2023: <br><br>2018: <br><br>2013: <br><br>2007: <br>]]></description><link>https://www.jayitha.github.io/Notes/index.html</link><guid isPermaLink="false">index.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[Tasks]]></title><description><![CDATA[ 
 <br><br> (<a rel="noopener" target="_self" class="internal-link">Conjunctive Normal Form</a>)<a class="tasks-edit" title="Edit task" href="https://www.jayitha.github.io/Notes/about:blank#"></a><br>Research Object-oriented databases - merging database tech with OO languages and AI]]></description><link>https://www.jayitha.github.io/Notes/tasks.html</link><guid isPermaLink="false">Tasks.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item><item><title><![CDATA[To-Read]]></title><description><![CDATA[ 
 <br><br>2024: <br><br>2023: <br><br>2022: <br><br><br><br><br><br>2021: <br><br><br>2020: <br><br><br><br><br><br>2019: <br><br><br><br><br><br>2018: <br><br><br><br><br><br>2017: <br><br><br><br><br>2016: <br><br><br><br><br><br><br><br>2015: <br><br><br><br><br>2014: <br><br><br><br><br><br>2013: <br><br><br><br><br><br>2012: <br><br><br><br>2011: <br><br><br><br><br><br><br>2010: <br><br>2009: <br><br><br><br><br>2008: <br><br><br><br><br><br>2007: <br><br><br><br>2006: <br><br><br>2005: <br><br><br><br><br><br>2004: <br><br><br>2003: <br><br><br><br>2002: <br><br><br><br>2001: <br><br><br>2000: <br><br><br><br>1999: <br><br><br>1998: <br><br><br><br>1997: <br><br><br><br>1996: <br><br><br><br><br><br>1995: <br><br><br><br>1994: <br><br>1992: <br><br>1991: <br><br><br><br>1990: <br><br>1989: <br><br>1988: <br><br>1987: <br><br>1986: <br><br><br>1984: <br><br><br>1983: <br><br>1982: <br><br>1981: <br><br><br>1979: <br><br>1978: <br><br><br><br>1976: <br><br>1975: <br><br>1974: <br><br>1973: <br><br>1971: <br><br>1970: <br><br>1969: <br><br><br>1968: <br><br>1967: <br><br>1964: <br>]]></description><link>https://www.jayitha.github.io/Notes/to-read.html</link><guid isPermaLink="false">To-Read.md</guid><dc:creator><![CDATA[Jayitha Cherapanamjeri]]></dc:creator><pubDate>Fri, 11 Oct 2024 07:44:41 GMT</pubDate></item></channel></rss>